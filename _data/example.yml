"action-button-html":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Need more information?
    subquestion: |
      ${ action_button_html("https://docassemble.org", label="Visit our web site", color="primary", size="md") }
"action-buttons":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": "question: | \n  I will give you \n  ${ quantity_noun(num_apples, 'apple')\
    \ }.\nfield: show_quantity\naction buttons:\n  - label: More\n    action: change_quantity\n\
    \    arguments:\n      amount: 1\n    color: success\n    css class: quantity-up\n\
    \    icon: chevron-up\n  - label: Less\n    action: change_quantity\n    arguments:\n\
    \      amount: -1\n    color: danger\n    css class: quantity-down\n    icon:\
    \ chevron-down\n---\nevent: change_quantity\ncode: |\n  num_apples += action_argument('amount')"
"action-buttons-before":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": "question: | \n  I will give you \n  ${ quantity_noun(num_apples, 'apple')\
    \ }.\nfield: show_quantity\naction buttons:\n  - label: More\n    action: change_quantity\n\
    \    arguments:\n      amount: 1\n    color: success\n    icon: chevron-up\n \
    \   placement: before\n  - label: Less\n    action: change_quantity\n    arguments:\n\
    \      amount: -1\n    color: danger\n    icon: chevron-down\n    placement: before\n\
    ---\nevent: change_quantity\ncode: |\n  num_apples += action_argument('amount')"
"action-buttons-code":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    question: |
      Thank you for that information.
    field: thank_user
    action buttons:
      code: |
        [{'action': 'eat',
          'arguments': {'fruit': favorite_fruit},
          'label': 'Eat ' + favorite_fruit,
          'color': 'secondary',
          'css class': 'eat-button'}]
    ---
    event: eat
    code: |
      log('Nom nom nom.  That ' + action_argument('fruit') + ' was good.', "info")
      set_save_status('ignore')
"action-buttons-http":
  "height": !!int |-
    258
  "width": !!int |-
    488
  "yaml": |-
    question: |
      You may wish to wait until
      ${ today().plus(weeks=3) }
      to file your complaint.
    subquestion: |
      It is up to you whether you wish
      to continue with the interview.

      If you leave, you will be directed
      back to the web site.
    field: wishes_to_continue
    action buttons:
      - label: Come back later
        action: https://docassemble.org
        color: warning
        icon: sign-out-alt
"actions":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Review your information.
    subquestion: |
      Your favorite color is
      ${ color }.
      [Change this]( ${ url_action('color') } )
    field: info_is_verified
    ---
    question: |
      What is your favorite color?
    fields:
      - Favorite Color: color
"actions-demo":
  "height": !!int |-
    454
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Actions
    subquestion: |
      Each of the links below calls a particular action. Try clicking
      these links and note that the way they work the first time they are
      clicked may be different from the way they work the next time they
      are clicked.

      [Variable defined by question](${ url_action('favorite_fruit') })

      [event question](${ url_action('fruit_info') })

      [Variable defined by code](${ url_action('vegetable_asked_about') })

      [Variable defined by code and question](${ url_action('legume_rationale') })

      [event code](${ url_action('increment_counter') })

      [event code that calls force_ask()](${ url_action('review_preferences') })

      The value of the counter is ${ counter }.
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Favorite fruit: favorite_fruit
    ---
    event: fruit_info
    question: |
      Information about fruit
    subquestion: |
      Fruits have seeds. Some fruits are edible.
    buttons:
      - Continue: continue
    ---
    code: |
      vegetable_intro
      favorite_vegetable
      log("The favorite vegetable question has been asked.", "success")
      vegetable_asked_about = True
    ---
    question: |
      Introduction to vegetables
    subquestion: |
      Note that the `code` block action we are in right now will not be
      over unless `vegetable_intro` and `favorite_vegetable` are defined.
      You can refresh the screen now and this screen will appear again.
      Note that `code` blocks with `event` do not behave this way.
    continue button field: vegetable_intro
    ---
    question: |
      What is your favorite vegetable?
    fields:
      - Favorite vegetable: favorite_vegetable
    ---
    question: |
      What is your favorite legume?
    fields:
      - Legume: favorite_legume
    ---
    question: |
      Why do you like ${ favorite_legume }?
    subquestion: |
      Note that `legume_rationale` has already been defined by a
      `code` block during this action, but this `question` is
      being asked anyway.

      An `action` will continue past a `code` block that defines a
      variable and will seek a `question` that defines the same
      variable, if such a `question` exists.
    fields:
      - label: |
          Reason liking ${ favorite_legume }
        field: legume_rationale
        label above field: True
        input type: area
    ---
    code: |
      favorite_legume
      legume_rationale = "because legumes are good"
    ---
    event: increment_counter
    code: |
      counter += 1
    ---
    code: |
      counter = 0
    ---
    event: review_preferences
    code: |
      force_ask('favorite_fruit', 'favorite_vegetable')
"actions-parameters":
  "height": !!int |-
    202
  "width": !!int |-
    488
  "yaml": |-
    initial: True
    code: |
      process_action()
    ---
    question: |
      Review your information.
    subquestion: |
      You have ${ fishes['blue'] } blue
      fishes.
      [Add blue fish]( ${ url_action('add',
        color='blue') } )

      You have ${ fishes['red'] } red
      fishes.
      [Add red fish]( ${ url_action('add',
        color='red') } )
    field: info_is_verified
    ---
    event: add
    code: |
      fishes[action_argument('color')] += 1
"add-separators":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": "mandatory: True\nquestion: |\n  Fruits\nsubquestion: |\n  You like:\n \
    \   \n  % for item in add_separators(fruit):\n  * ${ item }\n  % endfor\nattachment:\n\
    \  docx template file: add-separators.docx\nbuttons:\n  - Try another: restart"
"address-autocomplete":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the address of the adverse
      party?
    fields:
      - Address: defendant.address.address
        address autocomplete: True
      - City: defendant.address.city
      - State: defendant.address.state
        code: |
          states_list()
      - Zip: defendant.address.zip
        required: False
      - County: defendant.address.county
"address-autocomplete-cities":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Enter the name of a city.
    fields:
      - name: the_address.name
        required: False
        address autocomplete:
          types:
            - "(cities)"
          fields:
            - address_components
            - location
      - note: |
          The following attribute names are Google Places `addressComponents`.
      - "administrative_area_&#8203;level_1": the_address.administrative_area_level_1
        required: False
      - "administrative_area_&#8203;level_2": the_address.administrative_area_level_2
        required: False
      - "administrative_area_&#8203;level_3": the_address.administrative_area_level_3
        required: False
      - "administrative_area_&#8203;level_4": the_address.administrative_area_level_4
        required: False
      - "administrative_area_&#8203;level_5": the_address.administrative_area_level_5
        required: False
      - "administrative_area_&#8203;level_6": the_address.administrative_area_level_6
        required: False
      - "administrative_area_&#8203;level_7": the_address.administrative_area_level_7
        required: False
      - colloquial_area: the_address.colloquial_area
        required: False
      - country: the_address.country
        required: False
      - locality: the_address.locality
        required: False
      - neighborhood: the_address.neighborhood
        required: False
      - postal_code: the_address.postal_code
        required: False
      - postal_code_prefix: the_address.postal_code_prefix
        required: False
      - postal_code_suffix: the_address.postal_code_suffix
        required: False
      - postal_town: the_address.postal_town
        required: False
      - sublocality: the_address.sublocality
        required: False
      - sublocality_level_1: the_address.sublocality_level_1
        required: False
      - sublocality_level_2: the_address.sublocality_level_2
        required: False
      - sublocality_level_3: the_address.sublocality_level_3
        required: False
      - sublocality_level_4: the_address.sublocality_level_4
        required: False
      - sublocality_level_5: the_address.sublocality_level_5
        required: False
      - note: |
          The following attribute names are built in to **docassemble**.
          They have different names than Google Places field names. The
          `latitude` and `longitude` fields come from the Google Places
          `location` field.
      - city: the_address.city
        required: False
      - state: the_address.state
        required: False
      - zip: the_address.zip
        required: False
      - latitude: the_address.latitude
        required: False
      - longitude: the_address.longitude
        required: False
"address-autocomplete-establishment":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Enter the name of a business.
    fields:
      - name: the_address.name
        required: False
        address autocomplete:
          types:
            - establishment
          fields:
            - accessibility_options
            - address_components
            - adr_format_address
            - business_status
            - display_name
            - display_name_language_code
            - formatted_address
            - google_maps_links
            - id
            - international_phone_number
            - location
            - national_phone_number
            - plus_code
            - price_level
            - primary_type
            - primary_type_display_name
            - primary_type_display_name_language_code
            - rating
            - types
            - utc_offset_minutes
      - note: |
          The following attribute names are Google Places `addressComponents`.
      - "administrative_area_&#8203;level_1": the_address.administrative_area_level_1
        required: False
      - "administrative_area_&#8203;level_2": the_address.administrative_area_level_2
        required: False
      - "administrative_area_&#8203;level_3": the_address.administrative_area_level_3
        required: False
      - "administrative_area_&#8203;level_4": the_address.administrative_area_level_4
        required: False
      - "administrative_area_&#8203;level_5": the_address.administrative_area_level_5
        required: False
      - "administrative_area_&#8203;level_6": the_address.administrative_area_level_6
        required: False
      - "administrative_area_&#8203;level_7": the_address.administrative_area_level_7
        required: False
      - colloquial_area: the_address.colloquial_area
        required: False
      - country: the_address.country
        required: False
      - floor: the_address.floor
        required: False
      - intersection: the_address.intersection
        required: False
      - locality: the_address.locality
        required: False
      - neighborhood: the_address.neighborhood
        required: False
      - post_box: the_address.post_box
        required: False
      - postal_code: the_address.postal_code
        required: False
      - postal_code_prefix: the_address.postal_code_prefix
        required: False
      - postal_code_suffix: the_address.postal_code_suffix
        required: False
      - postal_town: the_address.postal_town
        required: False
      - premise: the_address.premise
        required: False
      - room: the_address.room
        required: False
      - route: the_address.route
        required: False
      - suite: the_address.suite
        required: False
      - street_number: the_address.street_number
        required: False
      - sublocality: the_address.sublocality
        required: False
      - sublocality_level_1: the_address.sublocality_level_1
        required: False
      - sublocality_level_2: the_address.sublocality_level_2
        required: False
      - sublocality_level_3: the_address.sublocality_level_3
        required: False
      - sublocality_level_4: the_address.sublocality_level_4
        required: False
      - sublocality_level_5: the_address.sublocality_level_5
        required: False
      - subpremise: the_address.subpremise
        required: False
      - note: |
          The following attribute names are Google Places fields other
          than `addressComponents`. Note that some are HTML and some are
          JSON, so they require `datatype: raw`.
      - "has_wheelchair_&#8203;accessible_entrance": the_address.has_wheelchair_accessible_entrance
        required: False
      - "has_wheelchair_&#8203;accessible_parking": the_address.has_wheelchair_accessible_parking
        required: False
      - "has_wheelchair_&#8203;accessible_restroom": the_address.has_wheelchair_accessible_restroom
        required: False
      - "has_wheelchair_&#8203;accessible_seating": the_address.has_wheelchair_accessible_seating
        required: False
      - adr_format_address: the_address.adr_format_address
        datatype: raw
        required: False
      - business_status: the_address.business_status
        required: False
      - display_name: the_address.display_name
        required: False
      - "display_name_&#8203;language_code": the_address.display_name_language_code
        required: False
      - formatted_address: the_address.formatted_address
        required: False
      - directions_uri: the_address.directions_uri
        required: False
      - photos_uri: the_address.photos_uri
        required: False
      - place_uri: the_address.place_uri
        required: False
      - reviews_uri: the_address.reviews_uri
        required: False
      - write_a_review_uri: the_address.write_a_review_uri
        required: False
      - id: the_address.id
        required: False
      - "international_&#8203;phone_number": the_address.international_phone_number
        required: False
      - "national_&#8203;phone_number": the_address.national_phone_number
        required: False
      - compound_code: the_address.compound_code
        required: False
      - global_code: the_address.global_code
        required: False
      - price_level: the_address.price_level
        required: False
      - primary_type: the_address.primary_type
        required: False
      - "primary_type_&#8203;display_name": the_address.primary_type_display_name
        required: False
      - "primary_type_&#8203;display_name_language_code": the_address.primary_type_display_name_language_code
        required: False
      - rating: the_address.rating
        required: False
      - types: the_address.types
        required: False
        datatype: raw
      - utc_offset_minutes: the_address.utc_offset_minutes
        required: False
      - note: |
          The following attribute names are built in to **docassemble**.
          They have different names than Google Places field names. The
          `latitude` and `longitude` fields come from the Google Places
          `location` field.
      - address: the_address.address
        required: False
      - unit: the_address.unit
        required: False
      - city: the_address.city
        required: False
      - state: the_address.state
        required: False
      - zip: the_address.zip
        required: False
      - latitude: the_address.latitude
        required: False
      - longitude: the_address.longitude
        required: False
"address-autocomplete-nz":
  "yaml": |-
    question: |
      What is the address of the adverse
      party?
    fields:
      - Address: defendant.address.address
        address autocomplete: True
      - Suburb: defendant.address.sublocality_level_1
      - City: defendant.address.city
      - Postal Code: defendant.address.postal_code
        required: False
"address-autocomplete-regions":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Enter the name of a region.
    fields:
      - name: the_address.name
        required: False
        address autocomplete:
          types:
            - "(regions)"
          fields:
            - address_components
            - location
      - note: |
          The following attribute names are Google Places `addressComponents`.
      - "administrative_area_&#8203;level_1": the_address.administrative_area_level_1
        required: False
      - "administrative_area_&#8203;level_2": the_address.administrative_area_level_2
        required: False
      - "administrative_area_&#8203;level_3": the_address.administrative_area_level_3
        required: False
      - "administrative_area_&#8203;level_4": the_address.administrative_area_level_4
        required: False
      - "administrative_area_&#8203;level_5": the_address.administrative_area_level_5
        required: False
      - "administrative_area_&#8203;level_6": the_address.administrative_area_level_6
        required: False
      - "administrative_area_&#8203;level_7": the_address.administrative_area_level_7
        required: False
      - colloquial_area: the_address.colloquial_area
        required: False
      - country: the_address.country
        required: False
      - locality: the_address.locality
        required: False
      - neighborhood: the_address.neighborhood
        required: False
      - postal_code: the_address.postal_code
        required: False
      - postal_code_prefix: the_address.postal_code_prefix
        required: False
      - postal_code_suffix: the_address.postal_code_suffix
        required: False
      - postal_town: the_address.postal_town
        required: False
      - sublocality: the_address.sublocality
        required: False
      - sublocality_level_1: the_address.sublocality_level_1
        required: False
      - sublocality_level_2: the_address.sublocality_level_2
        required: False
      - sublocality_level_3: the_address.sublocality_level_3
        required: False
      - sublocality_level_4: the_address.sublocality_level_4
        required: False
      - sublocality_level_5: the_address.sublocality_level_5
        required: False
      - note: |
          The following attribute names are built in to **docassemble**.
          They have different names than Google Places field names. The
          `latitude` and `longitude` fields come from the Google Places
          `location` field.
      - city: the_address.city
        required: False
      - state: the_address.state
        required: False
      - zip: the_address.zip
        required: False
      - latitude: the_address.latitude
        required: False
      - longitude: the_address.longitude
        required: False
"address-autocomplete-specific":
  "height": !!int |-
    615
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Enter the name of a dentist or doctor.
    fields:
      - name: the_address.name
        required: False
        address autocomplete:
          types:
            - dentist
            - doctor
          fields:
            - address_components
            - national_phone_number
      - note: |
          The following attribute names are Google Places `addressComponents`.
      - "administrative_area_&#8203;level_1": the_address.administrative_area_level_1
        required: False
      - "administrative_area_&#8203;level_2": the_address.administrative_area_level_2
        required: False
      - "administrative_area_&#8203;level_3": the_address.administrative_area_level_3
        required: False
      - "administrative_area_&#8203;level_4": the_address.administrative_area_level_4
        required: False
      - "administrative_area_&#8203;level_5": the_address.administrative_area_level_5
        required: False
      - "administrative_area_&#8203;level_6": the_address.administrative_area_level_6
        required: False
      - "administrative_area_&#8203;level_7": the_address.administrative_area_level_7
        required: False
      - colloquial_area: the_address.colloquial_area
        required: False
      - country: the_address.country
        required: False
      - floor: the_address.floor
        required: False
      - intersection: the_address.intersection
        required: False
      - locality: the_address.locality
        required: False
      - neighborhood: the_address.neighborhood
        required: False
      - post_box: the_address.post_box
        required: False
      - postal_code: the_address.postal_code
        required: False
      - postal_code_prefix: the_address.postal_code_prefix
        required: False
      - postal_code_suffix: the_address.postal_code_suffix
        required: False
      - postal_town: the_address.postal_town
        required: False
      - premise: the_address.premise
        required: False
      - room: the_address.room
        required: False
      - route: the_address.route
        required: False
      - street_number: the_address.street_number
        required: False
      - sublocality: the_address.sublocality
        required: False
      - sublocality_level_1: the_address.sublocality_level_1
        required: False
      - sublocality_level_2: the_address.sublocality_level_2
        required: False
      - sublocality_level_3: the_address.sublocality_level_3
        required: False
      - sublocality_level_4: the_address.sublocality_level_4
        required: False
      - sublocality_level_5: the_address.sublocality_level_5
        required: False
      - subpremise: the_address.subpremise
        required: False
      - note: |
          The following attribute names are Google Places fields other
          than `addressComponents`.
      - "national_&#8203;phone_number": the_address.national_phone_number
        required: False
      - note: |
          The following attribute names are built in to **docassemble**.
          They have different names than Google Places field names.
      - address: the_address.address
        required: False
      - unit: the_address.unit
        required: False
      - city: the_address.city
        required: False
      - state: the_address.state
        required: False
      - zip: the_address.zip
        required: False
"address-autocomplete-test":
  "height": !!int |-
    1998
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Test address autocomplete
    fields:
      - address: the_address.address
        address autocomplete: True
      - note: |
          The following attribute names are Google Place components.
      - "administrative_area_&#8203;level_1": the_address.administrative_area_level_1
        required: False
      - "administrative_area_&#8203;level_2": the_address.administrative_area_level_2
        required: False
      - "administrative_area_&#8203;level_3": the_address.administrative_area_level_3
        required: False
      - "administrative_area_&#8203;level_4": the_address.administrative_area_level_4
        required: False
      - "administrative_area_&#8203;level_5": the_address.administrative_area_level_5
        required: False
      - "administrative_area_&#8203;level_6": the_address.administrative_area_level_6
        required: False
      - "administrative_area_&#8203;level_7": the_address.administrative_area_level_7
        required: False
      - colloquial_area: the_address.colloquial_area
        required: False
      - country: the_address.country
        required: False
      - floor: the_address.floor
        required: False
      - intersection: the_address.intersection
        required: False
      - locality: the_address.locality
        required: False
      - neighborhood: the_address.neighborhood
        required: False
      - post_box: the_address.post_box
        required: False
      - postal_code: the_address.postal_code
        required: False
      - postal_code_prefix: the_address.postal_code_prefix
        required: False
      - postal_code_suffix: the_address.postal_code_suffix
        required: False
      - postal_town: the_address.postal_town
        required: False
      - premise: the_address.premise
        required: False
      - room: the_address.room
        required: False
      - route: the_address.route
        required: False
      - street_number: the_address.street_number
        required: False
      - sublocality: the_address.sublocality
        required: False
      - sublocality_level_1: the_address.sublocality_level_1
        required: False
      - sublocality_level_2: the_address.sublocality_level_2
        required: False
      - sublocality_level_3: the_address.sublocality_level_3
        required: False
      - sublocality_level_4: the_address.sublocality_level_4
        required: False
      - sublocality_level_5: the_address.sublocality_level_5
        required: False
      - subpremise: the_address.subpremise
        required: False
      - note: |
          The following attribute names are built in to **docassemble**.
          They have different names than Google Place component names.
      - unit: the_address.unit
        required: False
      - city: the_address.city
        required: False
      - state: the_address.state
        required: False
      - zip: the_address.zip
        required: False
"address-block":
  "height": !!int |-
    446
  "width": !!int |-
    488
  "yaml": |-
    objects:
      address: Address
    ---
    question: |
      What is your address?
    fields:
      - Address: address.address
      - Unit: address.unit
        required: False
      - City: address.city
      - State: address.state
        required: False
      - Postal Code: address.postal_code
        required: False
      - Country: address.country
        code: |
          countries_list()
        required: False
    ---
    mandatory: True
    question: Your address block
    subquestion: |
      Default:

      ${ address }

      Showing the country:

      ${ address.block(show_country=True) }

      International:

      ${ address.block(international=True) }
"age_in_years":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your date of birth?
    fields:
      - no label: user.birthdate
        datatype: date
    ---
    question: |
      You are ${ user.age_in_years() }
      years old.
    mandatory: True
"ajax-calc":
  "height": !!int |-
    284
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Let's calculate some stuff.
    fields:
      - A: var_a
        datatype: number
      - B: var_b
        datatype: number
      - C: var_c
        datatype: number
    check in: add_numbers
    ---
    mandatory: true
    question: |
      % if var_c == var_a * var_b:
      The correct answer is ${ var_c }.
      % else:
      That answer is not right!
      % endif
    ---
    event: add_numbers
    code: |
      if action_argument('var_a') != '' and action_argument('var_b') != '':
        answer = float(action_argument('var_a')) * float(action_argument('var_b'))
        background_response({'var_c': answer}, 'fields')
      background_response()
"ajax-calc-javascript":
  "height": !!int |-
    284
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Let's calculate some stuff.
    fields:
      - A: var_a
        datatype: number
      - B: var_b
        datatype: number
      - C: var_c
        datatype: number
    check in: add_numbers
    ---
    mandatory: true
    question: |
      % if var_c == var_a * var_b:
      The correct answer is ${ var_c }.
      % else:
      That answer is not right!
      % endif
    ---
    event: add_numbers
    code: |
      if action_argument('var_a') != '' and action_argument('var_b') != '':
        answer = float(action_argument('var_a')) * float(action_argument('var_b'))
        background_response('flash("Hint: C should be " + ' + str(answer) + ', "success")', 'javascript')
      background_response()
"ajax-flash":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite food?
    fields:
      - Favorite food: favorite_food
      - Favorite drink: favorite_drink
    check in: criticize_food
    ---
    code: |
      favorite_food_interim = ''
    ---
    event: criticize_food
    code: |
      if action_argument('favorite_food') and action_argument('favorite_food') != favorite_food_interim:
        favorite_food_interim = action_argument('favorite_food')
        background_response("What? You like " + favorite_food_interim.upper() + "?", 'flash')
      background_response()
"ajax-refresh":
  "height": !!int |-
    354
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      number_of_things = 3
    ---
    question: |
      Tell me which thing you want.
    fields:
      - "How many things are there?": number_of_things
        datatype: integer
        min: 1
        max: 10
      - "Which thing do you want?": thing
        input type: radio
        code: |
          range(1, number_of_things + 1)
    check in: set_number_of_things
    ---
    event: set_number_of_things
    code: |
      if action_argument('number_of_things') and number_of_things != int(action_argument('number_of_things')):
        number_of_things = int(action_argument('number_of_things'))
        if number_of_things < 1:
          number_of_things = 1
        elif number_of_things > 10:
          number_of_things = 10
        background_response('refresh')
      background_response()
"alarm-clock":
  "yaml": |-
    mandatory: True
    code: |
      email_sent = False
      multi_user = True
      allow_cron = True
      counter = 0
"alignment":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: Here is your document.
    subquestion: It has aligned text.
    attachments:
      - name: A test document
        filename: test_document
        content: |
          [BOLDCENTER] A Document That
          Explains Things To You

          This is a big important document.
          It addresses all of the concerns
          that you might have with the
          benefits to which you may be
          entitled, now, in the future,
          or in the past, whichever comes
          first.

          [CENTER] Benefits Summary

          ${ client } is entitled to
          benefits plan ${ benefits }.

          For more information about the
          benefits to which you may or may
          not be entitled, whether on this
          planet or another planet in the
          solar system, contact:

          [FLUSHLEFT] Andrea Advocate [BR]
          123 Riverside Drive [BR]
          Fort Franklin, AR 92302

          By comparison, this uses the
          standard Markdown flushleft
          environment:

          | Andrea Advocate
          | 123 Riverside Drive
          | Fort Franklin, AR 92302
    mandatory: True
"all-false":
  "height": !!int |-
    368
  "width": !!int |-
    488
  "yaml": "question: |\n  Please tell me what you think.\nfields:\n  - \"Select the\
    \ fruits you like\": likes_fruit\n    datatype: checkboxes\n    choices:\n   \
    \   - Apples\n      - Peaches\n      - Pears\n      - Plums\n---\nmandatory: True\n\
    question: |\n  Summary of your answer\nsubquestion: |\n  It is\n  % if likes_fruit.all_false():\n\
    \  true\n  % else:\n  not true\n  % endif\n  that you don't like any of the fruit.\n\
    \  \n  It is\n  % if likes_fruit.all_false('Apples', 'Pears'):\n  true\n  % else:\n\
    \  not true\n  % endif\n  that you do not like apples or pears.\n\n  It is\n \
    \ % if likes_fruit.all_false('Apples', 'Pears', exclusive=True):\n  true\n  %\
    \ else:\n  not true\n  % endif\n  that apples and pears are the only fruits you\
    \ do not like.\n\n  It is\n  % if likes_fruit.any_false():\n  true\n  % else:\n\
    \  not true\n  % endif\n  that there is at least one fruit you do not like."
"all-mandatory":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      How are you doing?
    field: how_doing
    choices:
      - Fine
      - Ill
    ---
    mandatory: True
    question: |
      What is your favorite color?
    fields:
      Color: favorite_color
    ---
    mandatory: True
    question: |
      Your favorite color is
      ${ favorite_color }.
    subquestion: |
      % if how_doing == 'Fine':
      I am glad you are doing well.
      % else:
      I am sorry you aren't feeling 100%.
      % endif
"all-true":
  "height": !!int |-
    368
  "width": !!int |-
    488
  "yaml": "question: |\n  Please tell me what you think.\nfields:\n  - \"Select the\
    \ fruits you like\": likes_fruit\n    datatype: checkboxes\n    choices:\n   \
    \   - Apples\n      - Peaches\n      - Pears\n      - Plums\n---\nmandatory: True\n\
    question: |\n  Summary of your answer\nsubquestion: |\n  It is\n  % if likes_fruit.all_true():\n\
    \  true\n  % else:\n  not true\n  % endif\n  that you like all fruit.\n  \n  It\
    \ is\n  % if likes_fruit.all_true('Apples', 'Pears'):\n  true\n  % else:\n  not\
    \ true\n  % endif\n  that you like apples and pears.\n\n  It is\n  % if likes_fruit.all_true('Apples',\
    \ 'Pears', exclusive=True):\n  true\n  % else:\n  not true\n  % endif\n  that\
    \ apples and pears are the only fruits you like.\n\n  It is\n  % if likes_fruit.any_true():\n\
    \  true\n  % else:\n  not true\n  % endif\n  that you like at least one fruit."
"all_variables":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "mandatory: True\nquestion: |\n  Interview dictionary\nsubquestion: |\n\
    \  The variables in the dictionary are:\n    \n  `${ all_variables() }`"
"allow-downloading-true":
  "height": !!int |-
    999
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Your documents are ready.
    allow downloading: True
    attachments:
      - name: A hello world document
        filename: Hello_World
        description: |
          A document with a classic message
        content: |
          Hello, world!
      - name: |
          A goodbye cruel world document
        filename: Goodbye_Cruel_World
        description: |
          Another document with a classic
          message
        content: |
          Goodbye, cruel world!
"allow-downloading-true-zip-filename":
  "height": !!int |-
    1135
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Your documents are ready.
    allow downloading: True
    zip filename: Hello_Goodbye.zip
    attachments:
      - name: A hello world document
        filename: Hello_World
        description: |
          A document with a classic message
        content: |
          Hello, world!
      - name: |
          A goodbye cruel world document
        filename: Goodbye_Cruel_World
        description: |
          Another document with a classic
          message
        content: |
          Goodbye, cruel world!
"allow-emailing-false":
  "height": !!int |-
    454
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Your document is ready.
    attachment:
      - name: A hello world document
        filename: Hello_World
        description: |
          A document with a classic message
        content: |
          Hello, world!
    allow emailing: False
"allow-emailing-false-pdf":
  "yaml": |-
    mandatory: True
    question: Your document is ready.
    attachment:
      - name: A hello world document
        filename: Hello_World
        valid formats:
          - pdf
        description: |
          A document with a classic message
        content: |
          Hello, world!
    allow emailing: False
"allow-emailing-true":
  "height": !!int |-
    681
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Your document is ready.
    attachment:
      - name: A hello world document
        filename: Hello_World
        description: |
          A document with a classic message
        content: |
          Hello, world!
"always-include":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Your document is ready.
    attachment:
      - name: A hello world document
        filename: Hello_World
        description: |
          A document with a classic message
        content: |
          Hello, world!
        valid formats:
          - pdf
          - docx
    always include editable files: True
"animal":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: What is your favorite animal?
    fields:
      - Animal: favorite_animal
    ---
    question: What is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
    ---
    mandatory: True
    question: What a coincidence!
    subquestion: |
      My favorite animal is the ${ favorite_animal }, too!
    buttons:
      - Exit: exit
"append-list":
  "yaml": "objects:\n  - person: DAList.using(object_type=Individual, there_are_any=True)\n\
    \  - doctor: Individual\n---\nquestion: |\n  What is the name of the ${ ordinal(i)\
    \ } person?\nfields:\n  - First name: person[i].name.first\n  - Last name: person[i].name.last\n\
    ---\nquestion: |\n  What ${ person[i].possessive('age') }?\nfields:\n  - Age in\
    \ years: person[i].age\n    datatype: integer\n---\nquestion: |\n  Is there another\
    \ person?\nyesno: person.there_is_another\n---\nquestion: |\n  Who is your doctor?\n\
    fields:\n  - \"Someone already mentioned\": doctor\n    datatype: object\n   \
    \ choices:\n      - person\n    disable others: True\n  - First name: doctor.name.first\n\
    \  - Last name: doctor.name.last\n---\nmandatory: True\ncode: |\n  person.gather()\n\
    \  need(doctor.name.first, doctor.name.last)\n  if doctor not in person:\n   \
    \ person.append(doctor, set_instance_name=True)\n  finish_screen\n---\nevent:\
    \ finish_screen\nquestion: All done\nsubquestion: |\n  The people are:\n    \n\
    \  % for y in person:\n  * ${ y } is ${ y.age } years old.\n  % endfor"
"as-datetime":
  "height": !!int |-
    96
  "width": !!int |-
    488
  "yaml": "question: |\n  The Delorean will go back in time to \n  ${ as_datetime('11/5/1955').year\
    \ }.\nmandatory: True"
"assemble-in-background":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      need(sweetheart)
      if the_task.ready():
        final_screen
      else:
        waiting_screen
    ---
    question: |
      What is the name of your
      sweetheart?
    fields:
      - Name: sweetheart
    ---
    code: |
      the_task = background_action('assembly_task', 'refresh')
    ---
    event: assembly_task
    code: |
      background_response_action('assembly_done', document=the_document)
    ---
    attachment:
      name: A letter
      filename: letter
      variable name: the_document
      content: |
        ${ sweetheart }, will you
        marry me?
    ---
    event: assembly_done
    code: |
      the_letter = action_argument('document')
      background_response()
    ---
    event: waiting_screen
    question: |
      Please wait...
    ---
    event: final_screen
    question: |
      Document created
    subquestion: |
      Don't read this letter, just send
      it to ${ sweetheart } immediately.
    attachment code: the_letter
"assets":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - decedent: Individual
      - estate: Thing
      - estate.asset: Asset
    ---
    question: |
      Who is the decedent?
    fields:
      - First Name: decedent.name.first
      - Last Name: decedent.name.last
    ---
    code: |
      estate.name.text = "estate of " + decedent.name.full()
    ---
    question: |
      Does the ${ estate } have
      any assets?
    yesno: estate.asset.there_are_any
    ---
    question: |
      What type of asset does
      the ${ estate } have?
    fields:
      - Type of asset: estate.asset.new_item_name
        hint: |
          e.g., real estate, 401(k), jewelry
    ---
    question: |
      What is the value of ${ i }
      in the ${ estate }?
    fields:
      - Value: estate.asset[i].value
        datatype: currency
    ---
    question: |
      Is there another asset in
      the ${ estate }?
    yesno: estate.asset.there_is_another
    ---
    mandatory: True
    question: |
      Summary of the ${ estate }.
    subquestion: |
      The total value of
      ${ decedent.possessive('estate') }
      is
      ${ currency(estate.asset.total()) }.
"attachment":
  "yaml": |-
    question: Your document is ready.
    sets: provide_user_with_document
    attachment:
      - name: A hello world document
        filename: Hello_World
        valid formats:
          - pdf
        description: |
          A document with a classic message
        content: |
          Hello, world!
"attachment-code":
  "height": !!int |-
    1262
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Here are your documents!
    attachment code: |
      [doc_one, doc_two, doc_three]
    ---
    attachment:
      name: The first document
      filename: document_one
      description: |
        This is the first document
        of a series.
      variable name: doc_one
      content: |
        Hello, world number one!
    ---
    attachment:
      name: The second document
      filename: document_two
      description: |
        This is the second document
        of a series.
      variable name: doc_two
      content: |
        Hello, world number two!
    ---
    attachment:
      name: The third document
      filename: document_three
      description: |
        This is the third document
        of a series.
      variable name: doc_three
      content: |
        Hello, world number three!
"attachment-notice":
  "height": !!int |-
    379
  "width": !!int |-
    488
  "yaml": |-
    question: Here is your document.
    attachments:
      - name: Praecipe to discontinue
        docx template file: praecipe_discontinue.docx
        valid formats:
          - pdf
    include attachment notice: False
    include download tab: False
    mandatory: True
"attachment-simple":
  "height": !!int |-
    681
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Your document is ready.
    attachment:
      - name: A hello world document
        filename: Hello_World
        description: |
          A document with a classic message
        content: |
          Hello, world!
"attorney":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.demo.attorney
    ---
    imports:
      - us
    ---
    objects:
      - lawyer: Attorney
    ---
    mandatory: True
    question: |
      % if lawyer.can_practice_in('MA'):
      ${ lawyer } can practice in Massachusetts.
      % else:
      Sorry, ${ lawyer } cannot practice in Massachusetts.
      % endif
    ---
    generic object: Attorney
    question: |
      In what state(s) ${ x.is_are_you() } admitted to practice?
    fields:
      - no label: x.bar_admissions
        datatype: checkboxes
        code: |
          us.states.mapping('abbr', 'name')
    ---
    generic object: Attorney
    question: |
      What is the attorney's name?
    fields:
      - First Name: x.name.first
      - Last Name: x.name.last
"audio":
  "height": !!int |-
    222
  "width": !!int |-
    488
  "yaml": |-
    audio: schumann-clip-1.mp3
    question: You need to relax.
    subquestion: |
      Listen to some Schumann, and then
      proceed.
    field: user_is_relaxed
"audio-upload":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: Upload an audio file.
    fields:
      - no label: my_file
        datatype: microphone
    ---
    mandatory: True
    question: Listen to this!
    subquestion: |
      Best song ever:

      ${ my_file }

      Don't you think so?
"auto-terms":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    auto terms:
      creeper: |
        A tall green creature that explodes if
        you get too close.
      zombie pigman: |
        A harmless creature who carries a gold
        sword.
    ---
    question: Have you ever met a creeper?
    subquestion: |
      If you have met a zombie pigman, you
      have almost certainly met a creeper.
    yesno: met_a_creeper
"background-error-action":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "mandatory: True\ncode: |\n  if the_task.ready():\n    if the_task.failed():\n\
    \      error_screen\n    else:\n      final_screen\n  else:\n    waiting_screen\n\
    ---\ncode: |\n  the_task = background_action('bg_task', additional=value_to_add)\n\
    ---\nquestion: |\n  How much shall I add to 553?\nfields:\n  - Number: value_to_add\n\
    \    datatype: integer\n---\nevent: bg_task\ncode: |\n  # This is where time-consuming\
    \ code\n  # would go\n  background_error_action('bg_fail', stage='calculation')\n\
    \  value = 553 + action_argument('additional') / 0\n  background_response_action('bg_resp',\
    \ ans=value)\n---\nevent: bg_resp\ncode: |\n  answer = action_argument('ans')\n\
    \  background_response()\n---\nevent: bg_fail\ncode: |\n  errmess = \"Failure\
    \ at the \" \\\n            + action_argument('stage') \\\n            + \" stage\
    \ due to a \" \\\n            + action_argument('error_type') \\\n           \
    \ + \" error\"\n  background_response('handled_error')\n---\nevent: error_screen\n\
    question: |\n  There was an error.\nsubquestion: |\n  The saved error message\
    \ was\n  ${ errmess }.\n  \n  The value was\n  `${ the_task.get() }`.\n  \n  The\
    \ error was\n  `${ the_task.result().error_type }`.\n\n  The trace was\n  \n \
    \ ${ indent(the_task.result().error_trace) }\n\n  The message was\n  \n  ${ indent(the_task.result().error_message)\
    \ }\n\n  The variables were\n  `${ repr(the_task.result().variables) }`.\n---\n\
    event: final_screen\nquestion: |\n  The answer is ${ answer }.\n---\nevent: waiting_screen\n\
    question: |\n  Hang tight.\n  Still waiting for an answer.\nsubquestion: |\n \
    \ This screen will reload every\n  ten seconds until the answer\n  is available.\n\
    reload: True"
"background-error-action-demo":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Give me some numbers.
    fields:
     - Numerator: b
       datatype: number
     - Denominator: c
       datatype: number
    ---
    code: |
      need(b, c)
      task = background_action('bg_task')
    ---
    mandatory: True
    code: |
      if task.ready():
        show_result
      else:
        show_waiting_screen
    ---
    event: show_waiting_screen
    reload: True
    question: |
      Waiting for result...
    ---
    event: show_result
    question: |
      Result of task
    subquestion: |
      % if computation_ok:
      The result was ${ answer }.
      % else:
      There was an error.
      % endif
    ---
    event: bg_task
    code: |
      # This is where time-consuming code
      # would go.
      background_error_action('bg_failure')
      a = b / c
      background_response_action('bg_success', answer=a)
    ---
    event: bg_success
    code: |
      computation_ok = True
      answer = action_argument('answer')
      background_response()
    ---
    event: bg_failure
    code: |
      computation_ok = False
      background_response()
"background_action":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      the_task
      if the_task.ready():
        final_screen
      else:
        waiting_screen
    ---
    code: |
      the_task = background_action('bg_task', additional=value_to_add)
    ---
    question: |
      How much shall I add to 553?
    fields:
      - Number: value_to_add
        datatype: integer
    ---
    event: bg_task
    code: |
      # This is where time-consuming code
      # would go.
      background_response(553 + action_argument('additional'))
    ---
    event: waiting_screen
    question: |
      Hang tight.
      Still waiting for an answer.
    subquestion: |
      This screen will reload every
      ten seconds until the answer
      is available.
    reload: True
    ---
    event: final_screen
    question: |
      The answer is ${ the_task.get() }.
"background_action_fields":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    code: |
      the_task = background_action('bg_task', 'fields', additional=value_to_add)
    ---
    question: |
      How much shall I add to 553?
    fields:
      - Number: value_to_add
        datatype: integer
    ---
    event: bg_task
    code: |
      the_answer = 553 + action_argument('additional')
      background_response({'the_number': the_answer})
"background_action_flash":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    code: |
      the_task = background_action('bg_task', 'flash', additional=value_to_add)
    ---
    question: |
      How much shall I add to 553?
    fields:
      - Number: value_to_add
        datatype: integer
    ---
    event: bg_task
    code: |
      the_answer = str(553 + action_argument('additional'))
      background_response("The answer is " + the_answer + ".")
"background_action_javascript":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    code: |
      the_task = background_action('bg_task', 'javascript', additional=value_to_add)
    ---
    question: |
      How much shall I add to 553?
    fields:
      - Number: value_to_add
        datatype: integer
    ---
    event: bg_task
    code: |
      the_answer = str(553 + action_argument('additional'))
      background_response("alert('The answer is " + the_answer + ".');")
"background_action_object":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      bg: BackgroundAction
    ---
    code: |
      answer = bg.run('bg_task', additional=value_to_add)
    ---
    question: |
      How much shall I add to 553?
    fields:
      - Number: value_to_add
        datatype: integer
    ---
    event: bg_task
    code: |
      background_response(553 + action_argument('additional'))
    ---
    mandatory: True
    question: |
      The answer is ${ answer }.
"background_action_refresh":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    code: |
      the_task = background_action('bg_task', 'refresh', additional=value_to_add)
    ---
    question: |
      How much shall I add to 553?
    fields:
      - Number: value_to_add
        datatype: integer
    ---
    event: bg_task
    code: |
      value = 553 + action_argument('additional')
      background_response_action('bg_resp', ans=value)
    ---
    event: bg_resp
    code: |
      answer = action_argument('ans')
      background_response()
"background_action_test_timing":
  "yaml": |-
    mandatory: True
    code: |
      if the_task.ready():
        final_screen
      else:
        waiting_screen
    ---
    code: |
      need(value_to_add)
      the_task = background_action('bg_task')
      import time
      time.sleep(2)
    ---
    question: |
      How much shall I add to 553?
    fields:
      - Number: value_to_add
        datatype: integer
    ---
    event: bg_task
    code: |
      # This is where time-consuming code
      # would go.
      background_response(553 + value_to_add)
    ---
    event: waiting_screen
    question: |
      Hang tight.
      Still waiting for an answer.
    subquestion: |
      This screen will reload every
      ten seconds until the answer
      is available.
    reload: True
    ---
    event: final_screen
    question: |
      The answer is ${ the_task.get() }.
"background_action_with_response_action":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    event: bg_task
    code: |
      # This is where time-consuming code
      # would go
      value = 553 + action_argument('additional')
      background_response_action('bg_resp', ans=value)
    ---
    event: bg_resp
    code: |
      answer = action_argument('ans')
      background_response()
    ---
    event: final_screen
    question: |
      The answer is ${ answer }.
"background_response_action_flash":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    code: |
      the_task = background_action('bg_task', 'flash', additional=value_to_add)
    ---
    question: |
      How much shall I add to 553?
    fields:
      - Number: value_to_add
        datatype: integer
    ---
    event: bg_task
    code: |
      value = 553 + action_argument('additional')
      background_response_action('bg_resp', ans=value)
    ---
    event: bg_resp
    code: |
      answer = action_argument('ans')
      background_response("The answer is " + str(answer) + ".")
"blank-label-field":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your Zodiac sign?
    fields:
      - "": target_variable
"branch-error":
  "height": !!int |-
    623
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - tree: DAObject
      - long_branch: DAObject
    ---
    mandatory: True
    question: |
      The length of the branch is
      ${ tree.branch.length }.
    ---
    code: |
      tree.branch = long_branch
    ---
    question: |
      What is the length of the branch
      on the tree?
    fields:
      - Length: tree.branch.length
"branch-no-error":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - tree: DAObject
      - tree.branch: DAObject
    ---
    mandatory: True
    question: |
      The length of the branch is
      ${ tree.branch.length }.
    ---
    question: |
      What is the length of the branch
      on the tree?
    fields:
      - Length: tree.branch.length
"breadcrumbs":
  "height": !!int |-
    275
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - bc: DABreadCrumbs
    ---
    default screen parts:
      pre: |
        ${ bc.show() }
    ---
    breadcrumb: Edit person
    question: |
      Who is the ${ ordinal(i) } person?
    fields:
      - First Name: person[i].name.first
      - Last Name: person[i].name.last
    ---
    breadcrumb: Edit fruit
    question: |
      What is ${ person[i].possessive('favorite fruit') }?
    subquestion: |
      Make sure you indicate
      ${ person[i].possessive('most favorite fruit') },
      taking into account all of the
      [types of fruit](${ url_action('explore_fruit') }) that exist in the
      universe.
    fields:
      - Fruit: person[i].favorite_fruit
    ---
    breadcrumb: Edit answers
    question: |
      Edit your answers
    review:
      - note: |
          % if len(person):
          The people are:

          ${ person.table }

          ${ person.add_action() }
          % else:
          There are no people.

          ${ person.add_action("I would like to add one.") }
          % endif
    event: review_interview
    ---
    breadcrumb: Fruit types
    question: Types of fruit
    subquestion: |
      There are several types of fruit, including:

      * apple
      * orange
      * grapes
      * peach
      * lemon
      * grapefruit
      * pear
      * lime
      * mango
      * tomato
      * melon
    continue button field: explore_fruit
"buttons":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What type of belly button do you
      have?
    field: target_variable
    buttons:
      - Innie
      - Outie
      - No belly button
"buttons-code":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: What kind of car do you want?
    buttons:
      - Ford Focus:
          code: |
            car_model = "Focus"
            car_make = "Ford"
      - Toyota Camry:
          code: |
            car_model = "Camry"
            car_make = "Toyota"
"buttons-code-color":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: What is your favorite color?
    buttons:
      - Red:
          question: Dark red or light red?
          field: favorite_color
          buttons:
            - Dark Red
            - Light Red
      - Green:
          question: Dark green or light green?
          field: favorite_color
          buttons:
            - Dark Green
            - Light Green
"buttons-code-color-iterator":
  "yaml": |-
    objects:
      person: DAList.using(object_type=Individual, there_are_any=True)
"buttons-code-iterator":
  "yaml": |-
    objects:
      person: DAList.using(object_type=Individual, there_are_any=True)
"buttons-code-list":
  "height": !!int |-
    187
  "width": !!int |-
    488
  "yaml": |-
    field: target_variable
    question: |
      Your use of this system does not
      mean that you have a lawyer.  Do
      you understand this?
    buttons:
      code: |
        [{'understands': "I understand"},
         {'does not understand': "I do not understand"},
         {'unsure': "I'm not sure"}]
"buttons-code-list-equivalent":
  "height": !!int |-
    187
  "width": !!int |-
    488
  "yaml": |-
    field: target_variable
    question: |
      Your use of this system does not
      mean that you have a lawyer.  Do
      you understand this?
    buttons:
      - "I understand": understands
      - "I do not understand": does not understand
      - "I'm not sure": unsure
"buttons-code-list-label-value":
  "height": !!int |-
    187
  "width": !!int |-
    488
  "yaml": |-
    field: target_variable
    question: |
      Your use of this system does not
      mean that you have a lawyer.  Do
      you understand this?
    buttons:
      code: |
        [{'label': "I understand",
          'value': 'understands',
          'css class': 'good',
          'color': 'success'},
         {'label': "I do not understand",
          'value': 'does not understand',
          'css class': 'clueless',
          'color': 'danger'},
         {'label': "I object",
          'value': 'objects',
          'css class': 'ornery',
          'show if': is_annoying,
          'color': 'danger'},
         {'label': "I'm not sure",
          'value': 'unsure',
          'css class': 'unsure',
          'color': 'warning'}]
"buttons-code-list-label-value-datatype":
  "height": !!int |-
    187
  "width": !!int |-
    488
  "yaml": |-
    field: target_variable
    question: |
      Your use of this system does not
      mean that you have a lawyer.  Do
      you understand this?
    datatype: boolean
    buttons:
      code: |
        [{'label': "I understand",
          'value': True,
          'css class': 'good',
          'color': 'success'},
         {'label': "I do not understand",
          'value': False,
          'css class': 'clueless',
          'color': 'danger'}]
"buttons-code-list-partial":
  "height": !!int |-
    187
  "width": !!int |-
    488
  "yaml": |-
    field: target_variable
    question: |
      Your use of this system does not
      mean that you have a lawyer.  Do
      you understand this?
    buttons:
      - "I understand": understands
      - code: |
          [{'does not understand':"I do not understand"}, {'unsure':"I'm not sure"}]
"buttons-css-class-color":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    field: user_gender
    question: What is your gender?
    buttons:
      - value: male
        label: Male
        css class: male-button
        color: info
      - value: female
        label: Female
        css class: female-button
        color: danger
"buttons-icons":
  "height": !!int |-
    439
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the most important question
      to ask?
    field: interrogatory
    buttons:
      - "When?": when
        image: calendar
      - "Where?": where
        image: map
"buttons-icons-code":
  "height": !!int |-
    439
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the most important question
      to ask?
    field: interrogatory
    buttons:
      code: myoptions
    ---
    code: |
      myoptions = \
        [{"when": "When?",
          "image": "calendar"},
         {"where": "Where?",
          "image": "map"}]
"buttons-icons-code-upload":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the most important question
      to ask?
    field: interrogatory
    buttons:
      code: myoptions
    ---
    code: |
      myoptions = \
        [{"when": "When?",
          "image": uploaded_file},
         {"where": "Where?",
          "image": "map"}]
    ---
    question: |
      Please upload an image.
    fields:
      - Image: uploaded_file
        datatype: file
"buttons-labels":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    question: |
      How would you like to pay for your
      car?
    field: target_variable
    buttons:
      - Buy it: purchaser
      - Lease it: borrower
"buttons-show-if":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    field: target_variable
    question: Which flour shall we use?
    buttons:
      - value: almond
        label: Almond
      - value: oat
        label: Oat
      - value: wheat
        label: Wheat
        show if: gluten_tolerant
      - value: spelt
        label: Spelt
        show if: gluten_tolerant
"buttons-variation-1":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    field: user_gender
    question: What is your gender?
    buttons:
      - Male
      - Female
"buttons-variation-2":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    field: user_gender
    question: What is your gender?
    buttons:
      - Male: Male
      - Female: Female
"capitalize":
  "height": !!int |-
    129
  "width": !!int |-
    488
  "yaml": |-
    question: |
      ${ capitalize(color) } is your
      favorite color, but ${ color } is
      not your favorite color of eggs.
    sets: all_done
"catchall":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "features:\n  use catchall: True\n---\ngeneric object: DACatchAll\nquestion:\
    \ |\n  What is ${ x.object_name() }?\nfields:\n  - no label: x.value\nvalidation\
    \ code: |\n  define(x.instanceName, x.value)\n---\nif: |\n  x.context == 'float'\n\
    generic object: DACatchAll\nquestion: |\n  How much is ${ x.object_name() }?\n\
    fields:\n  - Amount: x.value\n    datatype: currency\nvalidation code: |\n  define(x.instanceName,\
    \ x.value)\n---\nmandatory: True\nquestion: Summary\nsubquestion: |\n  Your name\
    \ is ${ user_name }.\n  \n  You earn ${ currency(salary) } each year."
"catchall-guess":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    if: |
      x.data_type_guess() in ('float', 'int')
    generic object: DACatchAll
    question: |
      How much is ${ x.object_name() }?
    fields:
      - Amount: x.value
        datatype: currency
    validation code: |
      define(x.instanceName, x.value)
"centered":
  "height": !!int |-
    104
  "width": !!int |-
    488
  "yaml": |-
    features:
      centered: False
"chart":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    features:
      javascript: https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.js
    ---
    mandatory: True
    question: Your stuff
    subquestion: |
      <div class="chart-container" style="position: relative; height:450px; width:100%">
        <canvas id="myChart" width="600" height="400"></canvas>
      </div>
    script: |
      <script>
        var ctx = $("#myChart");
        var myDoughnutChart = new Chart(ctx, {
         type: 'doughnut',
         data: ${ json.dumps(data) }
        });
      </script>
    ---
    code: |
      data = {'datasets': [{'data': [how_many[y] for y in things],
                            'backgroundColor': [color[y] for y in range(len(things))]}],
              'labels': things}
    ---
    variable name: color
    data:
      - '#3366CC'
      - '#DC3912'
      - '#FF9900'
      - '#109618'
      - '#990099'
      - '#3B3EAC'
      - '#0099C6'
      - '#DD4477'
      - '#66AA00'
      - '#B82E2E'
      - '#316395'
      - '#994499'
      - '#22AA99'
      - '#AAAA11'
      - '#6633CC'
      - '#E67300'
      - '#8B0707'
      - '#329262'
      - '#5574A6'
      - '#3B3EAC'
"chat":
  "yaml": |-
    interview help: |
      This is the interview help.
"chat-example-1":
  "height": !!int |-
    308
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      set_live_help_status(availability='available', mode='help', partner_roles=['advocate', 'family law'])
    ---
    mandatory: True
    question: |
      What types of support are you seeking?
    fields:
      - no label: support_types
        datatype: checkboxes
        choices:
          - Child Support
          - Spousal Support
"chat-example-2":
  "yaml": |-
    mandatory: True
    code: |
      multi_user = True
      set_live_help_status(availability='available', mode='peerhelp', partner_roles=['advocate'])
"chat-partners-available":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Live chat status
    subquestion: |
      % if chat_partners_available('advocate').help > 0:
      An advocate is available to assist you.
      % else:
      No advocates are available to assist
      you at this time.
      % endif
"check-in":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      counter = 0
      drafts = set()
    ---
    question: |
      What is your favorite food?
    fields:
      - Favorite food: favorite_food
    check in: track_drafts
    ---
    event: track_drafts
    code: |
      counter += 1
      if action_argument('favorite_food'):
        drafts.add(action_argument('favorite_food'))
    ---
    mandatory: True
    question: |
      Your favorite food
    subquestion: |
      Your favorite food is ${ favorite_food }.

      You checked in ${ counter } times.

      Your draft choices were
      ${ comma_and_list(drafts) }.
"checkbox-dict-dict":
  "yaml": |-
    objects:
      - foods: DADict.using(object_type=DAList.using(object_type=Thing), keys=('fr.uit', 've.get$able'), there_is_another=False, complete_attribute='complete')
"checkbox-export-value":
  "yaml": |-
    question: |
      Here is your PDF form
    attachment:
      name: A filled-in form
      filename: filled-form
      pdf template file: sample-form-checkbox-export-value.pdf
      checkbox export value: "yes"
      fields:
        - Your Name: |
            ${ user }
        - Your Organization: |
            ${ user.organization }
        - Apple Checkbox: |
            ${ likes_apples }
        - Orange Checkbox: |
            ${ likes_oranges }
        - Pear Checkbox: |
            ${ likes_pears }
        - Toast Checkbox: |
            ${ likes_toast }
    mandatory: True
"choices":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What type of shoes do you wear?
    field: target_variable
    choices:
      - Sneakers
      - Sandals
      - Clogs
      - Other
"choices-combobox":
  "height": !!int |-
    180
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite color?
    field: favorite_color
    combobox:
      - Red: red
      - Green: green
      - Purple: purple
"choices-css-class-color":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What type of shoes do you wear?
    field: target_variable
    choices:
      - Sneakers: sneakers
        help: |
          Comfortable shoes.
        css class: sneakers
        color: secondary
      - Sandals: sandals
        help: |
          For summer.
        css class: sandals
        color: danger
      - Clogs: clogs
        help: |
          For hippies.
        css class: clogs
        color: warning
      - Other: other
        default: True
        help: |
          Because the other types suck.
        css class: othershoe
        color: success
"choices-dropdown":
  "height": !!int |-
    170
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What type of shoes do you wear?
    field: target_variable
    dropdown:
      - Sneakers
      - Sandals
      - Clogs
      - Other
"choices-from-code":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What type of shoes do you wear?
    field: target_variable
    choices:
      code: |
        [{'sneakers': "Sneakers",
          'help': "Comfortable shoes.",
          'css class': "sneakers",
          'color': "secondary"},
         {'sandals': "Sandals",
          'help': "For summer.",
          'css class': "sandals",
          'color': "danger"},
         {'clogs': "Clogs",
          'help': "For hippies.",
          'css class': "clogs",
          'color': "warning"},
         {'crocs': "Crocs",
          'help': "For teenagers",
          'show if': not is_adult,
          'css class': "crocs",
          'color': "warning"},
         {'other': "Other",
          'default': True,
          'help': "Because the other types suck.",
          'css class': "othershoe",
          'color': "success"}]
"choices-icons":
  "height": !!int |-
    445
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the most important question
      to ask?
    field: interrogatory
    choices:
      - "When?": when
        image: calendar
      - "Where?": where
        image: map
"choices-show-if":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Are you proper?
    yesno: is_proper
    ---
    question: |
      What type of shoes do you wear?
    field: target_variable
    choices:
      - Dress shoes: dress_shoes
        show if: is_proper
      - Boat shoes: boat_shoes
        show if: is_proper
      - Sneakers: sneakers
        show if: not is_proper
      - Sandals: sandals
        show if: not is_proper
      - Crocs: crocs
        show if: not is_proper
      - Other: other
"choices-with-default":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What type of shoes do you wear?
    field: target_variable
    default: Sandals
    choices:
      - Sneakers
      - Sandals
      - Clogs
      - Other
"choices-with-default-item":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What type of shoes do you wear?
    field: target_variable
    choices:
      - Sneakers: sneakers
      - Sandals: sandals
        default: True
      - Clogs: clogs
      - Other: other
"choices-with-help":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What type of shoes do you wear?
    field: target_variable
    choices:
      - Sneakers: sneakers
        help: |
          Comfortable shoes.
      - Sandals: sandals
        help: |
          For summer.
      - Clogs: clogs
        help: |
          For hippies.
      - Other: other
        default: True
        help: |
          Because the other types suck.
"classify":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    code: |
      entry = ml.one_unclassified_entry()
    ---
    mandatory: true
    code: |
      while True:
        if entry is None:
          del entry
          no_entries
        else:
          entry.classify()
          del entry
    ---
    question: |
      How do you classify this?
    subquestion: |
      ${ quote_paragraphs(entry.independent) }
    fields:
      - no label: entry.dependent
        datatype: radio
        choices:
          - Happy
          - Unhappy
          - Angry
          - Sad
"code":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    code: |
      fruits = peaches + pears
    ---
    question: |
      How many peaches do you have?
    fields:
      - no label: peaches
        datatype: integer
    ---
    question: |
      How many pears do you have?
    fields:
      - no label: pears
        datatype: integer
    ---
    question: |
      You have ${ fruits } pieces of fruit.
    mandatory: True
"code-example-01":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    code: |
      answer = 2 + 2
    ---
    question: |
      The answer is ${ answer }.
    mandatory: True
"code-example-02":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    code: |
      a = 2
      b = 3
      answer = a + b
"code-example-03":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    code: |
      a = 2
      b = 3
      answer = a + b
      b = 1
"code-example-04":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    question: |
      The answer is ${ 2 + 2 }.
    mandatory: True
"code-example-05":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    question: |
      The answer is ${ ( 42 + 4 ) * 50 / ( 5 - 2 ) }.
    mandatory: True
"code-example-06":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    question: |
      The answer is ${(42+4)*50/(5-2)}.
    mandatory: True
"code-example-07":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    code: |
      a = 4
      b = 5
      if b > a:
        b = 62
        answer = 20 + b
      else:
        answer = 40 + b
      b = 0
    ---
    question: |
      The answer is ${ answer }.
    mandatory: True
"code-example-08":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    code: |
      a = 4
      b = 5
      c = 2
      d = 6
      if b > a:
        b = 62
        if c < d:
          answer = 20 + b
        else:
          answer = 20 + c - d
        d = a + b
      else:
        answer = 40 + b
      b = 0
"combobox":
  "yaml": |-
    question: |
      What is your favorite color?
    field: favorite_color
    combobox:
      - Red: red
      - Green: green
      - Purple: purple
    ---
    mandatory: True
    question: All done
    subquestion: |
      Your favorite color is ${ favorite_color }.
"command":
  "yaml": |-
    mandatory: True
    code: |
      command('exit', url="https://google.com")
"comment":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: Do you like turnips?
    yesno: likes_turnips
    comment: |
      This question may be the most important
      question of the interview!
"comment-weather":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": "question: |\n  Do you agree the weather\n  is nice today? \nyesno: day_is_nice\n\
    comment: |\n  We might wish to consider\n  taking out this question.\n  It does\
    \ not seem necessary."
"continue":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    continue button field: target_variable
    question: |
      Welcome to the interview.
    subquestion: |
      When you are ready to begin, press
      Continue.
"continue-button-color":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    continue button label: Keep going
    continue button color: success
"continue-button-field":
  "height": !!int |-
    240
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Welcome to the interview!
    subquestion: |
      Your participation means a lot to us.
    fields:
      - Your phone number: phone_number
    continue button field: user_saw_intro
    ---
    question: Result of question
    subquestion: |
      `user_saw_intro` is
      `${ user_saw_intro }`
    mandatory: True
"continue-button-label":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    continue button label: Keep going
"continue-participation":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Welcome to the interview!
    subquestion: |
      Your participation means a lot to us.
    continue button field: user_saw_intro
"continue-serial":
  "yaml": |-
    mandatory: true
    question: |
      This is the first screen
    buttons:
      Continue: continue
"continue-special":
  "yaml": |-
    id: favorite_food stage 2
    question: |
      Ok, are any of these your favorite food?
    choices:
      - Strawberries:
          code: |
            favorite_food = 'strawberries'
      - Grapes:
          code: |
            favorite_food = 'grapes'
      - Kiwi:
          code: |
            favorite_food = 'kiwi'
      - Something else: continue
    ---
    id: favorite_food stage 1
    question: |
      What is your favorite food?
    choices:
      - Apples:
          code: |
            favorite_food = 'apples'
      - Oranges:
          code: |
            favorite_food = 'oranges'
      - Something else: continue
"copy-deep":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - orig_company: DAObject
    ---
    code: |
      other_company = orig_company.copy_deep('other_company')
"copy-shallow":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - orig_company: DAObject
    ---
    code: |
      other_company = orig_company.copy_shallow('other_company')
"country":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Where do you live?
    fields:
      - Country: user_country
        code: countries_list()
        default: US
    ---
    mandatory: True
    question: |
      You live in
      ${ country_name(user_country) },
      which is abbreviated
      ${ user_country }.
"country-state":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Where do you live?
    fields:
      - Country: country
        code: countries_list()
      - State: state
        code: |
          states_list(country_code=showifdef('country', 'US', prior=True)) \
          or \
          ['N/A']
        js enable if: val('country')
    check in: update_states_list
    ---
    event: update_states_list
    code: |
      if action_argument('_changed') == 'country':
        background_response(
          {
            'state':
              {
                'choices': \
                  states_list(country_code=action_argument('country')) \
                  or \
                  ['N/A']
              }
          }, 'fields')
      background_response()
"cron":
  "height": !!int |-
    267
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      allow_cron = True
      multi_user = True
      counter = 0
    ---
    event: cron_hourly
    code: |
      counter += 1
      if counter > 48:
        command('exit')
      background_response()
"css":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Do you want to build a snowman?
    yesno: wants_to_build_snowman
    css: |
      <style>
        body {
          background-image: url('${ url_of('docassemble.base:data/static/snowman.png') }');
          background-repeat: repeat;
        }
      </style>
"css-class":
  "height": !!int |-
    98
  "width": !!int |-
    488
  "yaml": |-
    css class: first-question
    mandatory: True
    question: |
      View the source and look for
      the word `first-question`.
"currency":
  "height": !!int |-
    96
  "width": !!int |-
    488
  "yaml": |-
    question: |
      If you sold ${ number } fish for
      a dollar each, you would get
      ${ currency(number) }.
    mandatory: True
"current-datetime":
  "height": !!int |-
    96
  "width": !!int |-
    488
  "yaml": |-
    question: |
      % if current_datetime() < as_datetime('October 14, 1066'):
      The Normans have not yet invaded
      England.
      % else:
      Unfortunately, the Normans have
      already invaded England.
      % endif
    mandatory: True
"dadatetime":
  "yaml": |-
    question: |
      Enter a date.
    subquestion: |
      The session ID of this interview is
      `${ current_context().session }`.
    fields:
      - Date: date_variable
        datatype: date
"dadict":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - player: DADict
    ---
    mandatory: True
    code: |
      player.initializeObject('trustee', DAObject)
      player.initializeObject('beneficiary', DAObject)
      player.initializeObject('grantor', DAObject)
      player.gathered = True
    ---
    mandatory: True
    question: The players
    subquestion: |
      % for type in player.keys():
      ${ player[type].firstname }
      ${ player[type].lastname } is here.

      % endfor
    ---
    generic object: DAObject
    question: |
      What is
      ${ x[i].object_possessive('name') }?
    fields:
      - First Name: x[i].firstname
      - Last Name: x[i].lastname
"dafile":
  "height": !!int |-
    384
  "width": !!int |-
    488
  "yaml": |-
    imports:
      - PIL
    ---
    objects:
      - myfile: DAFile
    ---
    sets: myfile.initialized
    code: |
      im = PIL.Image.new("RGB",
                         (512, 512),
                         "green")
      myfile.initialize(filename="foo.jpg")
      im.save(myfile.path(), format='JPEG')
      del im
    ---
    mandatory: True
    question: |
      Here is the picture.
    subquestion: |
      ${ myfile }
"dafile-url-for":
  "height": !!int |-
    126
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      This interview is all done.
    subquestion: |
      To start your case,
      [download your pleading],
      print it, and take it
      to clerk's office at the
      court.

      [download your pleading]: ${ complaint.pdf.url_for() }
    ---
    attachment:
      filename: complaint
      name: Complaint
      variable name: complaint
      content: |
        This is a complaint.

        Blah, blah, blah
"dafile-url-for-temporary":
  "height": !!int |-
    130
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      This interview is all done.
    subquestion: |
      To start your case,
      [download your pleading]
      in the next sixty seconds,
      print it, and take it
      to clerk's office at the
      court.

      [download your pleading]: ${ complaint.pdf.url_for(temporary=True, seconds=60) }
    ---
    attachment:
      filename: complaint
      name: Complaint
      variable name: complaint
      content: |
        This is a complaint.

        Blah, blah, blah
"dalink":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - the_link: DALink
    ---
    question: |
      Tell me about a hyperlink.
    fields:
      - URL: the_link.url
        hint: "https://google.com"
      - Anchor text: the_link.anchor_text
        hint: Google
    ---
    mandatory: True
    question: |
      Hyperlinks
    subquestion: |
      You can find all the information
      you need at ${ the_link }.
    attachment:
      name: Hyperlink demonstration
      filename: hyperlink_demo
      docx template file: dalink.docx
"dalist":
  "yaml": |-
    modules:
      - docassemble.base.legal
    ---
    objects:
      - people: PartyList
    ---
    question: |
      What is the person's name?
    fields:
      - First: people[i].name.first
      - Last: people[i].name.last
    ---
    question: |
      Do you have any people to add to the list?
    yesno: people.there_are_any
    ---
    question: |
      Do you have more people for me?
    subquestion: |
      So far you have told me about ${ people }.
    yesno: people.there_is_another
"dalist2":
  "yaml": |-
    objects:
      - thing: DAList
"daobject":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - park: DAObject
      - turnip: DAObject
    ---
    mandatory: True
    code: |
      park.front_gate = DAObject()
    ---
    mandatory: True
    question: |
      The ${ turnip.color } turnip sat
      before the
      ${ park.front_gate.color } gate.
    ---
    generic object: DAObject
    question: |
      What is the color of the ${ x }?
    fields:
      - Color: x.color
"dastore":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - userdata: DAStore
      - preferences: DAObject
    ---
    code: |
      if userdata.defined("prefs"):
        preferences = userdata.get("prefs")
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: preferences.favorite_fruit
    ---
    mandatory: True
    code: |
      preferences.favorite_fruit
      if not userdata.defined("prefs"):
        userdata.set("prefs", preferences)
    ---
    mandatory: True
    code: |
      final_screen
    ---
    event: final_screen
    question: All done
    subquestion: |
      Your favorite fruit is
      ${ userdata.get("prefs").favorite_fruit }.
"dastore2":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - userdata: DAStore
      - preferences: DADict.using(gathered=True)
    ---
    mandatory: True
    code: |
      preferences['favorite_fruit']
      preferences.saved
      final_screen
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: preferences['favorite_fruit']
    ---
    code: |
      if userdata.defined("prefsdict"):
        working_copy = userdata.get("prefsdict")
        working_copy.update(preferences)
      else:
        working_copy = preferences
      userdata.set("prefsdict", working_copy)
      preferences.saved = True
    ---
    event: final_screen
    question: All done
    subquestion: |
      Your favorite fruit is
      ${ userdata.get("prefsdict")['favorite_fruit'] }.
"data":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    variable name: fruits
    data:
      Apple:
        description: |
          The apple is a tasty red fruit.

          Everyone on ${ planet } loves
          to eat apples.
        seeds: 5
      Orange:
        description: |
          The orange is, surprisingly,
          orange-colored.  Most people
          on ${ planet } dislike
          eating oranges.
        seeds: 10
      Peach:
        description: |
          The peach is a fragile fruit.

          There are 165,323 peach
          orchards on ${ planet }.
        seeds: 1
      Pear:
        description: |
          The pear is variously yellow,
          green, or brown.

          The planet ${ planet } is
          shaped like a pear.
        seeds: 0
    ---
    question: |
      On what planet were you born?
    fields:
      Planet: planet
    ---
    question: |
      What is your favorite fruit?
    field: user_favorite_fruit
    choices:
      code: fruits.keys()
    ---
    mandatory: True
    question: |
      Summary of ${ user_favorite_fruit }
    subquestion: |
      ${ fruits[user_favorite_fruit]['description'] }

      The ${ user_favorite_fruit } has
      ${ nice_number(fruits[user_favorite_fruit]['seeds']) }
      seeds.
"data-code":
  "height": !!int |-
    173
  "width": !!int |-
    488
  "yaml": |-
    variable name: fruits
    data from code:
      Apple:
        description: |
          ', '.join(['red', 'shiny', 'for teachers'])
        seeds: 10/2
      Orange:
        description: |
          capitalize('round') + " and orange"
        seeds: seeds_in_orange
      Peach:
        description: peach_description
        seeds: 10**6
      Pear:
        description: |
          "Like an apple, but not like an apple."
        seeds: 0
    ---
    question: |
      How many seeds in an orange?
    fields:
      - no label: seeds_in_orange
        datatype: range
        min: 0
        max: 100
    ---
    question: |
      How would you describe a peach?
    fields:
      - no label: peach_description
    ---
    question: |
      What is your favorite fruit?
    field: user_favorite_fruit
    choices:
      code: fruits.keys()
    ---
    mandatory: True
    question: |
      Summary of ${ user_favorite_fruit }
    subquestion: |
      ${ fruits[user_favorite_fruit]['description'] }

      The ${ user_favorite_fruit } has
      ${ nice_number(fruits[user_favorite_fruit]['seeds']) }
      seeds.
"data-code-objects":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    variable name: the_object
    use objects: objects
    data from code:
      object: Thing
      module: docassemble.base.util
      item:
        name:
          object: Name
          module: docassemble.base.util
          item:
            text: |
              the_name
        size: |
          4 * unit_size
    ---
    mandatory: True
    question: |
      The object is ${ the_object } and its size is
      ${ the_object.size }.
"data-simple":
  "height": !!int |-
    170
  "width": !!int |-
    488
  "yaml": |-
    variable name: fruits
    data:
      - Apple
      - Orange
      - Peach
      - Pear
    ---
    question: |
      What is your favorite fruit?
    field: user_favorite_fruit
    dropdown:
      code: fruits
"database_storage":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "mandatory: True\ncode: |\n  write_record('fruit', favorite_fruit)\n---\n\
    reconsider: True\ncode: |\n  fruit_summary = ''\n  records = read_records('fruit')\n\
    \  for id in records:\n    fruit_summary += \"* \" + str(records[id]) + \"\\n\"\
    \n---\nmandatory: True\nquestion: |\n  Contents of database\nsubquestion: |\n\
    \  The following fruits have\n  been reported:\n  \n  ${ fruit_summary }"
"date-and-time-fields":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      When is your appointment?
    fields:
      - Date: appt_date
        datatype: date
      - Time: appt_time
        datatype: time
    ---
    code: |
      appt_datetime = appt_date.replace_time(appt_time)
"date-default":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: What is your date of birth?
    fields:
      - Your birthday: birthdate
        datatype: date
        default: |
          ${ today().minus(years=100) }
"date-demo":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      When did you file the complaint?
    fields:
      - Date: date_of_filing
        datatype: date
    ---
    code: |
      response_deadline = date_of_filing.plus(days=20)
      christmas = response_deadline.replace(month=12, day=25)
    ---
    mandatory: True
    question: |
      % if christmas > response_deadline:
      Your response is due
      ${ int(date_difference(starting=date_of_filing, ending=christmas).weeks) }
      weeks before Christmas.
      % else:
      Your response is due soon after Christmas!
      % endif
"date-difference":
  "height": !!int |-
    263
  "width": !!int |-
    488
  "yaml": |-
    code: |
      birthday = as_datetime('5/17/2016')
      christmas = as_datetime('12/25/2016')
      interval = date_difference(starting=birthday, ending=christmas)
    ---
    question: |
      The length of time between my
      birthday and Christmas can be
      described several ways.
    subquestion: |
      * ${ interval.weeks } weeks
      * ${ interval.days } days
      * ${ interval.hours } hours
      * ${ interval.minutes } minutes
      * ${ interval.seconds } seconds
    mandatory: True
"date-field":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your date of birth?
    fields:
      - Birthdate: target_variable
        datatype: date
"date-interval":
  "height": !!int |-
    96
  "width": !!int |-
    488
  "yaml": |-
    question: |
      In three days, it will be
      ${ format_date( current_datetime() + date_interval(days=3) ) }.
    mandatory: True
"date-limit":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: What is your date of birth?
    fields:
      - Your birthday: birthdate
        datatype: date
        max: ${ today() }
"date-parts":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      The date ${ some_date }, explained.
    subquestion: |
      The year is ${ year_of(some_date) }.

      The month is ${ month_of(some_date) }.

      The month as a word is
      ${ month_of(some_date, as_word=True) }.

      The day of month is
      ${ day_of(some_date) }.

      The day of week is
      ${ dow_of(some_date) }.

      The day of week as a word is
      ${ dow_of(some_date, as_word=True) }.
"datetime-field":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      When is your appointment?
    fields:
      - Date and time: target_variable
        datatype: datetime
"daweb":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - web: DAWeb.using(base_url='https://api.spacexdata.com/latest')
    ---
    code: |
      launch_info = web.get('launches/latest')
    ---
    code: |
      rocket_info = web.get('rockets/' + launch_info['rocket'])
    ---
    code: |
      ship_info = web.get('ships',
                          data={'ship_type': 'Tug'})
"dead-end":
  "height": !!int |-
    138
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      # insert interview logic here
      all_done
    ---
    question: |
      You have reached the end of the
      interview.
    subquestion: |
      I hope you had a good time!
    sets: all_done
"debug-mode":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    features:
      debug: False
"declarative":
  "yaml": |-
    objects:
      injury_location: Address
      defendant_address: Address
      plaintiff_address: Address
      court: Court
"declarative-classes":
  "yaml": ""
"decoration":
  "height": !!int |-
    331
  "width": !!int |-
    488
  "yaml": |-
    decoration: kids
    question:
      Do you have children?
    yesno: has_children
"def":
  "height": !!int |-
    226
  "width": !!int |-
    488
  "yaml": "def: my_explanation\nmako: |\n  <%def name=\"explain(fruit)\">\n  ${ fruit\
    \ } are a type of fruit, and\n  they are delicious.\n  </%def>\n  <%def name=\"\
    deride(fruit)\">\n  ${ fruit } are disgusting, and they\n  are basically inedible.\n\
    \  </%def>\n---\nquestion: The world of fruit\nsubquestion: |\n  There are many\
    \ types of fruit in the\n  world.\n  \n  ${ explain(\"Peaches\") }\n  ${ explain(\"\
    Oranges\") }\n  ${ deride(\"Strawberries\") }\nusedefs:\n - my_explanation\nmandatory:\
    \ True"
"default-date-min":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    features:
      default date min: "1950-01-01"
      default date max: "2029-12-31"
    ---
    question: |
      What is the date?
    fields:
      - Date: the_date
        datatype: date
"default-screen-parts":
  "height": !!int |-
    199
  "width": !!int |-
    488
  "yaml": |-
    default screen parts:
      under: |
        You have seen
        ${ quantity_noun(counter, 'screen') }
        of this interview so far.
      help label: |
        About
      help button color: warning
      back button label: |
        Back
      back button color: secondary
      continue button label: |
        Go to next step
      continue button color: success
      subtitle: |
        A _groovy_ interview
      pre: |
        The text below **does not**
        constitute legal advice.
      submit: |
        Please re-read the question
        before moving forward.
      post: |
        This interview was generously
        sponsored by Example, Inc.
      css class: normalquestion
"default-screen-parts-override":
  "yaml": |-
    interview help: |
      This interview demonstrates the
      `default screen parts` feature.
"default-validation-messages":
  "height": !!int |-
    254
  "width": !!int |-
    488
  "yaml": |-
    default validation messages:
      required: |
        I would really like to know this.
        Please tell me!
      max: |
        No more than %s, please!
"define":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    code: |
      define('favorite_fruit', 'apple')
    ---
    question: Summary
    subquestion: |
      Your favorite fruit is
      ${ favorite_fruit }.
    mandatory: True
"defined":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: Summary
    subquestion: |
      Your favorite fruit is
      ${ favorite_fruit }.

      % if defined('favorite_vegetable'):
      Your favorite vegetable
      is ${ favorite_vegetable }.
      % else:
      I do not know your favorite
      vegetable.
      % endif
    mandatory: True
"del":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      if user_is_communist and user_reconsidering_communism:
        user_reconsidering_communism = False
        del user_is_communist
"depends-on":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is A?
    fields:
      - A: a
        datatype: number
    ---
    question: |
      What is the square of ${ a }?
    fields:
      - B: b
        datatype: number
    depends on:
      - a
    ---
    code: |
      c = a + b
    depends on:
      - a
      - b
    ---
    event: review_screen
    skip undefined: False
    question: |
      Review your answers.
    review:
      - label: Edit A
        field: a
        button: |
          A is ${ a }.
      - label: Edit B
        field: b
        button: |
          B is ${ b }.
      - note: |
          C is ${ c }.
    ---
    mandatory: True
    code: |
      need(a, b, c)
      review_screen
"depends-on-code":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is A?
    fields:
      - A: a
        datatype: number
    ---
    code: |
      b = a * a
    depends on:
      - a
    ---
    code: |
      c = a + b
    depends on:
      - a
      - b
    ---
    event: review_screen
    skip undefined: False
    question: |
      Review your answers.
    review:
      - label: Edit A
        field: a
        button: |
          A is ${ a }.
      - note: |
          B is ${ b }.
      - note: |
          C is ${ c }.
    ---
    mandatory: True
    code: |
      need(a, b, c)
      review_screen
"depends-on-iterator":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - people: DAList.using(object_type=Individual, there_are_any=True, complete_attribute='complete')
    ---
    question: |
      How much does ${ people[i] }
      get paid per pay period?
    fields:
      - Amount: people[i].income
        datatype: currency
    depends on:
      - people[i].pay_period
    ---
    question: |
      How frequently does
      ${ people[i] } get paid?
    fields:
      - no label: people[i].pay_period
        datatype: number
        choices:
          - Monthly: 12.0
          - Biweekly: 26.0
          - Semi-monthly: 24.0
          - Weekly: 52.0
    ---
    code: |
      people[i].annual_income = people[i].income * people[i].pay_period
    depends on:
      - people[i].pay_period
      - people[i].income
    ---
    question: |
      What is the name of the
      ${ ordinal(i) } person?
    fields:
      - First name: people[i].name.first
      - Last name: people[i].name.last
    ---
    code: |
      people[i].name.first
      people[i].annual_income
      people[i].complete = True
    ---
    question: |
      Is there another person?
    yesno: people.there_is_another
    ---
    field: review_screen
    question: Review
    subquestion: |
      ${ people.table }

      ${ people.add_action() }
    ---
    table: people.table
    rows: people
    columns:
      - Name: row_item.name
      - Annual income: currency(row_item.annual_income)
    edit:
      - name.first
      - pay_period
    ---
    event: final_screen
    question: Summary
    subquestion: |
      % for person in people:
      ${ person }
      makes
      ${ currency(person.income) }
      ${ nice_number(person.pay_period) }
      times per year, for an annual income of
      ${ currency(person.annual_income) }.

      % endfor

      [Review](${ url_action('review_screen') })
    ---
    mandatory: True
    code: |
      people.gather()
      people.table
      final_screen
"describe-file-types":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: Here is your document.
    attachments:
      - name: Praecipe to discontinue
        docx template file: praecipe_discontinue.docx
    describe file types: True
    mandatory: True
"device":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    question: |
      % if device().is_mobile:
      You are on a phone.
      % elif device().is_tablet:
      You are on a tablet.
      % elif device().is_pc:
      You are on a PC.
      % elif device().is_bot:
      You are a bot.
      % else:
      Your device is: ${ device() }.
      % endif
    subquestion: |
      % if device().is_touch_capable:
      You are using a touchscreen device.
      % else:
      You are not using a touchscreen device.
      % endif
    mandatory: True
"device-ip":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Your IP address is
      ${ device(ip=True) }.
    mandatory: True
"device-local":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      multi_user = True
    ---
    mandatory: True
    code: |
      device_local.how_doing
      final_screen
    ---
    question: |
      How are you doing today?
    field: device_local.how_doing
    choices:
      - Well: well
      - Poorly: poor
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Favorite fruit: favorite_fruit
    ---
    event: final_screen
    question: |
      Your favorite fruit is ${ favorite_fruit }
    subquestion: |
      % if device_local.how_doing == 'well':
      I am glad you are doing well.
      % else:
      I am sorry you are poorly today.
      % endif

      Try re-joining this interview by
      using a different web browser, an
      incognito tab, or by closing your
      browser application and opening it
      again, and visiting this URL:

      [${ interview_url() }](${ interview_url() })
"dialog-box":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      if task_not_yet_performed('show current date'):
        mark_task_as_performed('show current date')
        force_ask('show_date')
    ---
    event: show_date
    question: |
      The current date is ${ format_date(current_datetime()) }.
    buttons:
      - Ok: continue
"disable-continue-button":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      % if user_number == number_to_enter:
      You have passed the short-term memory test.
      % else:
      You are wrong.
      % endif
    subquestion: |
      % if user_number != number_to_enter:
      ${ action_button_html(url_action('user_number'), label="Try again") }
      % endif
    disable continue button: |
      user_number != number_to_enter
    continue button field: threshold_screen
"disable-others":
  "height": !!int |-
    310
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite color?
    fields:
      - Favorite color: favorite_color
        choices:
          - Red
          - Blue
          - Green
          - Purple
        disable others: True
      - note: |
          If your favorite color is
          not listed, enter your
          favorite color here.
      - Other: favorite_color
    ---
    question: |
      Your favorite color is
      ${ favorite_color }.
    mandatory: True
"disable-others-list":
  "height": !!int |-
    514
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite color?
    fields:
      - Favorite color: favorite_color
        choices:
          - Red
          - Blue
          - Green
          - Purple
        disable others:
          - favorite_color
          - second_favorite_color
      - note: |
          If your favorite color is
          not listed, enter your
          favorite color here.
      - Other: favorite_color
      - Second favorite color: second_favorite_color
      - Explain your reasoning: reason
        input type: area
    ---
    question: |
      Your favorite color is
      ${ favorite_color }.
    subquestion: |
      Your reasoning is:

      ${ reason }
    mandatory: True
"disabled-field":
  "height": !!int |-
    302
  "width": !!int |-
    488
  "yaml": "question: |\n  What are your favorite things to eat?\nsubquestion: |\n\
    \  (It goes without saying that you love turnips.)  \nfields:\n  - Fruit: favorite_fruit\n\
    \  - Vegetable: favorite_vegetable\n    disabled: True\n    default: turnips"
"disabled-field-dummy":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
    ---
    question: |
      What are your favorite things to eat?
    fields:
      - Fruit: favorite_fruit
      - Vegetable: favorite_vegetable_placeholder
        disabled: True
        default: |
          ${ favorite_vegetable }
"dispatch":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      dispatch('main_menu_selection')
      final_screen
    ---
    question: |
      Main menu
    field: main_menu_selection
    buttons:
      - Fruit: fruit_menu
      - Vegetables: vegetable_menu
      - Rocks: rocks_page
      - Continue: Null
    ---
    code: |
      fruit_menu = dispatch('fruit_menu_selection')
    ---
    question: |
      Fruit menu
    field: fruit_menu_selection
    choices:
      - Apple: apple
      - Peach: peach
      - Back: Null
    ---
    code: |
      vegetable_menu = dispatch('vegetable_menu_selection')
    ---
    question: |
      Vegetable menu
    field: vegetable_menu_selection
    choices:
      - Turnip: turnip
      - Potato: potato
      - Back: Null
    ---
    question: Rocks screen
    field: rocks_page
    ---
    question: Apples screen
    subquestion: |
      % if likes_apples:
      You like apples.
      % endif
    field: apple
    ---
    question: |
      Do you like apples?
    yesno: likes_apples
    ---
    question: Peaches screen
    subquestion: |
      You selected
      ${ main_menu_selection }
      on the main menu and
      ${ fruit_menu_selection }
      on the fruit menu.
    field: peach
    ---
    event: turnip
    question: Turnip screen
    subquestion: |
      You cannot go forward from
      the turnip screen.
    ---
    question: Potato screen
    field: potato
    ---
    event: final_screen
    question: |
      Done with the interview.
"dispatch-count":
  "yaml": |-
    mandatory: True
    code: |
      visited_apple = 0
      visited_orange = 0
    ---
    mandatory: True
    code: |
      dispatch('main_menu_selection')
      final_screen
    ---
    question: |
      Main menu
    field: main_menu_selection
    buttons:
      - Apple: apple
      - Orange: orange
      - Continue: Null
    ---
    question: Apple screen
    field: apple
    need: apple_tracked
    ---
    reconsider: True
    code: |
      visited_apple += 1
      apple_tracked = True
    ---
    question: Orange screen
    field: orange
    need: orange_tracked
    ---
    reconsider: True
    code: |
      visited_orange += 1
      orange_tracked = True
    ---
    event: final_screen
    question: |
      All done.
    subquestion: |
      % if visited_apple > 0:
      You visited the apple screen
      ${ nice_number(visited_apple) }
      times.
      % endif

      % if visited_orange > 0:
      You visited the orange screen
      ${ nice_number(visited_orange) }
      times.
      % endif
"dispatch-track":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      visited_apple = False
      visited_orange = False
    ---
    mandatory: True
    code: |
      dispatch('main_menu_selection')
      final_screen
    ---
    question: |
      Main menu
    field: main_menu_selection
    buttons:
      - Apple: apple
      - Orange: orange
      - Continue: Null
    ---
    question: Apple screen
    field: apple
    need: apple_tracked
    ---
    code: |
      visited_apple = True
      apple_tracked = True
    ---
    question: Orange screen
    field: orange
    need: orange_tracked
    ---
    code: |
      visited_orange = True
      orange_tracked = True
    ---
    event: final_screen
    question: |
      All done.
    subquestion: |
      % if visited_apple:
      You visited the apple menu.
      % endif

      % if visited_orange:
      You visited the orange menu.
      % endif
"document":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: Here is your document.
    attachments:
      - name: Summary of Benefits
        filename: benefits_summary
        content: |
          [BOLDCENTER] Summary of Benefits

          ${ client } is entitled to
          benefits plan ${ benefits }.
    mandatory: True
"document-cache":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "question: |\n  What is your name?\nfields:\n  First Name: firstname\n---\n\
    mandatory: True\nfield: first_round\nquestion: |\n  Here are your documents, ${\
    \ firstname }.\nsubquestion: |\n  Look at the Preview tab of each\n  document\
    \ and note the time.\n  This is the time the document\n  was generated.\nallow\
    \ emailing: False\nattachments:\n  - name: Apples\n    filename: apples\n    variable\
    \ name: apples\n    content: |\n      ${ firstname },\n\n      Apples are tasty\
    \ as of\n      ${ format_time(current_datetime(), format='long') }.\n  - name:\
    \ Oranges\n    filename: oranges\n    variable name: oranges\n    content: |\n\
    \      ${ firstname },\n\n      Oranges are tasty as of\n      ${ format_time(current_datetime(),\
    \ format='long') }.\n---\nattachment:\n  name: Grapes\n  filename: grapes\n  variable\
    \ name: grapes\n  content: |\n      ${ firstname },\n\n      Grapes are tasty\
    \ as of\n      ${ format_time(current_datetime(), format='long') }.\n---\nmandatory:\
    \ True\nfield: second_round\nquestion: |\n  Here is another set of documents,\n\
    \  ${ firstname }.\nsubquestion: |\n  You saw the Apples document on the\n  previous\
    \ screen.  The Grapes\n  document is new.  The Apples\n  document has not changed.\n\
    \  \n  When you press Continue, I will ask\n  you again for your name.  Put in\
    \ a\n  different name this time.\nallow emailing: False\nattachment code: |\n\
    \  [apples, grapes]\n---\nmandatory: True\ncode: |\n  del firstname\n---\nmandatory:\
    \ True\ncode: |\n  firstname\n---\nmandatory: True\nquestion: |\n  Here is your\
    \ final set of documents,\n  ${ firstname }.\nsubquestion: |\n  Note that even\
    \ though your name\n  changed, the documents did not.\nallow emailing: False\n\
    attachment code: |\n  [apples, oranges, grapes]"
"document-cache-invalidate":
  "height": !!int |-
    684
  "width": !!int |-
    488
  "yaml": "mandatory: True\ncode: |\n  client = \"Jane Doe\"\n  benefits = \"G-432\"\
    \n---\nmandatory: True\ncode: |\n  document_initially_shown\n  first_draft_deleted\n\
    \  client = \"John Doe\"\n  benefits = \"H-545\"\n  document_shown_again\n---\n\
    attachment:\n  name: Summary of Benefits\n  filename: benefits_summary\n  variable\
    \ name: benefits_summary\n  content: |\n    [BOLDCENTER] Summary of Benefits\n\
    \    \n    ${ client } is entitled to\n    benefits plan ${ benefits }.\n---\n\
    question: |\n  Here is your document.\nattachment code: benefits_summary\nfield:\
    \ document_initially_shown\n---\ncode: |\n  del benefits_summary\n  first_draft_deleted\
    \ = True\n---\nquestion: Here is your document again.\nattachment code: benefits_summary\n\
    event: document_shown_again"
"document-docx":
  "height": !!int |-
    641
  "width": !!int |-
    488
  "yaml": |-
    question: Here is your document.
    attachments:
      - name: Summary of Benefits
        filename: benefits_summary
        valid formats:
          - docx
          - pdf
        content: |
          [BOLDCENTER] Summary of Benefits

          ${ client } is entitled to
          benefits plan ${ benefits }.
    mandatory: True
"document-docx-from-rtf":
  "height": !!int |-
    641
  "width": !!int |-
    488
  "yaml": "question: Here is your document.\nattachments:\n  - name: Summary of Benefits\n\
    \    filename: benefits_summary\n    valid formats:\n      - rtf to docx\n   \
    \   - pdf    \n    content: |\n      [BOLDCENTER] Summary of Benefits\n\n    \
    \  ${ client } is entitled to\n      benefits plan ${ benefits }.\nmandatory:\
    \ True"
"document-docx-from-rtf-standalone":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Here is your document.
    attachment code: the_document
"document-email-custom":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Your document is ready.
    email template: hello_email
    email address default: |
      ${ user_email }
    attachment:
      - name: A hello world document
        filename: Hello_World
        description: |
          A document with a classic message
        content: |
          Hello, world!
        valid formats:
          - pdf
          - docx
    always include editable files: True
    ---
    template: hello_email
    subject: |
      Your hello world document
    content: |
      Dear sir or madam,

      Your hello world document is attached hereto for your perusal.
    ---
    code: |
      user_email = 'user@aol.com'
"document-file":
  "height": !!int |-
    641
  "width": !!int |-
    488
  "yaml": |-
    question: Your document is ready.
    attachment:
      - name: A *hello world* document
        filename: Hello_World_Document
        content file: hello.md
    mandatory: True
"document-file-code":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    code: |
      template_file_to_use = 'hello.md'
    ---
    question: Your document is ready.
    attachment:
      - name: A *hello world* document
        filename: Hello_World_Document
        content file:
          code: template_file_to_use
    mandatory: True
"document-language":
  "height": !!int |-
    689
  "width": !!int |-
    488
  "yaml": "initial: True\ncode: |\n  set_language('es')\n---\nmandatory: True\nlanguage:\
    \ es\nquestion: El documento est\xE1 listo.\nattachment:\n  - name: Alimentos\n\
    \    language: en\n    filename: food_order\n    content: |\n      This customer\
    \ would like to order\n      ${ comma_and_list('fries', 'a Coke') }."
"document-language-docx":
  "yaml": "initial: True\ncode: |\n  set_language('es')\n---\ncode: |\n  food_list\
    \ = DAList(elements=['fries', 'a Coke'])\n---\nmandatory: True\nlanguage: es\n\
    question: El documento est\xE1 listo.\nattachment:\n  - name: Alimentos\n    language:\
    \ en\n    filename: food_order\n    docx template file: document-language.docx\n\
    \    field variables:\n      - food_list"
"document-links":
  "height": !!int |-
    596
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      This interview is all done.
    subquestion: |
      To start your case,
      [download your pleading],
      print it, and take it
      to clerk's office at the
      court.

      ${ complaint }

      If you want to make changes
      to it first, you can download
      the [RTF version].

      [download your pleading]: ${ complaint.url_for() }
      [RTF version]: ${ complaint.rtf.url_for() }
    ---
    attachment:
      filename: complaint
      name: Complaint
      variable name: complaint
      content: |
        This is a complaint.

        Blah, blah, blah
        [PAGEBREAK]
        This is the certificate of service.
"document-links-limited":
  "height": !!int |-
    526
  "width": !!int |-
    488
  "yaml": "mandatory: True\nquestion: |\n  This interview is all done.\nsubquestion:\
    \ |\n  Here is your document!\n  \n  ${ complaint }\n---\nattachment:\n  filename:\
    \ complaint\n  name: Complaint\n  variable name: complaint\n  content: |\n   \
    \ This is a complaint.\n\n    Blah, blah, blah\n    [PAGEBREAK]\n    This is the\
    \ certificate of service.\n  valid formats:\n    - pdf"
"document-manual":
  "height": !!int |-
    495
  "width": !!int |-
    488
  "yaml": |-
    question: Your document is ready.
    attachment:
      - name: A merged document
        filename: report
        manual:
          pdf: pdf_concatenate(document_one, document_two)
    mandatory: True
    ---
    attachment:
      variable name: document_one
      content: |
        Hello, world!
    ---
    attachment:
      variable name: document_two
      content: |
        Goodbye, world!
"document-manual-code":
  "height": !!int |-
    495
  "width": !!int |-
    488
  "yaml": |-
    question: Your document is ready.
    attachment:
      - name: A merged document
        filename: report
        manual code: |
          {'pdf': pdf_concatenate(document_one, document_two)}
    mandatory: True
    ---
    attachment:
      variable name: document_one
      content: |
        Hello, world!
    ---
    attachment:
      variable name: document_two
      content: |
        Goodbye, world!
"document-manual-jpg":
  "height": !!int |-
    471
  "width": !!int |-
    488
  "yaml": |-
    imports:
      - PIL
    ---
    objects:
      - my_image: DAFile
    ---
    sets: my_image.initialized
    code: |
      im = PIL.Image.new("RGB",
                         (512, 512),
                         "green")
      my_image.initialize(filename="green.jpg")
      im.save(my_image.path(), format='JPEG')
      del im
    ---
    question: Your document is ready.
    attachment:
      - name: A green square
        filename: greensquare
        manual:
          jpg: my_image
    mandatory: True
"document-markup":
  "height": !!int |-
    639
  "width": !!int |-
    488
  "yaml": "mandatory: True\nquestion: Here is your document.\nattachment:\n  name:\
    \ A demonstration\n  filename: demo_document\n  description: |\n    This document\
    \ demonstrates the\n    markup codes you can insert into\n    document text.\n\
    \  valid formats:\n    - pdf\n    - tex\n  metadata:\n    FirstFooterLeft: |\n\
    \      First of [TOTALPAGES] pages\n    HeaderLeft: |\n      Page [PAGENUM] of\
    \ [TOTALPAGES]\n  content: |\n    [BOLDCENTER] Lorem Ipsum Dolor Sit\n    Amet\n\
    \n    [BEGIN_CAPTION]\n    Consectetur adipiscing elit.\n    \n    Integer nec\
    \ ${ client_name } odio.\n\n    Praesent libero.\n\n    [VERTICAL_LINE]\n\n  \
    \  Sed cursus ante dapibus diam.\n\n    Sed nisi.\n    [END_CAPTION]\n\n    [CENTER]\
    \ Nulla quis sem at\n    nibh elementum imperdiet.\n\n    Duis sagittis ipsum.\
    \ Praesent\n    mauris. Fusce nec tellus sed\n    augue semper porta. Mauris massa.\n\
    \    Proin ut ligula vel nunc egestas\n    porttitor.\n    \n    Vestibulum lacinia\
    \ arcu eget nulla. \n    Class aptent taciti sociosqu ad\n    litora torquent\
    \ per conubia nostra,\n    per inceptos himenaeos.\n    \n    Curabitur sodales\n\
    \    ligula in libero. Praesent\n    mauris. Fusce nec tellus sed\n    augue semper\
    \ porta. Mauris massa.\n    Proin ut ligula vel nunc egestas\n    porttitor.\n\
    \n    [FLUSHLEFT] Sed dignissim. [NEWLINE]\n    Lacinia nunc. [NEWLINE]\n    Curabitur\
    \ tortor. [NEWLINE]\n    These lines are [NEWLINE]\n    flushed left.\n\n    Pellentesque\
    \ nibh.\n\n    [NOINDENT] Primis tacimates eos\n    in. Vel affert vituperata\
    \ te, eos\n    te melius legimus temporibus. At\n    quaeque aliquando contentiones\n\
    \    his. First-line indentation is\n    suppressed in this paragraph.\n    \n\
    \    [FILE stareps.eps]\n    \n    Unless a width is specified, images\n    will\
    \ be displayed four inches wide.\n    Maecenas mattis. Sed convallis\n    tristique\
    \ sem.\n\n    [FLUSHRIGHT] Proin ut ligula\n    vel nunc egestas porttitor.\n\
    \    [NEWLINE]\n    Quisque volutpat condimentum\n    velit. [NEWLINE]\n    We\
    \ are flushed right.\n    \n    Morbi lectus risus, iaculis vel,\n    suscipit\
    \ quis, luctus non, massa.\n    Time for a page break.\n\n    [PAGEBREAK]\n\n\
    \    Nulla facilisi. Ut fringilla.\n    Suspendisse potenti.\n    \n    [INDENTBY\
    \ 3in] Curabitur tortor.\n    Pellentesque nibh. Aenean quam.\n    In scelerisque\
    \ sem at dolor.\n    Maecenas mattis. Sed convallis\n    tristique sem. Proin\
    \ ut ligula\n    vel nunc egestas porttitor. I\n    am indented by three inches.\n\
    \n    [INDENTBY 1in 1in] Morbi lectus\n    risus, iaculis vel, suscipit quis,\n\
    \    luctus non, massa.  Fusce ac\n    turpis quis ligula lacinia\n    aliquet.\
    \ Sed convallis tristique\n    sem. I am indented by one inch\n    on each side.\n\
    \n    Now, let's put text in two columns\n    side by side.\n    \n    [BEGIN_TWOCOL]\n\
    \n    This is the first column.\n    \n    Nulla facilisi.\n\n    Let's insert\
    \ some vertical space.\n\n    [SKIPLINE]\n    Cras metus.\n\n    [BREAK]\n\n \
    \   This is the second column.\n    \n    Cras metus. Let's have some\n    vertical\
    \ space again.\n\n    [SKIPLINE]\n\n    Integer id quam.\n\n    Morbi mi.\n\n\
    \    [END_TWOCOL]\n\n    \n    Quisque nisl felis, venenatis\n    tristique, dignissim\
    \ in,\n    ultrices sit amet, augue.\n\n    [FLUSHLEFT] [FILE bluediamond.png,\
    \ 0.5in]\n\n    Maecenas mattis. Sed convallis\n    tristique sem.\n    \n   \
    \ [BORDER] Vestibulum ante ipsum\n    primis in faucibus orci luctus et\n    ultrices\
    \ posuere cubilia\n    Curae; [FILE bluediamond.png, 10pt]\n    Morbi lacinia\
    \ molestie dui. \n\n    Here we see various types of dashes.\n    Praesent[HYPHEN]mauris.\
    \  Nulla \n    quis [ENDASH] sem at nibh\n    elementum imperdiet.  Duis\n   \
    \ sagittis[EMDASH]ipsum.\n\n    [BORDER] Class aptent\n    taciti sociosqu ad\
    \ litora torquent\n    per conubia nostra, per inceptos \n    himenaeos.\n   \
    \ [NEWPAR]\n    Curabitur sodales ligula in libero.\n    Sed dignissim lacinia\
    \ nunc.\n    [NEWPAR]\n    You can include paragraph breaks \n    inside of a\
    \ border.\n\n    Aenean quam. In scelerisque sem at \n    dolor. Maecenas mattis.\
    \ Sed \n    convallis tristique sem.  Let us \n    now stop indenting the first\
    \ line \n    of each paragraph.\n\n    [STOP_INDENTATION]\n\n    Duis sagittis\
    \ ipsum. Praesent\n    mauris. Fusce nec tellus sed\n    augue semper porta. Mauris\
    \ massa.\n    Proin ut ligula vel nunc egestas\n    porttitor.\n\n    Praesent\
    \ mauris. Fusce nec tellus sed\n    augue semper porta. \n\n    [TAB] Even though\
    \ we are no longer\n    indenting the first line of each \n    paragraph automatically,\
    \ we can \n    still indent manually.\n    \n    Vestibulum lacinia arcu eget\
    \ nulla. \n    Class aptent taciti sociosqu ad\n    litora torquent per conubia\
    \ nostra,\n    per inceptos himenaeos.  Let us go\n    back to indenting the first\
    \ line\n    of each paragraph.  \n\n    [START_INDENTATION]\n\n    Duis sagittis\
    \ ipsum. Praesent mauris. \n    Fusce nec tellus sed augue semper \n    porta.\
    \ Mauris massa.  Proin ut \n    ligula vel nunc egestas porttitor.\n    \n   \
    \ Vestibulum lacinia arcu eget nulla. \n    Class aptent taciti sociosqu ad\n\
    \    litora torquent per conubia nostra,\n    per inceptos himenaeos.  Let's try\n\
    \    single spacing now.\n\n    [SINGLESPACING]\n\n    Ullum primis scripserit\
    \ ne vis, ad eam\n    quem dictas dissentias. Alia\n    scripserit vel cu, choro\
    \ delicata\n    dissentiunt mel no, reque persequeris\n    mei an. Paulo graeci\
    \ ex eos, no usu\n    dicit inimicus. In putant ornatus\n    forensibus cum, percipit\
    \ mediocrem\n    in vel.\n\n    Alii timeam eos ut, habeo oblique\n    ocurreret\
    \ ei sea. Quis utroque\n    definiebas et per, ad sumo\n    repudiandae eam, pro\
    \ no sale\n    adolescens. Habeo splendide\n    evertitur has eu, in has vocent\n\
    \    signiferumque. Ex qui homero graeci\n    quaerendum, nulla veniam blandit\n\
    \    ei mea. Sea at idque referrentur.\n    Sit autem liberavisse te.  Let's \n\
    \    go back to double spacing now.\n\n    [DOUBLESPACING]\n\n    Sea ad tacimates\
    \ elaboraret, \n    vel simul urbanitas efficiantur id. \n    Id mel option denique.\
    \ Ludus essent\n    eu ius, natum option appareat cu mea, \n    in saepe deterruisset\
    \ pri. Mei et vero \n    admodum. At quas pertinax sed, et mel \n    modo probo\
    \ iriure. Per te sententiae \n    elaboraret. Cum tritani delectus \n    definitionem\
    \ ne."
"document-md":
  "height": !!int |-
    471
  "width": !!int |-
    488
  "yaml": |-
    question: Here is your document.
    attachments:
      - name: Summary of Benefits
        filename: benefits_summary
        valid formats:
          - md
        content: |
          [BOLDCENTER] Summary of Benefits

          ${ client } is entitled to
          benefits plan ${ benefits }.
    mandatory: True
"document-variable-name":
  "height": !!int |-
    748
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Ok, all done.
    subquestion: |
      % if submit_to_authority:
        % if sent_ok:
      Your document was sent.
        % else:
      For some reason, I was not able to
      send your document.
        % endif
      % else:
      Ok, I will not send your document to
      The Man.
      % endif
    ---
    question: Your document is ready.
    subquestion: |
      Would you like to submit the document
      below to the authorities?
    yesno: submit_to_authority
    attachment:
      - name: A *hello world* document
        filename: Hello_World_Document
        variable name: hello_file
        content: |
          Hello, world!
    ---
    code: |
      sent_ok = send_email(to=[authority],
                           template=my_email,
                           attachments=[hello_file])
"document-variable-name-link":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    attachment:
      filename: Hello_World
      variable name: my_file
      content: |
        Hello, world!
    ---
    mandatory: True
    question: |
      All done.
    subquestion: |
      You can download your document in
      [PDF](${ my_file.pdf.url_for() })
      or
      [RTF](${ my_file.rtf.url_for() })
      format.
"docx-jinja2-demo":
  "height": !!int |-
    282
  "width": !!int |-
    488
  "yaml": |-
    event: document_shown
    question: |
      Here is the document.
    attachment:
      docx template file: docx-jinja2-demo.docx
"docx-recipe":
  "height": !!int |-
    282
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Here is your recipe.  Enjoy!
    attachment:
      name: Your recipe
      filename: recipe
      docx template file: recipe_template.docx
      fields:
        - title: Mandelbrot cookies
        - oven_temperature: ${ oven_degrees } degrees
        - ingredients:
            - apple sauce
            - ${ special_ingredient }
            - flour
            - sugar
        - preparation_time: 48 hours
"docx-table-columns":
  "height": !!int |-
    218
  "width": !!int |-
    488
  "yaml": |-
    generic object: Individual
    question: |
      How much does ${ x } receive from ${ i }?
    fields:
      - Income: x.income[i]
        datatype: currency
"docx-template":
  "height": !!int |-
    282
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Here is your document.
    subquestion: |
      Does it meet your approval?
    yesno: user_approves
    attachment:
      name: Your letter
      filename: letter
      docx template file: letter_template.docx
      valid formats:
        - pdf
        - docx
"docx-template-auto":
  "yaml": ""
"docx-template-code":
  "yaml": |-
    mandatory: True
    question: |
      Here is your document.
    attachment:
      name: Your letter
      filename: letter
      docx template file: letter_template_code.docx
      valid types:
        - pdf
      fields:
        "letter_date": ${ format_date(today()) }
        "phone_number": 202-555-1234
        "subject_matter": ${ subject_matter }
        "address_block": ${ adverse_party.address_block() }
        "signature": ${ user.signature }
      code: |
        {'full_name': user.name.full()}
"docx-template-code-2":
  "yaml": |-
    mandatory: True
    question: |
      Here is your document.
    attachment:
      name: Your letter
      filename: letter
      docx template file: letter_template_code.docx
      code: |
        {'full_name': user.name.full(),
         'letter_date': format_date(today()),
         'phone_number': '202-555-1234',
         'subject_matter': subject_matter,
         'address_block': adverse_party.address_block(),
         'signature': user.signature}
"docx-template-multiple":
  "yaml": |-
    question: |
      Tell me about a fruit.
    fields:
      - Name: seeds_of_fruit.new_item_name
      - Seeds: seeds_of_fruit.new_item_value
        datatype: integer
        min: 0
"docx-template-table":
  "height": !!int |-
    282
  "width": !!int |-
    488
  "yaml": |-
    objects:
      seeds_of_fruit: DADict
    ---
    mandatory: true
    code: |
      seeds_of_fruit.there_are_any = True
      introduction_shown
    ---
    question: |
      Tell me about a fruit.
    fields:
      - Name: seeds_of_fruit.new_item_name
      - Seeds: seeds_of_fruit.new_item_value
        datatype: integer
        min: 0
    ---
    question: |
      Are there any other fruits you would
      like to describe?
    yesno: seeds_of_fruit.there_is_another
    ---
    mandatory: True
    question: |
      Here is your document.
    attachment:
      docx template file: table_template.docx
"doors":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Which door do you choose?
    field: door_choice
    choices:
      - Door Number 1
      - Door Number 2
    ---
    mandatory: True
    code: |
      if door_choice == 'Door Number 1':
        good_luck
      if door_choice == 'Door Number 2':
        bad_luck
    ---
    question: |
      You walk into a field of clover.
    event: good_luck
    ---
    question: |
      You walk into a stinky swamp.
    event: bad_luck
"drop-down":
  "height": !!int |-
    254
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Describe yourself.
    fields:
      - Level of education: education
        choices:
          - High School
          - College
          - Graduate School
      - Favorite fruit: favorite_fruit
        choices:
          - Apple: apples
          - Pear: pears
          - Strawberry: strawberries
"drop-down-with-code":
  "height": !!int |-
    308
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Describe yourself.
    fields:
      - Level of education: education
        choices:
          - High School
          - College
          - Graduate School
      - State of birth: birth_state
        code: |
          us.states.mapping('abbr', 'name')
      - Gender: gender
        code: |
          {'m': 'Male', 'f': 'Female', 'o': 'Other'}
"dual-dict":
  "yaml": |-
    mandatory: True
    code: |
      veggies = DADict('veggies')
      veggies.object_type = DAList
      veggies.initializeObject('potato')
      veggies.initializeObject('turnip')
      fruit.object_type = DAObject
      fruit.initializeObject('a')
      fruit['a'].seed_info = DAObject("fruit['a']")
      fruit['a'].seed_info.tally = {}
      fruit['a'].seed_info.tally['b'] = DAObject("fruit['a'].seed_info.tally['b']")
      fruit['a'].seed_info.tally['b'].molecules = DAList("fruit['a'].seed_info.tally['b'].molecules")
      fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[0]"))
      fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[1]"))
      fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[2]"))
      fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[3]"))
      fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[4]"))
      fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[5]"))
      fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[6]"))
      fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[7]"))
      fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[8]"))
"edit-list":
  "height": !!int |-
    359
  "width": !!int |-
    488
  "yaml": "mandatory: True\nquestion: |\n  All done\nsubquestion: |\n  The people\
    \ are ${ person }.\n\n  Your favorite is ${ favorite }.\n  \n  ${ person.table\
    \ }\n  \n  ${ person.add_action() }\n---\ntable: person.table\nrows: person\n\
    columns:\n  - Name: |\n      row_item.name.full()\n  - Fruit: |\n      row_item.favorite_fruit\n\
    edit:\n  - name.first\n  - favorite_fruit"
"edit-list-cancel":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the name of the ${ ordinal(i) } fruit?
    fields:
      - Name: fruits[i].name.text
    action buttons:
      - label: Cancel
        action: fruits.cancel
        color: secondary
        show if: fruits.has_been_gathered()
    ---
    question: |
      How many seeds does ${ fruits[i] } have?
    fields:
      - Seeds: fruits[i].seeds
        datatype: integer
    action buttons:
      - label: Cancel
        action: fruits.cancel
        color: secondary
        show if: fruits.has_been_gathered()
    ---
    event: fruits.cancel
    code: |
      fruits.cancel_add_or_edit()
"edit-list-complete-complex":
  "yaml": "objects:\n  - person: DAList.using(object_type=Individual,\n          \
    \               there_are_any=True,\n                         complete_attribute='complete')\n\
    ---\ncode: |\n  person[i].name.first\n  if person[i].favorite_fruit == 'apple':\n\
    \    person[i].favorite_apple\n  person[i].complete = True\n---\nquestion: |\n\
    \  Who is the ${ ordinal(i) } person?\nfields:\n  - First Name: person[i].name.first\n\
    \  - Last Name: person[i].name.last\n---\nquestion: |\n  What is ${ person[i].possessive('favorite\
    \ fruit') }?\nfields:\n  - Fruit: person[i].favorite_fruit\n---\nquestion: |\n\
    \  What is ${ person[i].possessive('favorite apple') }?\nfields:\n  - Variety:\
    \ person[i].favorite_apple\n---\nquestion: |\n  Are there any more people\n  you\
    \ would like to mention?\nyesno: person.there_is_another\n---\nmandatory: true\n\
    question: |\n  Summary of answers\nsubquestion: |\n  ${ person.table }\n  \n \
    \ ${ person.add_action() }\n---\ntable: person.table\nrows: person\ncolumns:\n\
    \  - Name: |\n      row_item.name.full()\n  - Fruit: |\n      row_item.favorite_fruit\n\
    edit:\n  - name.first\n  - favorite_fruit"
"edit-list-manual":
  "yaml": "objects:\n  - person: DAList\n---\nmandatory: True\ncode: |\n  person.object_type\
    \ = Individual\n  person.there_are_any = True\n  person.complete_attribute = 'complete'\n\
    ---\ncode: |\n  person[i].name.first\n  person[i].favorite_fruit\n  person[i].complete\
    \ = True\n---\nquestion: |\n  Who is the ${ ordinal(i) } person?\nfields:\n  -\
    \ First Name: person[i].name.first\n  - Last Name: person[i].name.last\n---\n\
    question: |\n  What is ${ person[i].possessive('favorite fruit') }?\nfields:\n\
    \  - Fruit: person[i].favorite_fruit\n---\nquestion: |\n  Are there any more people\n\
    \  you would like to mention?\nyesno: person.there_is_another\n---\nquestion:\
    \ |\n  Who is your favorite person?\nfields:\n  - Favorite: favorite\n    code:\
    \ person\n---\nmandatory: True\nquestion: |\n  All done\nsubquestion: |\n  The\
    \ people are ${ person }.\n\n  Your favorite is ${ favorite }.\n  \n  ${ people_table\
    \ }\n  \n  [<i class=\"fa-solid fa-plus-circle\"></i> Add another person](${ url_action('person_add')\
    \ })\n---\ntable: people_table\nrows: person\ncolumns:\n  - Name: |\n      row_item.name.full()\n\
    \  - Fruit: |\n      row_item.favorite_fruit\n  - Action: |\n      '[:pencil-alt:]('\
    \ + url_action(row_item.instanceName + '.review') + ')&nbsp;&nbsp;&nbsp;&nbsp;'\
    \ + \\\n      '[:trash:](' + url_action('person_del', item=row_item.instanceName)\
    \ + ')'\n---\nevent: person[i].review\nquestion: |\n  Edit information about \n\
    \  ${ person[i] }.\nreview:\n  - Edit name: person[i].name.first\n    button:\
    \ |\n      **Name**: ${ person[i] }\n  - Edit fruit: person[i].favorite_fruit\n\
    \    button: |\n      **Favorite fruit**: \n      ${ person[i].favorite_fruit\
    \ }\n---\nevent: person_del\ncode: |\n  person.remove(value(action_argument('item')))\n\
    ---\nevent: person_add\ncode: |\n  person.appendObject()\n  person.reset_gathered()\n\
    \  person.there_is_another = False"
"edit-list-non-editable":
  "height": !!int |-
    246
  "width": !!int |-
    488
  "yaml": |-
    mandatory: true
    question: |
      Thank you for your answers!
    subquestion: |
      ${ person.table.show(editable=False) }

      You can
      [edit your answers](${ url_action('review_interview') })
      if you want.
"edit-list-string":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "question: |\n  Who is the ${ ordinal(i) } person?\nfields:\n  - Name: person[i]\n\
    ---\nquestion: |\n  Are there any more people\n  you would like to mention?\n\
    yesno: person.there_is_another\n---\nmandatory: True\nquestion: |\n  All done\n\
    subquestion: |\n  The people are ${ person }.\n\n  ${ person.table }\n  \n  ${\
    \ person.add_action() }\n---\ntable: person.table\nrows: person\ncolumns:\n  -\
    \ \"#\": |\n      row_index + 1\n  - Name: |\n      row_item\nedit: True"
"email-field":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your e-mail address?
    fields:
      - E-mail: target_variable
        datatype: email
        required: False
"email-to-case":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": "mandatory: true\ncode: |\n  multi_user = True\n  email = None\n---\nmandatory:\
    \ true\ncode: |\n  intro_seen\n  if email is None:\n    waiting_screen\n  else:\n\
    \    all_done\n---\nquestion: |\n  E-mailing to the interview\nsubquestion: |\n\
    \  When you press continue, you will be\n  provided with an e-mail address to\n\
    \  which you can send an email.\nfield: intro_seen\n---\nevent: waiting_screen\n\
    question: |\n  E-mailing to the interview\nsubquestion: |\n  Send an e-mail to:\n\
    \  \n  > ${ interview_email() }\n  \n  Once the e-mail is received and processed,\n\
    \  you can click refresh to see the e-mail.\nbuttons:\n  - Refresh: refresh\n\
    ---\nevent: all_done\nquestion: |\n  E-mails received\nsubquestion: |\n  The latest\
    \ e-mail was:\n  \n  * Subject: ${ email.subject }\n  * To: ${ email.to_address\
    \ }\n  * From: ${ email.from_address }\n  * Reply to: ${ email.reply_to }\n  *\
    \ Return path: ${ email.return_path }\n  % if email.body_text:\n  * Body text:\
    \ ${ email.body_text }\n  % endif\n  % if email.body_html:\n  * Body HTML: ${\
    \ email.body_html.slurp() }\n  % endif\n  % if len(email.attachment):\n  * Attachment:\
    \ ${ email.attachment[0] }\n  % endif\n---\nevent: incoming_email\ncode: |\n \
    \ # Time-consuming code that processes the\n  # e-mail can go here.\n  background_response_action('save_email',\
    \ email=action_argument('email'))\n---\nevent: save_email\ncode: |\n  email =\
    \ action_argument('email')\n  background_response()"
"email-to-case-simple":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": "question: |\n  E-mailing to the interview\nsubquestion: |\n  When you press\
    \ continue, you will be\n  provided with an e-mail address to\n  which you can\
    \ send an email.\nfield: intro_seen\n---\nneed: intro_seen\nmandatory: true\n\
    question: |\n  E-mails sent to case\nsubquestion: |\n  Send an e-mail to\n  ${\
    \ interview_email() }\n  and click Refresh.\n  \n  Be patient, though.  It takes\
    \ a\n  few seconds for e-mails to travel\n  and be processed.\n  \n  % for item\
    \ in get_emails():\n    % if len(item.emails):\n  Subject lines of all e-mails\
    \ sent\n  to ${ item.address }:\n  \n      % for mail_item in item.emails:\n \
    \ * ${ mail_item.subject }\n      % endfor\n    % endif\n  % endfor\nbuttons:\n\
    \  - Refresh: refresh"
"embed":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Fill in the blanks.
    subquestion: |
      I went downtown to get some
      [FIELD grocery_item].
      I slipped on the ice and
      fell in the
      [FIELD unfortunate_place].
    fields:
      - Grocery item: grocery_item
      - no label: unfortunate_place
        choices:
          - storm drain
          - gutter
          - mineshaft
"emoji-inline":
  "height": !!int |-
    459
  "width": !!int |-
    488
  "yaml": |-
    image sets:
      freepik:
        attribution: |
          Icon made by [Freepik](http://www.flaticon.com/authors/freepik)
        images:
          male: male244.svg
          female: female243.svg
    ---
    question: |
      What is your gender?
    field: user.gender
    choices:
      - "Male :male:": male
      - "Female :female:": female
      - "Other": other
"empty-choices":
  "yaml": |-
    code: |
      if choices_should_be_empty:
        the_choices = []
      else:
        the_choices = ["Door Number 1", "Door Number 2"]
    ---
    question: |
      What do you choose?
    field: door
    choices:
      - code: the_choices
    ---
    mandatory: true
    question: |
      % if door is None:
      There were no choices available.
      % else:
      You chose ${ door }.
      % endif
    subquestion: |
      `door` is `${ door }`.
    buttons:
      - Restart: restart
"empty-choices-checkboxes":
  "yaml": "code: |\n  if choices_should_be_empty:\n    the_choices = []\n  else:\n\
    \    the_choices = [\"Door Number 1\", \"Door Number 2\"]\n---\nquestion: |\n\
    \  What do you choose?\nfields:\n  - Favorite fruit: favorite_fruit\n  - no label:\
    \ doors\n    datatype: checkboxes\n    code: the_choices\n---\nmandatory: true\n\
    question: |\n  % if len(doors):\n  % for door in [x for x in doors if doors[x]]:\n\
    \  You chose ${ door }.\n  % endfor\n  % if doors.all_false():\n  You chose no\
    \ doors.\n  % endif\n  % else:\n  No doors could be chosen.\n  % endif\nsubquestion:\
    \ |\n  `doors` is `${ doors.elements }`.\n  \n  Your favorite fruit is\n  ${ favorite_fruit\
    \ }.\nbuttons:\n  - Restart: restart"
"empty-choices-checkboxes-solo":
  "yaml": |-
    code: |
      if choices_should_be_empty:
        the_choices = []
      else:
        the_choices = ["Door Number 1", "Door Number 2"]
    ---
    question: |
      What do you choose?
    fields:
      - no label: doors
        datatype: checkboxes
        code: the_choices
    ---
    mandatory: true
    question: |
      % if len(doors):
      % for door in [x for x in doors if doors[x]]:
      You chose ${ door }.
      % endfor
      % if doors.all_false():
      You chose no doors.
      % endif
      % else:
      No doors could be chosen.
      % endif
    subquestion: |
      `doors` is `${ doors.elements }`.
    buttons:
      - Restart: restart
"empty-choices-fields":
  "yaml": |-
    code: |
      if choices_should_be_empty:
        the_choices = []
      else:
        the_choices = ["Door Number 1", "Door Number 2"]
    ---
    question: |
      What do you choose?
    fields:
      - Fruit: favorite_fruit
      - no label: door
        datatype: radio
        code: the_choices
    ---
    mandatory: true
    question: |
      % if door is None:
      There were no choices available.
      % else:
      You chose ${ door }.
      % endif
    subquestion: |
      Your favorite fruit is
      ${ favorite_fruit }.

      `door` is `${ door }`.
    buttons:
      - Restart: restart
"empty-choices-fields-multiple":
  "yaml": |-
    code: |
      if choices_should_be_empty:
        the_doors = []
        the_buckets = []
      else:
        the_doors = ["Door Number 1", "Door Number 2"]
        the_buckets = ["Green Bucket", "Red Bucket"]
    ---
    question: |
      What do you choose?
    fields:
      - no label: door
        datatype: radio
        code: the_doors
      - no label: bucket
        datatype: radio
        code: the_buckets
    ---
    mandatory: true
    question: |
      % if door is None:
      There were no choices available.
      % else:
      You chose ${ door }.
      You chose ${ bucket }.
      % endif
    subquestion: |
      `door` is `${ door }`.

      `bucket` is `${ bucket }`.
    buttons:
      - Restart: restart
"empty-choices-fields-solo":
  "yaml": |-
    code: |
      if choices_should_be_empty:
        the_choices = []
      else:
        the_choices = ["Door Number 1", "Door Number 2"]
    ---
    question: |
      What do you choose?
    fields:
      - no label: door
        datatype: radio
        code: the_choices
    ---
    mandatory: true
    question: |
      % if door is None:
      There were no choices available.
      % else:
      You chose ${ door }.
      % endif
    subquestion: |
      `door` is `${ door }`.
    buttons:
      - Restart: restart
"empty-choices-object-checkboxes":
  "yaml": |-
    objects:
      protagonist: Individual
      antagonist: Individual
      villain: PartyList
    ---
    code: |
      if choices_should_be_empty:
        the_choices = []
      else:
        the_choices = [protagonist, antagonist]
    ---
    mandatory: True
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
      villain.auto_gather = False
    ---
    question: |
      Please answer this.
    fields:
      - Favorite fruit: favorite_fruit
      - no label: villain
        datatype: object_checkboxes
        choices: the_choices
    ---
    mandatory: True
    question: |
      % if villain.number() == 0:
      There are no villains here.
      % else:
      The ${ villain.as_noun() }
      ${ villain.does_verb("include") }
      ${ villain }.
      % endif
      % if len(the_choices) == 0:
      In fact, no villains ever existed.
      % endif
    subquestion: |
      Your favorite fruit is
      ${ favorite_fruit }.
    buttons:
      - Restart: restart
"empty-choices-object-checkboxes-create":
  "yaml": |-
    objects:
      protagonist: Individual
      antagonist: Individual
    ---
    code: |
      if choices_should_be_empty:
        the_choices = []
      else:
        the_choices = [protagonist, antagonist]
    ---
    mandatory: True
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
    ---
    question: |
      Please answer this.
    fields:
      - Favorite fruit: favorite_fruit
      - no label: villain
        datatype: object_checkboxes
        choices: the_choices
"empty-choices-object-checkboxes-solo":
  "yaml": |-
    objects:
      protagonist: Individual
      antagonist: Individual
      villain: PartyList
    ---
    code: |
      if choices_should_be_empty:
        the_choices = []
      else:
        the_choices = [protagonist, antagonist]
    ---
    mandatory: True
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
      villain.auto_gather = False
    ---
    question: Who are the villains, if any?
    fields:
      - no label: villain
        datatype: object_checkboxes
        choices: the_choices
    ---
    mandatory: True
    question: |
      % if villain.number() == 0:
      There are no villains here.
      % else:
      The ${ villain.as_noun() }
      ${ villain.does_verb("include") }
      ${ villain }.
      % endif
      % if len(the_choices) == 0:
      In fact, no villains ever existed.

      % endif
    buttons:
      - Restart: restart
"empty-choices-object-checkboxes-solo-create":
  "yaml": |-
    objects:
      protagonist: Individual
      antagonist: Individual
    ---
    code: |
      if choices_should_be_empty:
        the_choices = []
      else:
        the_choices = [protagonist, antagonist]
    ---
    mandatory: True
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
    ---
    question: Who are the villains, if any?
    fields:
      - no label: villain
        datatype: object_checkboxes
        choices: the_choices
    ---
    mandatory: True
    question: |
      % if villain.number() == 0:
      There are no villains here.
      % else:
      The ${ villain.as_noun() }
      ${ villain.does_verb("include") }
      ${ villain }.
      % endif
      % if len(the_choices) == 0:
      In fact, no villains ever existed.

      % endif
    buttons:
      - Restart: restart
"error-action":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    metadata:
      error action: on_error
    ---
    event: on_error
    question: |
      Sorry, we have encountered an error.
    buttons:
      - Exit: exit
        url: https://docassemble.org
"error-action-2":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    metadata:
      error action: on_error
    ---
    event: on_error
    code: |
      healthy = False
    ---
    mandatory: True
    code: |
      if not healthy:
        fail_safe
      favorite_fruit
      favorite_vegetable
      favorite_number
      final_screen
    ---
    event: fail_safe
    code: |
      if not defined('favorite_fruit'):
        favorite_fruit = '_________'
      if not defined('favorite_vegetable'):
        favorite_vegetable = '_________'
      if not defined('favorite_number'):
        favorite_number = '____'
      final_screen
"error-help":
  "height": !!int |-
    659
  "width": !!int |-
    488
  "yaml": |-
    metadata:
      error help: |
        We are sorry.
        An error has occurred.
        Please contact
        [the administrator](mailto:admin@example.com).
"error-help-language":
  "height": !!int |-
    659
  "width": !!int |-
    488
  "yaml": "metadata:\n  error help:\n    en: |\n      We are sorry.\n      An error\
    \ has occurred.\n      Please contact\n      [the administrator](mailto:admin@example.com).\n\
    \    es: |\n      Lo sentimos.\n      Se ha producido un error.\n      Por favor,\
    \ p\xF3ngase en contacto con\n      [el administrador](mailto:admin@example.com)."
"event-example":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    question: |
      This is a special screen.
    event: show_special_screen
"event-role-event":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    event: role_event
    question: All done for now.
    subquestion: |
      Someone else needs to answer
      questions now.  You will be notified
      when you can resume the interview.
    buttons:
      - Exit: leave
"exists":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - real_estate_holdings: Value
    ---
    question: |
      Do you have real estate holdings?
    yesno: real_estate_holdings.exists
    ---
    question: |
      How much real estate do you own?
    fields:
      - Value: real_estate_holdings.value
        datatype: currency
"exit":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      command('exit', url=target_url)
    ---
    question: |
      Where do you want to go?
    field: target_url
    buttons:
      - Stanford: "http://stanford.edu/"
      - Harvard: "http://www.harvard.edu/"
"exit-buttons":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: We are all done.
    buttons:
      - Exit: exit
      - Restart: restart
    mandatory: True
"exit-buttons-mixed":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Warning!
    subquestion: |
      Proceeding with this interview may
      result in despair-inducing levels
      of liability.
    buttons:
      - I understand:
          code: |
            attitude = 'careful'
      - I do not care:
          code: |
            attitude = 'reckless'
      - Get me out of here: exit
    ---
    mandatory: true
    question: |
      % if attitude == 'reckless':
      You are foolish!
      % else:
      Ok, we are proceeding with caution.
      % endif
"exit-buttons-mixed-code":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      if user_choice == 'exit':
        command('exit')
      elif user_choice == 'proceed':
        final_screen
    ---
    question: |
      Warning!
    subquestion: |
      Proceeding with this interview may
      result in despair-inducing levels
      of liability.
    field: user_choice
    buttons:
      - Exit: exit
      - Keep going: proceed
    ---
    event: final_screen
    question: |
      Hey, I warned you.
"exit-choices":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": |-
    question: We are all done.
    choices:
      - Exit: exit
      - Restart: restart
    mandatory: True
"exit-url":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Congratulations, you found Nemo!
    buttons:
      - Try again: restart
      - Learn More: exit
        url: https://en.wikipedia.org/wiki/Amphiprioninae
    mandatory: True
"exit-url-referer":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    question: |
      We are on a quest.
    subquestion: |
      This quest is exciting!
    field: continue_with_quest
    ---
    question: |
      We have finished our quest.
    buttons:
      - Return: exit
        url: |
          ${ referring_url() }
    need:
      - continue_with_quest
    mandatory: True
"exit-url-referer-fullscreen":
  "height": !!int |-
    867
  "width": !!int |-
    459
  "yaml": |-
    features:
      go full screen: True
    ---
    question: |
      Let's go on a quest!
    subquestion: |
      How exciting would you
      like your quest to be?
    field: excitement_level
    choices:
      - Thrilling
      - Interesting
      - Soporific
    ---
    question: |
      We are nearing the end of the
      quest.
    field: quest_almost_over
    ---
    question: |
      We have finished the quest.
    buttons:
      - Return: exit
        url: |
          ${ referring_url() }
    need:
      - excitement_level
      - quest_almost_over
    mandatory: True
"exit-url-referer-fullscreen-mobile":
  "height": !!int |-
    867
  "width": !!int |-
    459
  "yaml": "features:\n  go full screen: mobile\n---\ncode: |\n  if device().is_mobile\
    \ or device().is_tablet:\n    on_mobile = True\n  else:\n    on_mobile = False\n\
    ---\nmandatory: True\ncode: |\n  excitement_level\n  quest_almost_over\n  if on_mobile:\n\
    \    final_screen_mobile\n  else:\n    final_screen_desktop\n---\nquestion: |\n\
    \  Let's go on a quest!\nsubquestion: |\n  % if on_mobile:\n  I see you are using\
    \ a mobile\n  device.\n  % else:\n  I see that you are not using\n  a mobile device.\n\
    \  % endif\n  \n  How exciting would you\n  like your quest to be?\nfield: excitement_level\n\
    choices:\n  - Thrilling\n  - Interesting\n  - Soporific\n---\nquestion: |\n  We\
    \ are nearing the end of the\n  quest.\nfield: quest_almost_over\n---\nevent:\
    \ final_screen_mobile\nquestion: |\n  We have finished the quest.\nbuttons:\n\
    \  - Return: exit\n    url: |\n      ${ referring_url() }\n---\nevent: final_screen_desktop\n\
    question: |\n  We have finished the quest."
"external_files":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    features:
      javascript: my-functions.js
      css: my-styles.css
    ---
    mandatory: True
    question: |
      A test of Javascript and CSS
    subquestion: |
      <span class="groovy"></span>
"fallback":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    include:
      - question-library.yml
    ---
    question: Which of these statements is true?
    choices:
      - "I am old-fashioned":
          question: |
            My darling, would you do me the
            honor of accompanying me to
            the dance this fine evening?
          yesno: user_wants_to_go_to_dance
      - "I don't care for flowerly language": continue
    ---
    mandatory: True
    code: |
      if user_agrees_it_is_a_nice_evening and user_wants_to_go_to_dance:
        good_news
    ---
    mandatory: True
    question: |
      Say, I have to run.  Bye!
    ---
    event: good_news
    question: |
      That is splendid news!
"fallback2":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    include:
      - question-library.yml
    ---
    question: |
      I forgot, did we already agree to go to the dance together?
    yesno: we_already_agreed_to_go
    ---
    code: |
      if we_already_agreed_to_go:
        user_wants_to_go_to_dance = True
    ---
    mandatory: True
    code: |
      if user_agrees_it_is_a_nice_evening and user_wants_to_go_to_dance:
        good_news
    ---
    mandatory: True
    question: |
      Say, I have to run.  Bye!
    ---
    event: good_news
    question: |
      That is splendid news!
"false-values":
  "height": !!int |-
    368
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples
          - Peaches
          - Pears
          - Plums
    ---
    mandatory: True
    question: |
      Summary of your answer
    subquestion: |
      You do not like
      ${ likes_fruit.false_values() }.
"field-css-class":
  "height": !!int |-
    240
  "width": !!int |-
    488
  "yaml": |-
    features:
      css: fruit.css
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
        css class: fruit
"field-note":
  "yaml": |-
    question: |
      Tell me more about you.
    fields:
      - Favorite fruit: fruit
      - Favorite vegetable: veggie
      - note: |
          I understand that this next
          question is particularly
          difficult to answer, but please
          bear with me.  We are almost
          done.
      - Favorite tree: tree
"fields":
  "height": !!int |-
    1438
  "width": !!int |-
    488
  "yaml": |-
    question: Tell me more about yourself
    fields:
      - Description: user_description
        input type: area
        hint: |
          E.g., you can describe your
          hair color, eye color,
          favorite movies, etc.
      - Annual income: user_annual_income
        datatype: currency
        min: 100
      - E-mail address: user_email_address
        datatype: email
      - Been vaccinated: user_vaccinated
        datatype: yesno
      - Seen Mount Rushmore: mount_rushmore_visited
        datatype: yesnowide
      - Opinion of turnips: turnip_rating
        datatype: range
        min: 1
        max: 10
      - Belly button type: belly_button
        datatype: radio
        choices:
          - Innie
          - Outie
      - html: |
          The date and time is
          <span class="mytime"
          id="today_time"></span>.
      - Number of friends: num_friends
        datatype: radio
        choices:
          - One: 1
          - Two: 2
          - Three: 3
      - Degrees obtained: degrees
        datatype: checkboxes
        choices:
          - High school
          - College
          - Graduate school
      - State you grew up in: home_state
        code: |
          us.states.mapping('abbr', 'name')
      - note: |
          #### Politics

      - label: Tell me about your political views.
        field: political_views
        label above field: True
        default: I have no political views
        maxlength: 30
      - Party: political_party
        datatype: radio
        shuffle: True
        choices:
          - Republican
          - Democrat
          - Independent
    css: |
      <style>
        .mytime {
           color: green;
        }
      </style>
    script: |
      <script>
        $("#today_time").html(Date());
      </script>
"fields-ajax":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite word?
    fields:
      - Word: favorite_word
        input type: ajax
        action: wordlist
    ---
    event: wordlist
    code: |
      set_save_status('ignore')
      wordstart = action_argument('wordstart').lower()
      results = list()
      with open('/usr/share/dict/words', mode='r', encoding='utf-8') as words_file:
        for line in words_file:
          lower_line = line.lower()
          if lower_line.startswith(wordstart):
            results.append(line.rstrip())
      json_response(results)
"fields-ajax-2":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Word: favorite_fruit
        input type: ajax
        action: fruitlist
    ---
    event: fruitlist
    code: |
      set_save_status('ignore')
      original = action_argument('wordstart')
      wordstart = original.lower()
      results = []
      for key, val in {'x234': 'Apple', 'y432': 'Orange', 'h293': 'Peach'}.items():
        if key == original:
          json_response([[key, val]])
        if val.lower().startswith(wordstart):
          results.append([key, val])
      json_response(results)
"fields-ajax-list-collect":
  "yaml": |-
    objects:
      - favorite_word: DAList.using(there_are_any=True)
    ---
    question: |
      What is your ${ ordinal(i) } favorite word?
    fields:
      - Word: favorite_word[i]
        input type: ajax
        action: wordlist
    list collect: True
"fields-checkboxes":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - apple
          - peach
          - pear
      - "What is your favorite fruit overall?": favorite_fruit
    ---
    question: |
      Thank you for your thoughts.
    subquestion: |
      % if likes_fruit['apple']:
      You like apples.
      % endif
      % if likes_fruit['peach']:
      You like peaches.
      % endif
      % if likes_fruit['pear']:
      You like pears.
      % endif
      Your favorite, though, is ${ favorite_fruit }.

      In other words, you like
      ${ likes_fruit.true_values() }.

      Your favorite, though, is ${ favorite_fruit }.

      In Python, `likes_fruit` is a `DADict`:
      `${ repr(likes_fruit) }`.
    mandatory: True
"fields-checkboxes-aota":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples
          - Peaches
          - Pears
        all of the above: True
        none of the above: False
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-code":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        code: |
          [
            {'apple': 'Apples'},
            {'peach': 'Peaches'},
            {'pear': 'Pears'}
          ]
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-dadict":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Your fruit preferences
    subquestion: |
      % if likes_fruit.all_true():
      You like all the fruit.
      % elif likes_fruit.all_false():
      You don't like any of the fruit.
      % elif likes_fruit.any_true():
      You like at least one fruit.
      % endif

      % if likes_fruit.any_false():
      There is at least one fruit you don't like.
      % endif
"fields-checkboxes-default-0":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples
          - Peaches
          - Pears
        default: Pears
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-1":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples
          - Peaches
          - Pears
        default:
          - Pears
          - Apples
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-2":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples
          - Peaches
          - Pears
        default:
          Pears: True
          Apples: True
          Peaches: False
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-3":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples
          - Peaches
          - Pears
        default:
          code: |
            ['Pears', 'Apples']
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-4":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples
          - Peaches
          - Pears
        default:
          code: |
            {'Pears': False, 'Peaches': False, 'Apples': True}
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-5":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        code: |
          [
            {'apple': 'Apples', 'default': True},
            {'peach': 'Peaches'},
            {'pear': 'Pears'}
          ]
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-6":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        code: |
          [
            ['apple', 'Apples', True],
            ['peach', 'Peaches'],
            ['pear', 'Pears']
          ]
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-different-labels":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples: apple
          - Peaches: peach
          - Pears: pear
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-label-value":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - label: Apples
            value: apple
          - label: Peaches
            value: peach
          - label: Pears
            value: pear
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-nota":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples
          - Peaches
          - Pears
      - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-nota-false":
  "height": !!int |-
    378
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples
          - Peaches
          - Pears
        none of the above: False
      - "What is your favorite fruit overall?": favorite_fruit
"fields-choices":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
        choices:
          - "${ 'Apples' }": apple
          - Oranges: orange
          - Pears: pear
"fields-choices-combobox":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "question: |\n  What is your favorite color?\nfields:\n  - Color: favorite_color\n\
    \    input type: combobox\n    choices: \n      - Red\n      - Green\n      -\
    \ Purple\n---\nmandatory: True\nquestion: All done\nsubquestion: |\n  Your favorite\
    \ color is\n  ${ favorite_color }."
"fields-choices-datalist":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "question: |\n  What is your favorite color?\nfields:\n  - Color: favorite_color\n\
    \    input type: datalist\n    choices: \n      - Red\n      - Green\n      -\
    \ Purple\n---\nmandatory: True\nquestion: All done\nsubquestion: |\n  Your favorite\
    \ color is\n  ${ favorite_color }."
"fields-choices-dropdown":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "question: | \n  What type of shoes do you wear?\nfields:\n  - Shoe Type:\
    \ target_variable\n    choices: \n      - Sneakers\n      - Sandals\n      - Clogs\n\
    \      - Other"
"fields-choices-dropdown-input-type":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "question: | \n  What type of shoes do you wear?\nfields:\n  - Shoe Type:\
    \ target_variable\n    input type: dropdown\n    choices: \n      - Sneakers\n\
    \      - Sandals\n      - Clogs\n      - Other"
"fields-code":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "objects:\n  - people: DAList.using(object_type=Individual, ask_number=True)\n\
    ---\nquestion: |\n  How many people are there?\nfields:\n  - Number: people.target_number\n\
    \    datatype: integer\n    min: 1\n    max: 10\n---\nsets:\n  - people[i].name.first\n\
    question: |\n  What are the peoples' names?\nfields:\n  code: name_list\n---\n\
    code: |\n  name_list = list()\n  for index in range(people.number()):\n    name_list.append(\n\
    \      {\"label\": ordinal(index, capitalize=True) + \" person's given name\"\
    ,\n       \"field\": \"people[\" + str(index) + \"].name.first\"\n      })\n \
    \   name_list.append(\n      {\"label\": ordinal(index, capitalize=True) + \"\
    \ person's surname\",\n       \"field\": \"people[\" + str(index) + \"].name.last\"\
    \n      })\n---\nmandatory: True\nquestion: |\n  List of people\nsubquestion:\
    \ |\n  The people include:\n  \n  % for person in people:\n  * ${ person }\n \
    \ % endfor"
"fields-code-embed":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "objects:\n  - people: DAList.using(object_type=Individual, ask_number=True)\n\
    ---\nquestion: |\n  How many people are there?\nfields:\n  - Number: people.target_number\n\
    \    datatype: integer\n    min: 1\n    max: 10\n---\nsets:\n  - people[i].name.first\n\
    question: |\n  What are the peoples' names?\nsubquestion: |\n  ${ name_display\
    \ }\nfields:\n  code: name_list\n---\ncode: |\n  name_list = list()\n  name_display\
    \ = \"\"\n  for index in range(people.number()):\n    name_list.append(\n    \
    \  {\"label\": ordinal(index, capitalize=True) + \" person's given name\",\n \
    \      \"field\": \"people[\" + str(index) + \"].name.first\"\n      })\n    name_list.append(\n\
    \      {\"label\": ordinal(index, capitalize=True) + \" person's surname\",\n\
    \       \"field\": \"people[\" + str(index) + \"].name.last\"\n      })\n    name_display\
    \ += \"The \" + ordinal(index) + \" person's name is \"\\\n                  +\
    \ \"[FIELD people[\" + str(index) + \"].name.first] \"\\\n                  +\
    \ \"[FIELD people[\" + str(index) + \"].name.last].\\n\\n\"\n---\nmandatory: True\n\
    question: |\n  List of people\nsubquestion: |\n  The people include:\n  \n  %\
    \ for person in people:\n  * ${ person }\n  % endfor"
"fields-hidden":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
      - field: favorite_vegetable
        input type: hidden
        default: turnip
"fields-hidden-autocomplete":
  "height": !!int |-
    446
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - doctor: Person
    ---
    question: |
      Who is your doctor?
    fields:
      - Name: doctor.address.name
        address autocomplete:
          types:
            - doctor
          fields:
            - address_components
            - geometry
            - name
            - place_id
      - Address: doctor.address.address
      - Unit: doctor.address.unit
        required: False
      - City: doctor.address.city
      - State: doctor.address.state
        code: states_list()
      - Zip: doctor.address.zip
      - field: doctor.address.place_id
        input type: hidden
      - field: doctor.address.latitude
        datatype: number
        input type: hidden
      - field: doctor.address.longitude
        datatype: number
        input type: hidden
    validation code: |
      if not doctor.address.place_id:
        validation_error('You need to choose a doctor from the drop-down list.')
    ---
    depends on:
      - doctor.address.name
    code: |
      doctor.name.text = doctor.address.name
    ---
    mandatory: True
    question: |
      The `place_id` of ${ doctor } is
      `${ doctor.address.place_id }`.
    subquestion: |
      The office is located at
      `${ repr((doctor.address.latitude, doctor.address.longitude)) }`.
"fields-mc":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
        datatype: radio
        code: |
          myoptions
    ---
    question: |
      What is your brother's favorite
      fruit?
    fields:
      - Fruit: favorite_fruit_of_brother
        datatype: radio
        code: |
          myoptions
    ---
    code: |
      myoptions = [
                    {'apple': "Apples"},
                    {'orange': "Oranges"},
                    {'pear': "Pears"}
                  ]
"fields-mc-2":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    code: |
      myoptions = {
                    'apple': "Apples",
                    'orange': "Oranges",
                    'pear': "Pears"
                  }
"fields-mc-3":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    code: |
      myoptions = ["Apples", "Oranges", "Pears"]
"fields-mc-4":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    code: |
      myoptions = [
                    ['apple', 'Apples'],
                    ['orange', 'Oranges'],
                    ['pear', 'Pears']
                  ]
"fields-mc-5":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    code: |
      myoptions = [
                    ['apple', 'Apples'],
                    ['orange', 'Oranges', True],
                    ['pear', 'Pears']
                  ]
"fields-mc-6":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    code: |
      myoptions = [
                    ['apple', 'Apples', None, 'Apples are good in pies.'],
                    ['orange', 'Oranges', None, 'Oranges are a type of citrus fruit.'],
                    ['pear', 'Pears', None, 'Pears are an acquired taste.']
                  ]
"fields-mc-7":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    code: |
      myoptions = [
                    {'apple': "Apples",
                     'default': True},
                    {'orange': "Oranges"},
                    {'pear': "Pears"}
                  ]
"fields-mc-8":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    code: |
      myoptions = [
                    {'apple': "Apples",
                     'default': True,
                     'help': "Apples are good in pies."},
                    {'orange': "Oranges",
                     'help': "Oranges are a type of citrus fruit."},
                    {'pear': "Pears",
                     'help': "Pears are an acquired taste."}
                  ]
"fields-mc-9":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    code: |
      myoptions = [
                    {'label': "Apples",
                     'value': 'apple'},
                    {'label': "Oranges",
                     'value': 'orange'},
                    {'label': "Pears",
                     'value': 'pear'}
                  ]
"fields-mc-aota":
  "height": !!int |-
    354
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - Requested options: car_options
        datatype: checkboxes
        choices:
          - Sunroof
          - Automatic transmission
          - Heated seats
        all of the above: |
          I want to pay a lot
        none of the above: False
"fields-mc-exclude":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
        datatype: radio
        code: |
          myoptions
    ---
    question: |
      What is your brother's favorite
      fruit, assuming he does not like
      ${ favorite_fruit }?
    fields:
      - Fruit: favorite_fruit_of_brother
        datatype: radio
        code: |
          myoptions
        exclude: |
          favorite_fruit
    ---
    code: |
      myoptions = [
                    {'apple': "Apples"},
                    {'orange': "Oranges"},
                    {'pear': "Pears"}
                  ]
"fields-mc-exclude-manual":
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
        datatype: radio
        choices:
          - Apples
          - Oranges
          - Pears
    ---
    question: |
      What is your brother's favorite
      fruit, assuming he does not like
      ${ favorite_fruit }?
    fields:
      - Fruit: favorite_fruit_of_brother
        datatype: radio
        choices:
          - Apples
          - Oranges
          - Pears
        exclude: |
          all_fruit
"fields-mc-nota":
  "height": !!int |-
    354
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - Requested options: car_options
        datatype: checkboxes
        choices:
          - Sunroof
          - Automatic transmission
          - Heated seats
        none of the above: |
          Nothing ${ "at all" }
"fields-mc-with-showif":
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - "Do you like fruit?": likes_fruit
        datatype: yesnoradio
      - "What's your favorite fruit?": favorite_fruit
        show if: likes_fruit
      - "Favorite apple": favorite_apple
        datatype: radio
        shuffle: True
        choices:
          - Granny Smith
          - Empire
          - Fuji
          - Red Delicious
      - Options: car_options
        datatype: checkboxes
        choices:
          - Sunroof
          - Automatic transmission
          - Heated seats
        show if: likes_fruit
        none of the above: |
          Nothing ${ "at all" }
"fields-multiselect":
  "height": !!int |-
    346
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: multiselect
        choices:
          - apple
          - peach
          - pear
      - "What is your favorite fruit overall?": favorite_fruit
    ---
    question: |
      Thank you for your thoughts.
    subquestion: |
      % if likes_fruit['apple']:
      You like apples.
      % endif
      % if likes_fruit['peach']:
      You like peaches.
      % endif
      % if likes_fruit['pear']:
      You like pears.
      % endif
      Your favorite, though, is ${ favorite_fruit }.

      In Python, `likes_fruit` is
      `${ repr(likes_fruit) }`.
    mandatory: True
"fields-multiselect-rows":
  "height": !!int |-
    302
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: multiselect
        choices:
          - apple
          - peach
          - pear
        rows: 2
      - "What is your favorite fruit overall?": favorite_fruit
"fields-noyesmaybe":
  "height": !!int |-
    308
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please answer the following question.
    fields:
      - "Was Washington the first U.S. president?": washington_not_the_first_president
        datatype: noyesmaybe
"fields-raw":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": "question: |\n  Type HTML into both fields.\nfields:\n  - HTML: html_input\n\
    \    datatype: raw\n  - Non-HTML: text_input\n---\nmandatory: True\nquestion:\
    \ |\n  Result\nsubquestion: |\n  HTML:\n  \n  ${ html_input }\n  \n  Non-HTML:\n\
    \  \n  ${ text_input }"
"fields-yesno":
  "height": !!int |-
    396
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please provide the following information.
    fields:
      - "What is your favorite food?": favorite_food
      - note: Check which foods you like.
      - Apples: likes_apples
        datatype: yesno
      - Turnips: dislikes_turnips
        datatype: noyes
"fields-yesno-check-others":
  "height": !!int |-
    442
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please provide the following information.
    fields:
      - "What is your favorite food?": favorite_food
      - note: Check which foods you like.
      - Apples: likes_apples
        datatype: yesnowide
      - Turnips: likes_turnips
        datatype: yesnowide
      - Both: likes_both_foods
        datatype: yesnowide
        check others: True
"fields-yesno-check-others-list":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please provide the following information.
    fields:
      - "What is your favorite food?": favorite_food
      - note: Check which foods you like.
      - Apples: likes_apples
        datatype: yesno
      - Turnips: likes_turnips
        datatype: yesno
      - Both: likes_both_foods
        datatype: yesno
        check others:
          - likes_turnips
          - likes_apples
      - note: Check which rocks you like.
      - Granite: likes_granite
        datatype: yesno
      - Obsidian: likes_obsidian
        datatype: yesno
      - I like both of these rocks: likes_both_rocks
        datatype: yesno
        check others:
          - likes_granite
          - likes_obsidian
"fields-yesno-help":
  "height": !!int |-
    396
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please provide the following information.
    fields:
      - "What is your favorite food?": favorite_food
      - note: Check which foods you like.
      - Apples: likes_apples
        datatype: yesno
        help: Round fruit of a tree of the rose family
      - Turnips: dislikes_turnips
        datatype: noyes
        help: Round root with white flesh
"fields-yesno-uncheck-others":
  "height": !!int |-
    442
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please provide the following information.
    fields:
      - "What is your favorite food?": favorite_food
      - note: Check which foods you like.
      - Apples: likes_apples
        datatype: yesnowide
      - Turnips: likes_turnips
        datatype: yesnowide
      - Neither: dislikes_both_foods
        datatype: yesnowide
        uncheck others: True
"fields-yesno-uncheck-others-list":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please provide the following information.
    fields:
      - "What is your favorite food?": favorite_food
      - note: Check which foods you like.
      - Apples: likes_apples
        datatype: yesno
      - Turnips: likes_turnips
        datatype: yesno
      - Neither: dislikes_both_foods
        datatype: yesno
        uncheck others:
          - likes_turnips
          - likes_apples
      - note: Check which rocks you like.
      - Granite: likes_granite
        datatype: yesno
      - Obsidian: likes_obsidian
        datatype: yesno
      - I do not like these rocks: dislikes_both_rocks
        datatype: yesno
        uncheck others:
          - likes_granite
          - likes_obsidian
"fields-yesnomaybe":
  "height": !!int |-
    308
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please answer the following question.
    fields:
      - "Is Topeka the capital of Kansas?": topeka_is_capital_of_kansas
        datatype: yesnomaybe
"fields-yesnoradio":
  "height": !!int |-
    370
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please provide the following information.
    fields:
      - "Do you like apricots?": likes_apricots
        datatype: yesnoradio
      - "Do you like pineapple?": dislikes_pineapple
        datatype: noyesradio
"fields-yesnowide":
  "height": !!int |-
    318
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please provide the following information.
    fields:
      - note: Check which foods you like.
      - Peaches: likes_peaches
        datatype: yesnowide
      - Pears: dislikes_pears
        datatype: noyeswide
"file":
  "yaml": |-
    question: |
      Please upload a file
    fields:
      - File: the_file
        datatype: file
"file-types":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - static_file: DAStaticFile.using(filename='cow.jpg')
    ---
    attachment:
      variable name: assembled_file
      filename: assembled_file
      content: |
        Hello world!
    ---
    question: |
      Upload a file
    fields:
      - File: uploaded_file
        datatype: file
    ---
    question: |
      What type of file do you want?
    choices:
      Static:
        code: |
          the_file = static_file
      Assembled:
        code: |
          the_file = assembled_file
      Upload:
        code: |
          the_file = uploaded_file
      Single:
        code: |
          the_file = uploaded_file[0]
    ---
    code: |
      email_sent = send_email(to=email_address,
        body="Here is your document",
        subject="Your document",
        attachments=the_file)
    ---
    code: |
      (the_path, the_mimetype) = path_and_mimetype(the_file)
    ---
    code: |
      button_list = [{True: 'Next', 'image': the_file}]
    ---
    field: menu_selection
    question: |
      Your document
    subquestion: |
      ### As image

      ${ the_file }

      ### As path

      `${ the_file.path() }`

      ### As url

      `${ the_file.url_for() }`
      [open](${ the_file.url_for() })

      ### As external url

      `${ the_file.url_for(external=True) }`
      [open](${ the_file.url_for(external=True) })

      ### As downloadable url

      `${ the_file.url_for(attachment=True) }`
      [open](${ the_file.url_for(attachment=True) })

      ### As temporary url

      `${ the_file.url_for(temporary=True, seconds=500) }`
      [open](${ the_file.url_for(temporary=True, seconds=500) })

      ### As temporary downloadable url

      `${ the_file.url_for(temporary=True, seconds=500, attachment=True) }`
      [open](${ the_file.url_for(temporary=True, seconds=500, attachment=True) })

      ### From url_of()

      `${ url_of(the_file) }`
      [open](${ url_of(the_file) })

      ### From url_of(), external

      `${ url_of(the_file, _external=True) }`
      [open](${ url_of(the_file, _external=True) })

      ### From url_of(), downloadable

      `${ url_of(the_file, _attachment=True) }`
      [open](${ url_of(the_file, _attachment=True) })

      ### From path_and_mimetype()

      `${ the_path }`

      `${ the_mimetype }`
    buttons:
      code: button_list
    ---
    mandatory: True
    need:
      - menu_selection
    question: |
      All done
    buttons:
      - Restart: restart
"fix-punctuation":
  "height": !!int |-
    288
  "width": !!int |-
    488
  "yaml": |-
    mandatory: true
    question: |
      What to do in court.
    subquestion: |
      Tell the court,
      "Please grant my petition.
      ${ fix_punctuation(rationale) }"
    ---
    question: |
      Why is the other side wrong?
    subquestion: |
      Please be brief.
    fields:
      - no label: rationale
        input type: area
        hint: |
          The teapot was not broken
          and it was broken before he
          gave it to me.
"flash":
  "height": !!int |-
    185
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    decoration: coins
    question: |
      The interview is complete.
    script: |
      <script>
        flash("Hello, user!")
        flash("Lookout, user!", "danger")
      </script>
"floating-label":
  "height": !!int |-
    196
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Your sign
    fields:
      - "What is your Zodiac sign?": target_variable
        floating label: True
"flushleft":
  "yaml": "mandatory: True\nquestion: |\n  Here is your document.\nsubquestion: |\n\
    \  It demonstrates the flush left environment.\nattachments:\n  - name: A test\
    \ document\n    filename: test_document\n    content: |\n      This line is indented.\n\
    \      \n      This line is also indented.\n      \n      [FLUSHLEFT] This line\
    \ is not indented. [NEWLINE] Nor is this line."
"flushright":
  "yaml": "mandatory: True\nquestion: |\n  Here is your document.\nsubquestion: |\n\
    \  It demonstrates the flush right environment.\nattachments:\n  - name: A test\
    \ document\n    filename: test_document\n    metadata:\n      FirstHeaderLeft:\
    \ Test me test me\n      FirstHeaderCenter: Test me test me\n      FirstHeaderRight:\
    \ |\n        Example, LLP [BR]\n        124 Main Street, Suite 1500 [BR]\n   \
    \     Philadelphia, PA 19102\n      HeaderLeft: Test me test me\n      HeaderCenter:\
    \ Test me test me\n      HeaderRight: |\n        Example, LLP [BR]\n        123--24\
    \ Main Street, Suite 1500 [BR]\n        Philadelphia, PA 19102\n      FirstFooterLeft:\
    \ Test me test me\n      FirstFooterCenter: Test me test me\n      FirstFooterRight:\
    \ |\n        Example, LLP [BR]\n        124 Main Street, _Suite_ 1500 [BR]\n \
    \       Philadelphia, PA 19102\n      FooterLeft: Test me test me\n      FooterCenter:\
    \ Test me test me\n      FooterRight: |\n        Example, LLP [BR]\n        123\
    \ Main Street, Suite 1500 [BR]\n        Philadelphia, PA 19102\n      SingleSpacing:\
    \ True\n    content: |\n      This \"line\" is to the left.\n      \n      This\
    \ line is \"also\" to the left.\n      \n      [FLUSHRIGHT] This line is \"flush\"\
    \ right. [NEWLINE] So is _this_ line.\n\n      [INDENTBY 1in] [BORDER] This **line**\
    \ is indented. [NEWLINE] So is this line.\n\n      [BORDER] [INDENTBY 2in 1in]\
    \ This is a very \"confined\" paragraph\n      that is not to be taken lightly---because\
    \ it's so absolutely\n      constrained beyond any belief or any person's imagination\
    \ in the\n      whole wide world under the sun and the moon and the barn down\n\
    \      the street.\n\n      fruit| price\n      -----|-----:\n      apple|2.05\n\
    \      pear|1.37\n      orange|3.09\n\n      Lorem ipsum \"dolor\" sit amet from\
    \ 1--2, consectetur adipiscing elit. Nunc\n      quis odio a dolor rhoncus elementum\
    \ ut sed ex. Lorem ipsum dolor\n      sit amet, consectetur adipiscing elit. Aenean\
    \ blandit massa nec\n      ante rutrum, nec interdum ipsum auctor. Pellentesque\
    \ posuere\n      rhoncus pulvinar. Cras rutrum---if I may say---tellus sit amet\
    \ elit euismod, quis\n      viverra metus dignissim. Aenean id convallis eros.\
    \ Vestibulum\n      tristique, erat non ornare rhoncus, lectus urna consectetur\n\
    \      urna, sit amet rhoncus magna est a orci. Sed sed euismod tortor.\n\n  \
    \    [BORDER] Aliquam nec turpis massa. Integer non vulputate nibh. Integer mi\n\
    \      justo, sagittis eget erat quis, porta auctor purus. Quisque ac\n      rutrum\
    \ nibh. Duis id massa faucibus, facilisis mauris sit amet,\n      congue nisl.\
    \ Duis vel odio vehicula, sodales tellus ut, tempor\n      ipsum. Morbi tempor\
    \ aliquam gravida. Aliquam tortor est,\n      tincidunt sed libero et, vehicula\
    \ ullamcorper tellus. Curabitur\n      quis magna erat. Vivamus euismod gravida\
    \ ante, eu congue arcu\n      ultricies ac. Praesent porta euismod urna non sodales.\n\
    \      [NEWPAR]\n      Phasellus orci diam, sodales a elementum ac, gravida sit\
    \ amet\n      erat. Nunc imperdiet malesuada magna, nec laoreet tortor dapibus\n\
    \      in. Praesent nulla elit, rhoncus vitae tincidunt non, rutrum ut\n     \
    \ justo. Suspendisse aliquam sollicitudin porttitor. In suscipit,\n      magna\
    \ sit amet eleifend iaculis, nisl elit sodales diam, dapibus\n      rutrum odio\
    \ augue sed velit. Ut ullamcorper, quam at dapibus\n      hendrerit, nibh libero\
    \ vulputate massa, non pretium nisl libero\n      at enim. Donec vestibulum sapien\
    \ purus, et mattis nunc ultricies\n      non. Morbi velit lacus, ornare a lectus\
    \ sed, auctor accumsan\n      ante. Donec imperdiet quis velit non varius. Suspendisse\
    \ in\n      ultricies massa, id venenatis arcu.\n\n      In vitae erat luctus\
    \ urna rutrum convallis et id nibh. Fusce\n      suscipit lacus at ligula mattis,\
    \ vitae maximus nunc\n      ultrices. Praesent pellentesque nulla sem. Donec rhoncus\
    \ leo\n      velit. Ut nec dui accumsan, commodo elit ac, maximus\n      lacus.\
    \ Curabitur malesuada tortor augue, quis mattis augue\n      aliquet vel. Mauris\
    \ gravida orci at neque dictum\n      scelerisque. Quisque turpis quam, dignissim\
    \ ut augue quis,\n      euismod placerat nisi. Donec convallis mollis varius.\
    \ Fusce\n      posuere rutrum risus vel porta. Curabitur erat diam, semper vel\n\
    \      condimentum vitae, fringilla non neque. Etiam nec nunc id est\n      pharetra\
    \ dignissim. Nam condimentum nibh sit amet erat mattis\n      suscipit vitae vel\
    \ eros. Donec eu pellentesque arcu, vitae\n      euismod tortor. Aliquam accumsan\
    \ nulla aliquam diam ultricies\n      venenatis.\n\n      Cras mattis tellus neque,\
    \ ut congue mi scelerisque eget. Cras\n      finibus tincidunt augue, ut rutrum\
    \ risus vehicula vel. Praesent\n      fermentum tortor posuere feugiat interdum.\
    \ Ut turpis arcu,\n      sagittis vitae odio vel, gravida cursus urna. Suspendisse\n\
    \      dignissim tortor id iaculis tincidunt. Nulla\n      facilisi. Suspendisse\
    \ lacinia nisl interdum, egestas turpis non,\n      fringilla felis."
"font-awesome":
  "height": !!int |-
    194
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    decoration: chart-bar
    question: |
      Third quarter metrics
    subquestion: |
      We are making more money
      :far-fa-money-bill-alt: than
      we did in the second quarter.

      So you can sleep well tonight! :bed:
"for_fruit":
  "height": !!int |-
    130
  "width": !!int |-
    488
  "yaml": |-
    code: |
      fruit_list = ['peaches', 'pears', 'apricots']
    ---
    question: |
      Summary of fruit
    subquestion: |
      % for fruit in fruit_list:
      I assume you like ${ fruit }.
      % endfor
    mandatory: True
"force-ask":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      if user_is_communist and user_reconsidering_communism:
        user_reconsidering_communism = False
        force_ask('user_is_communist')
"force-ask-forget-prior":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: First page
    subquestion: |
      [Go to second page](${ url_action('second_page') })
    ---
    question: Second page
    subquestion: |
      [Go to third page](${ url_action('third_page') })
    continue button field: second_page
    ---
    question: Third page
    subquestion: |
      [Ask about food](${ url_action('food_preferences') })

      [Ask about food with forget prior](${ url_action('food_preferences_forget_prior') })
    continue button field: third_page
    ---
    #event: food_preferences
    code: |
      favorite_fruit
      favorite_vegetable
      food_preferences = True
      #force_ask('favorite_fruit', 'favorite_vegetable')
    ---
    event: food_preferences_forget_prior
    code: |
      force_ask('favorite_fruit', 'favorite_vegetable', forget_prior=True)
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Favorite fruit: favorite_fruit
    ---
    question: |
      What is your favorite vegetable?
    fields:
      - Favorite vegetable: favorite_vegetable
"force-ask-full":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Are you a communist?
    yesno: user_is_communist
    ---
    mandatory: True
    code: |
      if user_is_communist and user_reconsidering_communism:
        user_reconsidering_communism = False
        force_ask('user_is_communist')
    ---
    question: |
      I suggest you reconsider your
      answer.
    field: user_reconsidering_communism
    ---
    question: |
      % if user_is_communist:
      I am referring your case to
      Mr. McCarthy.
      % else:
      I am glad you are a true
      American.
      % endif
    mandatory: True
"force-ask-multiple":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      favorite_fruit
      favorite_vegetable
      favorite_fungus
      told_to_review
      if not all_reviewed:
        all_reviewed = True
        force_ask('favorite_fruit', 'favorite_vegetable', 'favorite_fungus')
      final_screen
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Favorite fruit: favorite_fruit
    ---
    question: |
      What is your favorite vegetable?
    fields:
      - Favorite vegetable: favorite_vegetable
    ---
    question: |
      What is your favorite fungus?
    fields:
      - Favorite: favorite_fungus
    ---
    question: |
      Please verify your answers.
    subquestion: |
      I will ask each question again.
      Make any changes that you think
      are necessary.
    field: told_to_review
    ---
    event: final_screen
    question: |
      Thank you.
    subquestion: |
      You like
      ${ favorite_fruit },
      ${ favorite_vegetable },
      and
      ${ favorite_fungus }.
    ---
    code: |
      all_reviewed = False
"force-gather":
  "height": !!int |-
    104
  "width": !!int |-
    488
  "yaml": |-
    initial: True
    code: |
      process_action()
    ---
    event: gather_it
    code: |
      force_gather('favorite_food')
"forget-prior":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: First page
    subquestion: |
      [Go to second page](${ url_action('second_page') })
    ---
    question: Second page
    subquestion: |
      [Go to third page](${ url_action('third_page') })
    continue button field: second_page
    ---
    question: Third page
    subquestion: |
      [Go to fourth page](${ url_action('fourth_page') })

      [Go to fourth page with forget prior](${ url_action('fourth_page', _forget_prior=True) })
    continue button field: third_page
    ---
    question: Fourth page
    continue button field: fourth_page
"forget-result-of":
  "height": !!int |-
    260
  "width": !!int |-
    488
  "yaml": |-
    id: favorite_food stage 2
    question: |
      Ok, are any of these your favorite food?
    choices:
      - Strawberries:
          code: |
            favorite_food = 'strawberries'
      - Grapes:
          code: |
            favorite_food = 'grapes'
      - Kiwi:
          code: |
            favorite_food = 'kiwi'
      - Something else: continue
    ---
    id: favorite_food stage 1
    question: |
      What is your favorite food?
    choices:
      - Apples:
          code: |
            favorite_food = 'apples'
      - Oranges:
          code: |
            favorite_food = 'oranges'
      - Something else: continue
    ---
    event: reset_favorite_food
    code: |
      del favorite_food
      forget_result_of("favorite_food stage 1", "favorite_food stage 2")
"forget-result-of-mandatory":
  "height": !!int |-
    226
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      favorite_fruit = "apple"
      favorite_vegetable = "turnip"
    id: initialize
    ---
    mandatory: True
    code: |
      while not results_correct:
        favorites_asked
        favorites_reported
        del results_correct
        del favorites_asked
        del favorites_reported
        forget_result_of('initialize')
        re_run_logic()
      final_screen
    ---
    question: |
      Results
    subquestion: |
      You said your favorite fruit is
      ${ favorite_fruit } and
      your favorite vegetable is
      ${ favorite_vegetable }.

      Is this correct?
    yesno: results_correct
    ---
    question: |
      What are your favorites?
    fields:
      - Favorite fruit: favorite_fruit
      - Favorite vegetable: favorite_vegetable
    continue button field: favorites_asked
    ---
    question: |
      Your favorites
    subquestion: |
      You said your favorite fruit is
      ${ favorite_fruit } and
      your favorite vegetable is
      ${ favorite_vegetable }.

      Press Continue to reset.
    field: favorites_reported
    ---
    event: final_screen
    question: |
      We are done.
"formatting":
  "height": !!int |-
    350
  "width": !!int |-
    488
  "yaml": "question: |\n  Here is your document.\nsubquestion: |\n  It illustrates\
    \ some document-related\n  features.\nallow emailing: False\nattachments:\n  -\
    \ name: A test document\n    filename: test_document\n    valid formats:\n   \
    \   - pdf\n    metadata:\n      FooterCenter: |\n        [HYPHEN] [PAGENUM] [HYPHEN]\n\
    \    content: |\n      [BOLDCENTER] A Test Document [BR]\n      by John Doe\n\
    \      \n      ${ client } is entitled to\n      benefits plan ${ benefits }.\n\
    \n      Four score and seven years ago\n      our fathers brought forth on\n \
    \     this continent, a new nation,\n      conceived in Liberty, and\n      dedicated\
    \ to the proposition\n      that all men are created equal.\n\n      [FILE bluediamond.svg,\
    \ 0.5in]\n\n      Now we are engaged in a great\n      civil war, testing whether\
    \ that\n      nation, or any nation so\n      conceived and so dedicated,\n  \
    \    can long endure.\n\n      [PAGEBREAK]\n\n      Now we begin a new[EMDASH]and\n\
    \      very exciting[EMDASH]page.\n\n      We dare not forget today that\n   \
    \   we are the heirs of that first\n      revolution. Let the word go\n      forth\
    \ from this time and place,\n      to friend and foe alike, that\n      the torch\
    \ has been passed to\n      a new generation of\n      Americans [ENDASH] born\
    \ in this\n      century, tempered by war,\n      disciplined by a hard and\n\
    \      bitter peace, proud of our\n      ancient heritage, and unwilling\n   \
    \   to witness or permit the slow\n      undoing of those human rights\n     \
    \ to which this nation has\n      always been committed, and to\n      which we\
    \ are committed today\n      at home and around the world.\n\n      And yet our\
    \ distress comes from\n      no failure of substance. We are\n      stricken by\
    \ no plague of locusts.\n      Compared with the perils which\n      our forefathers\
    \ conquered,\n      because they believed and were\n      not afraid, we have\
    \ still much\n      to be thankful for. Nature still\n      offers her bounty\
    \ and human\n      efforts have multiplied it.\n      Plenty is at our doorstep,\
    \ but\n      a generous use of it languishes\n      in the very sight of the supply.\n\
    \n      # A new section\n\n      [ONEANDAHALFSPACING]\n\n      [NOINDENTATION]\n\
    \n      My Fellow Americans,\n\n      [INDENTATION]\n\n      I come before you\
    \ tonight as a\n      candidate for the Vice Presidency\n      and as a man whose\
    \ honesty\n      and -- and integrity has been\n      questioned.\n\n      Now,\
    \ the usual political thing\n      to do when charges are made\n      against\
    \ you is to either ignore\n      them or to deny them without\n      giving details.\
    \ I believe we've\n      had enough of that in the\n      United States, particularly\
    \ with\n      the present Administration in\n      Washington, D.C. To me the\n\
    \      office of the Vice Presidency\n      of the United States is a great\n\
    \      office, and I feel that the\n      people have got to have\n      confidence\
    \ in the integrity\n      of the men who run for that\n      office and who might\
    \ obtain it.\n      \n      # A newer section\n\n      [SINGLESPACING]\n\n   \
    \   Over a century ago Washington\n      laid the corner stone of the\n      Capitol\
    \ in what was then\n      little more than a tract of\n      wooded wilderness\
    \ here beside\n      the Potomac. We now find it\n      necessary to provide by\
    \ great\n      additional buildings for the\n      business of the government.\n\
    mandatory: True"
"forward-chaining":
  "yaml": |-
    objects:
      pet: Thing
"forward-chaining-assumptions":
  "yaml": |-
    generic object: DAObject
    question: |
      Does ${ x } eat flies?
    yesno: x.eats_flies
"fruit-template-alt-1":
  "height": !!int |-
    218
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Here is your document.
    attachment:
      pdf template file: fruit_template.pdf
      fields:
        - favorite_fruit: ${ favorite_fruit }
        - favorite_veggie: ${ favorite_veggie }
        - favorite_legume: ${ favorite_legume }
        - favorite_fungus: ${ favorite_fungus }
"fruit-template-alt-2":
  "height": !!int |-
    218
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Here is your document.
    attachment:
      pdf template file: fruit_template.pdf
      field variables:
        - favorite_fruit
        - favorite_veggie
        - favorite_legume
        - favorite_fungus
"function":
  "height": !!int |-
    131
  "width": !!int |-
    488
  "yaml": |-
    question: |
      The word ${ color } becomes
      ${ capitalize(color) } when
      passed through the
      `capitalize()` function.
    mandatory: True
"gather":
  "yaml": |-
    modules:
      - docassemble.base.legal
    ---
    objects:
      - witness: PartyList
    ---
    mandatory: True
    code: |
      witness.gathered = witness.gather()
    ---
    question: |
      What is the name of the
      ${ ordinal(i) } witness?
    fields:
      - First Name: witness[i].name.first
      - Last Name: witness[i].name.last
    ---
    question: |
      Were there any other witnesses?
    yesno: witness.there_is_another
    ---
    # question: |
    #   Were there any witnesses?
    # yesno: witness.there_are_any
    # ---
    mandatory: True
    question: |
      Witnesses
    subquestion: |
      % for person in witness:
      ${ person } is a witness.
      % endfor
"gather-another":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: |
          DAList.using(
            auto_gather=False,
            gathered=True)
    comment: |
      These attributes disable the automatic
      gathering system.
    ---
    mandatory: True
    code: |
      num_fruits = 0
      more_fruits = True
    ---
    mandatory: True
    code: |
      while more_fruits:
        fruit[num_fruits]
        num_fruits += 1
        del more_fruits
    ---
    question: |
      Are there more fruits?
    yesno: more_fruits
    ---
    question: |
      What's the ${ ordinal(i) } fruit?
    fields:
      - Fruit: fruit[i]
    ---
    mandatory: True
    question: |
      Fruits
    subquestion: |
      The fruits are:

      % for item in fruit:
      * ${ item }
      % endfor
"gather-dict":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: DADict
    ---
    mandatory: True
    question: |
      There
      ${ fruit.does_verb("is") }
      ${ fruit.number_as_word() }
      fruits in all.
    subquestion: |
      % for item in fruit:
      The fruit ${ item } has
      ${ fruit[item] } seeds.
      % endfor
    ---
    code: |
      fruit.there_are_any = True
    ---
    question: |
      What fruit should be added to
      the database?
    fields:
      - Fruit: fruit.new_item_name
    ---
    question: |
      How many seeds does
      ${ indefinite_article(noun_singular(i)) }
      have?
    fields:
      - Number of seeds: fruit[i]
        datatype: integer
        min: 0
    ---
    question: |
      So far, the fruits in the database
      include ${ fruit }.  Are there
      any others?
    yesno: fruit.there_is_another
"gather-dict-number":
  "yaml": |-
    objects:
      - fruit: DADict
    ---
    mandatory: True
    code: |
      fruit.ask_number = True
    ---
    mandatory: True
    question: |
      There
      ${ fruit.does_verb("is") }
      ${ fruit.number_as_word() }
      fruits in all.
    subquestion: |
      % for item in fruit:
      The fruit ${ item } has
      ${ fruit[item] } seeds.
      % endfor
    ---
    question: |
      How many fruit should be added
      to the database?
    fields:
      - Number: fruit.target_number
        datatype: integer
        min: 0
    ---
    question: |
      What fruit should be added to
      the database?
    fields:
      - Fruit: fruit.new_item_name
"gather-dict-object":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": "objects:\n  - pet: DADict.using(object_type=DAObject)\n---\nmandatory:\
    \ True\nquestion: |\n  You have ${ pet.number_as_word() }\n  pets.\nsubquestion:\
    \ |\n  % for item in pet:\n  Your pet ${ item } named\n  ${ pet[item].name } has\
    \ \n  ${ pet[item].feet } feet.\n  % endfor\n---\nquestion: |\n  Do you have any\
    \ pets?\nyesno: pet.there_are_any\n---\nquestion: |\n  What kind of pet do you\
    \ have?\nfields:\n  - Type of pet: pet.new_item_name\n---\nquestion: |\n  Describe\
    \ your pet ${ i }.\nfields:\n  - Name: pet[i].name\n  - Number of feet: pet[i].feet\n\
    \    datatype: integer\n    min: 0\n---\nquestion: |\n  So far, you have told\
    \ me about your\n  ${ pet }.  Do you have any other\n  pets?\nyesno: pet.there_is_another"
"gather-dict-value":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: DADict
    ---
    mandatory: True
    question: |
      There are ${ fruit.number_as_word() }
      fruits in all.
    subquestion: |
      % for item in fruit:
      The fruit ${ item } has
      ${ fruit[item] } seeds.
      % endfor
    ---
    code: |
      fruit.there_are_any = True
    ---
    question: |
      What fruit should be added to
      the database?
    fields:
      - Fruit: fruit.new_item_name
      - Number of seeds: fruit.new_item_value
        datatype: integer
        min: 0
    ---
    question: |
      So far, the fruits in the database
      include ${ fruit }.  Are there
      any others?
    yesno: fruit.there_is_another
"gather-fruit":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: DAList
    ---
    mandatory: True
    question: |
      There are ${ fruit.number_as_word() }
      fruits in all.
    subquestion: |
      The fruits are ${ fruit }.
    ---
    question: |
      Are there any fruit that you would like
      to add to the list?
    yesno: fruit.there_are_any
    ---
    question: |
      What fruit should be added to the list?
    fields:
      - Fruit: fruit[i]
    ---
    question: |
      So far, the fruits include ${ fruit }.
      Are there any others?
    yesno: fruit.there_is_another
"gather-fruit-at-least-two":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: DAList.using(minimum_number=2)
"gather-fruit-gather":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      fruit.gather(minimum=1)
    ---
    question: |
      What fruit should be added to the list?
    fields:
      - Fruit: fruit[i]
    ---
    question: |
      So far, the fruits include
      ${ fruit }.  Are there any others?
    yesno: fruit.there_is_another
    ---
    mandatory: True
    question: |
      The fruits are ${ fruit }.
"gather-fruit-incomplete":
  "yaml": |-
    objects:
      - fruit: DAList
    ---
    mandatory: True
    question: |
      There are ${ fruit.number_as_word() }
      fruits in all.
    subquestion: |
      The fruits are ${ fruit }.
"gather-fruit-number":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: DAList.using(ask_number=True)
    ---
    question: |
      How many fruits are there?
    fields:
      - Number: fruit.target_number
        datatype: integer
        min: 2
    ---
    question: |
      What is the name of the
      ${ ordinal(i) } fruit?
    subquestion: |
      % if fruit.number_gathered() > 0:
      So far, you have mentioned ${ fruit }.
      % endif
    fields:
      - Fruit: fruit[i]
    ---
    mandatory: True
    question: |
      There are ${ fruit.number() }
      fruits in all.
    subquestion: |
      The fruits are ${ fruit }.
"gather-list-email-recipients":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - recipient: |
          DAEmailRecipientList.using(
            there_are_any=True)
    ---
    mandatory: True
    question: |
      The list of recipients
    subquestion: |
      % for x in recipient:
      * ${ x }
      % endfor
    ---
    question: |
      What is the ${ ordinal(i) } e-mail
      address?
    fields:
      - E-mail: recipient[i].address
        datatype: email
    ---
    question: |
      Would you like to add another
      e-mail recipient?
    yesno: recipient.there_is_another
"gather-list-friend-bad-order":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - friend: |
          DAList.using(
            object_type=Individual,
            there_are_any=True)
    ---
    mandatory: True
    question: |
      Your friends
    subquestion: |
      % for x in friend:
      * ${ x } likes
      ${ noun_plural(x.favorite_animal).lower() }
      and is
      ${ x.age_in_years() }
      years old.
      % endfor
    ---
    question: |
      What is the name of your ${ ordinal(i) }
      friend?
    fields:
      - First Name: friend[i].name.first
    ---
    question: |
      What is
      ${ friend[i].possessive('birthdate') }?
    fields:
      - Birthdate: friend[i].birthdate
        datatype: date
    ---
    question: |
      What is
      ${ friend[i].possessive('favorite animal') }?
    fields:
      - Favorite animal: friend[i].favorite_animal
    ---
    question: |
      Do you have any other friends?
    yesno: friend.there_is_another
"gather-list-friend-good-order":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - friend: |
          DAList.using(
            object_type=Individual,
            complete_attribute='complete',
            there_are_any=True)
    ---
    mandatory: True
    question: |
      Your friends
    subquestion: |
      % for x in friend:
      * ${ x } likes
      ${ noun_plural(x.favorite_animal).lower() }
      and is
      ${ x.age_in_years() }
      years old.
      % endfor
    ---
    code: |
      friend[i].name.first
      friend[i].birthdate
      friend[i].favorite_animal
      friend[i].complete = True
    ---
    question: |
      What is the name of your ${ ordinal(i) }
      friend?
    fields:
      - First Name: friend[i].name.first
    ---
    question: |
      What is
      ${ friend[i].possessive('birthdate') }?
    fields:
      - Birthdate: friend[i].birthdate
        datatype: date
    ---
    question: |
      What is
      ${ friend[i].possessive('favorite animal') }?
    fields:
      - Favorite animal: friend[i].favorite_animal
    ---
    question: |
      Do you have any other friends?
    yesno: friend.there_is_another
"gather-list-friend-good-order-2":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - friend: |
          DAList.using(
            object_type=Individual,
            complete_attribute=['name.first', 'birthdate', 'favorite_animal'],
            there_are_any=True)
    ---
    mandatory: True
    question: |
      Your friends
    subquestion: |
      % for x in friend:
      * ${ x } likes
      ${ noun_plural(x.favorite_animal).lower() }
      and is
      ${ x.age_in_years() }
      years old.
      % endfor
    ---
    question: |
      What is the name of your ${ ordinal(i) }
      friend?
    fields:
      - First Name: friend[i].name.first
    ---
    question: |
      What is
      ${ friend[i].possessive('birthdate') }?
    fields:
      - Birthdate: friend[i].birthdate
        datatype: date
    ---
    question: |
      What is
      ${ friend[i].possessive('favorite animal') }?
    fields:
      - Favorite animal: friend[i].favorite_animal
    ---
    question: |
      Do you have any other friends?
    yesno: friend.there_is_another
"gather-list-objects":
  "height": !!int |-
    424
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - location: |
          DAList.using(
            object_type=Address,
            there_are_any=True)
    ---
    mandatory: True
    question: |
      The locations
    subquestion: |
      % for loc in location:
      * ${ loc }
      % endfor
    ---
    question: |
      What is the address of the
      ${ ordinal(i) } location?
    fields:
      - Address: location[i].address
      - Unit: location[i].unit
        required: False
      - City: location[i].city
      - State: location[i].state
        code: |
          states_list()
      - Zip: location[i].zip
        required: False
    ---
    question: |
      Would you like to add another location?
    yesno: location.there_is_another
"gather-manual-gathered":
  "height": !!int |-
    96
  "width": !!int |-
    488
  "yaml": |-
    code: |
      fruit.append('apple', 'orange', 'grape')
      fruit.gathered = True
    ---
    mandatory: True
    code: |
      fruit.auto_gather = False
    ---
    mandatory: True
    question: |
      The fruits are ${ fruit }.
"gather-manual-gathered-object":
  "yaml": |-
    objects:
      - fruit: DAList
    ---
    mandatory: True
    code: |
      fruit.object_type = DAObject
      fruit.complete_attribute = 'complete'
    ---
    code: |
      need(fruit[i].name)
      need(fruit[i].seeds)
      fruit[i].complete = True
    ---
    question: |
      Tell me about the first fruit.
    fields:
      - Name: fruit[0].name
      - Seeds: fruit[0].seeds
        datatype: integer
        min: 0
    ---
    question: |
      Tell me about another fruit.
    fields:
      - Name: fruit[i].name
      - Seeds: fruit[i].seeds
        datatype: integer
        min: 0
    ---
    question: |
      Do you know about any other fruit?
    yesno: fruit.there_is_another
    ---
    question: |
      Do you know about any fruit?
    yesno: fruit.there_are_any
    ---
    mandatory: True
    question: |
      Your knowledge of fruit.
    subquestion: |
      % for item in fruit:
      ${ item.name } has
      ${ item.seeds } seeds.
      % endfor
"gather-manual-gathered-object-simple":
  "yaml": |-
    objects:
      - fruit: DAList
    ---
    mandatory: True
    code: |
      fruit.object_type = DAObject
      fruit.complete_attribute = 'name'
    ---
    question: |
      Tell me about the first fruit.
    fields:
      - Name: fruit[0].name
      - Seeds: fruit[0].seeds
        datatype: integer
        min: 0
    ---
    question: |
      Tell me about another fruit.
    fields:
      - Name: fruit[i].name
      - Seeds: fruit[i].seeds
        datatype: integer
        min: 0
    ---
    question: |
      Do you know about any other fruit?
    yesno: fruit.there_is_another
    ---
    question: |
      Do you know about any fruit?
    yesno: fruit.there_are_any
    ---
    mandatory: True
    question: |
      Your knowledge of fruit.
    subquestion: |
      % for item in fruit:
      ${ item.name } has
      ${ item.seeds } seeds.
      % endfor
"gather-set":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: DASet
    ---
    mandatory: True
    question: |
      There are ${ fruit.number_as_word() }
      fruits in all.
    subquestion: |
      The fruit include ${ fruit }.
    ---
    question: |
      Should there be any fruits
      in the set?
    yesno: fruit.there_are_any
    ---
    question: |
      What fruit should be added to
      the set?
    fields:
      - Fruit: fruit.new_item
    ---
    question: |
      So far, the fruits in the set
      include ${ fruit }.  Are there
      any others?
    yesno: fruit.there_is_another
"gather-set-number":
  "yaml": |-
    objects:
      - fruit: DASet
    ---
    mandatory: True
    code: |
      fruit.ask_number = True
    ---
    mandatory: True
    question: |
      There are ${ fruit.number_as_word() }
      fruits in all.
    subquestion: |
      The fruit include ${ fruit }.
    ---
    question: |
      How many fruit should be added
      to the set?
    fields:
      - Number: fruit.target_number
        datatype: integer
        min: 0
    ---
    question: |
      What fruit should be added to
      the set?
    fields:
      - Fruit: fruit.new_item
"gather-set-object":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: DASet
      - my_favorites: DASet
      - apple: DAObject
      - orange: DAObject
      - pear: DAObject
      - plum: DAObject
      - grape: DAObject
    ---
    mandatory: True
    code: |
      apple.name = "apples"
      orange.name = "oranges"
      pear.name = "pears"
      plum.name = "plums"
      grape.name = "grapes"
      my_favorites.add(apple, pear)
      my_favorites.gathered = True
    ---
    mandatory: True
    question: |
      There are ${ fruit.number_as_word() }
      fruits in all.
    subquestion: |
      % if fruit.number():
      The fruits you like include ${ fruit }.
      % endif

      % if fruits_in_common.number():
      The fruits we both like are
      ${ fruits_in_common }.
      % endif
    ---
    code: |
      fruits_in_common = fruit.intersection(my_favorites)
    ---
    question: |
      Do you like ${ apple }, ${ orange },
      ${ pear }, ${ plum }, or ${ grape }?
    yesno: fruit.there_are_any
    ---
    question: |
      Pick a fruit that you like.
    fields:
      - Fruit: fruit.new_item
        datatype: object
        choices:
          - apple
          - orange
          - pear
          - plum
          - grape
    ---
    question: |
      So far, you have indicated you like
      ${ fruit }.  Are there any other
      fruits you like?
    yesno: fruit.there_is_another
"gather-simple":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: DAList
    ---
    question: |
      How many fruits are there?
    fields:
      - Number: number_of_fruits
        datatype: integer
        min: 2
    ---
    question: |
      What's the ${ ordinal(i) } fruit?
    fields:
      - Fruit: fruit[i]
    ---
    mandatory: True
    question: |
      Fruits
    subquestion: |
      The fruits are:

      % for index in range(0, number_of_fruits):
      * ${ fruit[index] }
      % endfor
"generators":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - bus: Thing
      - car: Thing
    ---
    code: |
      bus.name.text = 'bus'
      car.name.text = 'car'
      bus.help_text = 'An inexpensive form of public transportation.'
      car.help_text = 'A vehicle you can have all to yourself.'
      bus.image = 'bus-alt'
      car.image = 'car-side'
    ---
    question: |
      How would you prefer to travel?
    fields:
      - no label: transportation_method
        datatype: object_radio
        choices:
          - bus
          - car
        object labeler: |
          lambda y: capitalize(y)
        help generator: |
          lambda y: y.help_text
        image generator: |
          lambda y: y.image
"generic-object":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    generic object: Individual
    question: |
      Does ${ x } like cats?
    yesno: x.likes_cats
"generic-object-ein":
  "height": !!int |-
    246
  "width": !!int |-
    488
  "yaml": |-
    generic object: Organization
    question: |
      What is the EIN of ${ x }?
    fields:
      - EIN: x.ein
    ---
    generic object: Organization
    code: |
      if x.tax_status == '501c3':
        x.ein = retrieve_ein(x.name)
"generic-object-phone-number":
  "height": !!int |-
    338
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - grantor: Individual
      - grantee: Individual
      - trustee: Individual
    ---
    generic object: Individual
    question: |
      What is
      ${ x.object_possessive('name') }?
    fields:
      - First Name: x.name.first
        default: ${ x.first_name_hint() }
      - Middle Name: x.name.middle
        required: False
      - Last Name: x.name.last
        default: ${ x.last_name_hint() }
      - Suffix: x.name.suffix
        required: False
        code: |
          name_suffix()
"geocode":
  "height": !!int |-
    392
  "width": !!int |-
    488
  "yaml": "question: |\n  Enter an address\nfields:\n  - Address: the_address.address\n\
    \  - Unit: the_address.unit\n    required: False\n  - City: the_address.city\n\
    \  - State: the_address.state\n    code: states_list()\n  - Zip: the_address.zip\n\
    \    required: False\n---\nmandatory: True\ncode: |\n  the_address.geocode()\n\
    ---\nmandatory: True\nquestion: |\n  Information about your address\nsubquestion:\
    \ |\n  The address you provided is:\n    \n  ${ the_address }\n\n  As JSON, this\
    \ is:\n\n  ${ indent(json.dumps(the_address.as_serializable(), indent=2)) }\n\n\
    \  % if the_address.was_geocoded_successfully():\n  The normalized version is:\n\
    \n  ${ the_address.norm }\n\n  As JSON, this is:\n\n  ${ indent(json.dumps(the_address.norm.as_serializable(),\
    \ indent=2)) }\n  \n  The long-form normalized\n  version is:\n\n  ${ the_address.norm_long\
    \ }\n\n  As JSON, this is:\n\n  ${ indent(json.dumps(the_address.norm_long.as_serializable(),\
    \ indent=2)) }\n\n  The latitude and longitude are\n  ${ the_address.location.latitude\
    \ }\n  and\n  ${ the_address.location.longitude }.\n\n  % if hasattr(the_address,\
    \ 'neighborhood'):\n  The address is located in the\n  ${ the_address.neighborhood\
    \ }\n  neighborhood.\n  % endif\n\n  % if hasattr(the_address, 'county'):\n  The\
    \ address is located in\n  ${ the_address.county }.\n  % endif\n\n  ${ map_of(the_address)\
    \ }\n\n  % else:\n  The address could not be\n  geocoded.\n  % endif"
"geocode-from-address":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "objects:\n  - the_address: Address\n---\nquestion: |\n  Enter an address\n\
    fields:\n  - Address: address_one_line\n---\nmandatory: True\ncode: |\n  the_address.geocode(address_one_line)\n\
    ---\nmandatory: True\nquestion: |\n  Information about your address\nsubquestion:\
    \ |\n  % if the_address.was_geocoded_successfully():\n  The address you provided\
    \ is:\n    \n  ${ the_address }\n\n  The address is located in\n  ${ the_address.city\
    \ }.\n\n  The latitude and longitude are\n  ${ the_address.location.latitude }\n\
    \  and\n  ${ the_address.location.longitude }.\n  % else:\n  That address could\
    \ not be geocoded.\n  % endif"
"geocode-reset":
  "height": !!int |-
    392
  "width": !!int |-
    488
  "yaml": "objects:\n  - the_address: Address\n---\nmandatory: True\ncode: |\n  saw_address\n\
    \  saw_address_again\n  final_screen\n---\nundefine:\n  - the_address.county\n\
    question: |\n  Enter an address\nfields:\n  - Address: the_address.address\n \
    \ - Unit: the_address.unit\n    required: False\n  - City: the_address.city\n\
    \  - State: the_address.state\n    code: states_list()\n  - Zip: the_address.zip\n\
    \    required: False\n---\nquestion: |\n  In what county is ${ the_address }\n\
    \  located?\nfields:\n  - County: the_address.county\n---\nsets: the_address.county\n\
    code: |\n  the_address.geocode(reset=True)\n---\nquestion: |\n  Information about\
    \ your address\nsubquestion: |\n  The address you provided is:\n    \n  ${ the_address\
    \ }\n\n  The address is located in\n  ${ the_address.county }.\ncontinue button\
    \ field: saw_address\n---\ncode: |\n  saw_address_again = True\n  undefine('saw_address')\n\
    \  force_ask('the_address.address')\n---\nevent: final_screen\nquestion: |\n \
    \ Done with the interview"
"get-default-timezone":
  "height": !!int |-
    96
  "width": !!int |-
    488
  "yaml": |-
    question: |
      The default time zone is
      ${ get_default_timezone() }.
    mandatory: True
"get-docx-variables":
  "yaml": |-
    objects:
      - docx_file: DAStaticFile.using(filename="data/templates/letter_template.docx")
    ---
    mandatory: True
    question: |
      The variables in the DOCX file
    subquestion: |
      The following variables were found in the
      [letter_template.docx] file:

      `${ repr(docx_file.get_docx_variables()) }`

      [letter_template.docx]: https://github.com/jhpyle/docassemble/blob/master/docassemble_base/docassemble/base/data/templates/letter_template.docx
"get-pdf-fields":
  "yaml": |-
    objects:
      - pdf_file: DAStaticFile.using(filename="data/templates/fruit_template.pdf")
    ---
    mandatory: True
    question: The field names in the PDF file
    subquestion: |
      The field names in the PDF file [fruit_template.pdf] are:

      `${ repr(pdf_file.get_pdf_fields()) }`

      [fruit_template.pdf]: https://github.com/jhpyle/docassemble/blob/master/docassemble_base/docassemble/base/data/templates/fruit_template.pdf
"get-pdf-fields-2":
  "yaml": |-
    objects:
      - pdf_file: DAStaticFile.using(filename="data/templates/sample-form-different-export-values.pdf")
    ---
    mandatory: True
    question: The field names in the PDF file
    subquestion: |
      The field names in the PDF file [sample-form-different-export-values.pdf] are:

      `${ repr(pdf_file.get_pdf_fields()) }`

      [sample-form-different-export-values.pdf]: https://github.com/jhpyle/docassemble/blob/master/docassemble_base/docassemble/base/data/templates/sample-form-different-export-values.pdf
"getField":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What do you want for
      dessert<span id="the_dessert"></span>?
    fields:
      - Dessert: dessert
      - html: |
          <a href="#" id="show_me" class="btn btn-primary">Eat it</a>
    script: |
      <script>
        $("#show_me").click(function(){
          $("#the_dessert").html(" besides " + getField('dessert').value);
          return false;
        });
      </script>
"getFields":
  "height": !!int |-
    440
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Tell me about your musical tastes.
    fields:
      - Best band ever: best_band
      - Best singer ever: best_singer
      - Best composer ever: best_composer
      - Best songwriter ever: best_songwriter
      - html: |
          <a href="#" id="decide_for_me" class="btn btn-success">Decide for me</a>
    script: |
      <script>
        $("#decide_for_me").click(function(){
          var fields = getFields();
          for (var i = 0; i < fields.length; ++i){
            setField(fields[i], 'Carly Simon');
          }
          return false;
        });
      </script>
    ---
    mandatory: True
    question: |
      You like ${ comma_and_list(set([best_band, best_singer, best_composer, best_songwriter])) }.
"googlechart":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    features:
      javascript: https://www.gstatic.com/charts/loader.js
    ---
    mandatory: True
    question: Your stuff
    subquestion: |
      <div id="piechart" style="width: 100%; min-height: 450px;"></div>
    script: |
      <script type="text/javascript">
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {
          var chartwidth = $('#piechart').width();
          var data = google.visualization.arrayToDataTable(${ json.dumps(data) });
          var options = {
            title: ${ json.dumps(title) },
            width: chartwidth,
            chartArea: {width: chartwidth, left: 20, top: 20, height: chartwidth*0.75}
          };

          var chart = new google.visualization.PieChart(document.getElementById('piechart'));

          chart.draw(data, options);
        }
      </script>
    ---
    code: |
      title = "Household stuff"
      data = [['Thing', 'How many']] + [[y, how_many[y]] for y in things]
"grid1":
  "height": !!int |-
    366
  "width": !!int |-
    488
  "yaml": |-
    features:
      labels above fields: True
    ---
    question: |
      Tell me about yourself.
    fields:
      - Name: user_name
        grid: 7
      - Age: user_age
        datatype: integer
        min: 0
        grid: 5
      - Life story: user_life_story
        input type: area
"grid2":
  "height": !!int |-
    386
  "width": !!int |-
    488
  "yaml": |-
    features:
      labels above fields: True
    ---
    question: |
      Let's pick some numbers.
    fields:
      - "Are you afraid of odd numbers?": no_odd
        datatype: yesnoradio
      - "1": number_one
        datatype: yesno
        grid: 2
        hide if: no_odd
      - "2": number_two
        datatype: yesnowide
        grid: 2
      - "3": number_three
        datatype: yesnowide
        grid: 2
        hide if: no_odd
      - "4": number_four
        datatype: yesnowide
        grid: 2
      - "5": number_five
        datatype: yesnowide
        grid: 2
        hide if: no_odd
      - "6": number_six
        datatype: yesnowide
        grid: 2
      - "7": number_seven
        datatype: yesnowide
        grid: 2
        hide if: no_odd
      - "8": number_eight
        datatype: yesnowide
        grid: 2
      - "9": number_nine
        datatype: yesnowide
        grid: 2
        hide if: no_odd
      - "10": number_ten
        datatype: yesnowide
        grid: 2
"grid3":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Tell me about your numerical tastes.
    fields:
      - Best number: favorite_number
        datatype: integer
        grid: 2
      - Worst number: least_favorite_number
        datatype: integer
        grid: 2
"grid4":
  "height": !!int |-
    232
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Tell me about your numerical tastes.
    fields:
      - Best number: favorite_number
        datatype: integer
        grid:
          width: 3
          label width: 3
      - Worst number: least_favorite_number
        datatype: integer
        grid:
          width: 3
          label width: 3
"grid5":
  "height": !!int |-
    402
  "width": !!int |-
    488
  "yaml": |-
    features:
      labels above fields: True
    ---
    question: |
      Let's pick some numbers and letters.
    fields:
      - "1": number_one
        datatype: yesno
        grid: 2
      - "2": number_two
        datatype: yesnowide
        grid: 2
      - "3": number_three
        datatype: yesnowide
        grid: 2
      - "4": number_four
        datatype: yesnowide
        grid: 2
      - "5": number_five
        datatype: yesnowide
        grid: 2
      - "6": number_six
        datatype: yesnowide
        grid: 2
      - "7": number_seven
        datatype: yesnowide
        grid: 2
      - "8": number_eight
        datatype: yesnowide
        grid: 2
      - "9": number_nine
        datatype: yesnowide
        grid: 2
      - "10": number_ten
        datatype: yesnowide
        grid: 2
      - "A": letter_a
        datatype: yesno
        grid:
          width: 2
          start: True
      - "B": letter_b
        datatype: yesnowide
        grid: 2
      - "C": letter_c
        datatype: yesnowide
        grid: 2
      - "D": letter_d
        datatype: yesnowide
        grid: 2
      - "E": letter_e
        datatype: yesnowide
        grid: 2
      - "F": letter_f
        datatype: yesnowide
        grid: 2
      - "G": letter_g
        datatype: yesnowide
        grid: 2
      - "H": letter_h
        datatype: yesnowide
        grid: 2
      - "I": letter_i
        datatype: yesnowide
        grid: 2
      - "J": letter_j
        datatype: yesnowide
        grid: 2
"grid6":
  "height": !!int |-
    402
  "width": !!int |-
    488
  "yaml": |-
    features:
      labels above fields: True
    ---
    question: |
      Let's pick some numbers and letters.
    fields:
      - "1": number_one
        datatype: yesno
        grid: 2
      - "2": number_two
        datatype: yesnowide
        grid: 2
      - "3": number_three
        datatype: yesnowide
        grid: 2
      - "4": number_four
        datatype: yesnowide
        grid: 2
      - "5": number_five
        datatype: yesnowide
        grid: 2
      - "6": number_six
        datatype: yesnowide
        grid: 2
      - "7": number_seven
        datatype: yesnowide
        grid: 2
      - "8": number_eight
        datatype: yesnowide
        grid: 2
      - "9": number_nine
        datatype: yesnowide
        grid: 2
      - "10": number_ten
        datatype: yesnowide
        grid:
          width: 2
          end: True
      - "A": letter_a
        datatype: yesno
        grid: 2
      - "B": letter_b
        datatype: yesnowide
        grid: 2
      - "C": letter_c
        datatype: yesnowide
        grid: 2
      - "D": letter_d
        datatype: yesnowide
        grid: 2
      - "E": letter_e
        datatype: yesnowide
        grid: 2
      - "F": letter_f
        datatype: yesnowide
        grid: 2
      - "G": letter_g
        datatype: yesnowide
        grid: 2
      - "H": letter_h
        datatype: yesnowide
        grid: 2
      - "I": letter_i
        datatype: yesnowide
        grid: 2
      - "J": letter_j
        datatype: yesnowide
        grid: 2
"grid7":
  "height": !!int |-
    294
  "width": !!int |-
    488
  "yaml": |-
    features:
      labels above fields: True
    ---
    question: |
      Tell me your address.
    fields:
      - Address: address.address
      - City: address.city
        grid:
          width: 6
          breakpoint: sm
      - State: address.state
        code: states_list(abbreviate=True)
        grid:
          width: 3
          breakpoint: sm
        hint: ""
      - Zip: address.zip
        grid:
          width: 3
          breakpoint: sm
"grid8":
  "height": !!int |-
    294
  "width": !!int |-
    488
  "yaml": |-
    features:
      labels above fields: True
    ---
    code: |
      address_width = 6
      state_width = 3
      breakpoint = "sm"
    ---
    question: |
      Tell me your address.
    fields:
      - Address: address.address
      - City: address.city
        grid:
          width: address_width
          breakpoint: ${ breakpoint }
      - State: address.state
        code: states_list(abbreviate=True)
        grid:
          width: state_width
          breakpoint: ${ breakpoint }
        hint: ""
      - Zip: address.zip
        grid:
          width: 12 - (state_width + address_width)
          breakpoint: ${ breakpoint }
"grid9":
  "height": !!int |-
    270
  "width": !!int |-
    488
  "yaml": |-
    features:
      labels above fields: True
    ---
    question: |
      How many fingers do you have?
    fields:
      - Left hand: fingers_left
        datatype: integer
        grid:
          width: 4
      - Right hand: fingers_right
        datatype: integer
        grid:
          width: 4
          offset: 4
      - A: a_field
        datatype: yesnowide
        grid:
          offset: 1
          width: 2
      - B: b_field
        datatype: yesnowide
        grid:
          offset: 1
          width: 2
      - C: c_field
        datatype: yesnowide
        grid:
          offset: 1
          width: 2
      - D: d_field
        datatype: yesnowide
        grid:
          offset: 1
          width: 2
"hello-not-oop":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: What is your name?
    fields:
      - First: user_first_name
      - Last: user_last_name
    ---
    question: |
      Hello, ${ user_first_name } ${ user_last_name }!
    mandatory: True
"hello-oop":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Individual
    ---
    question: |
      What's your name?
    fields:
      - First: user.name.first
      - Last: user.name.last
    ---
    question: |
      Hello, ${ user }!
    mandatory: True
"help":
  "height": !!int |-
    293
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is 2+2?
    subquestion:
      If you need help answering this question,
      press "Help."
    field: answer
    choices:
      - 3
      - 4
      - 5
    help: |
      Hint: 2 + 2 = 4.
"help-damages":
  "height": !!int |-
    146
  "width": !!int |-
    488
  "yaml": |-
    question: |
      How much money do you wish
      to seek in damages?
    fields:
      - Money: damages_sought
        datatype: currency
    help: |
      If you are not sure how much
      money to seek in damages, just ask
      for a million dollars, since you
      want ${ defendant } to suffer.
"help-damages-audio":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    question: |
      How much money do you wish
      to seek in damages?
    fields:
      - Money: damages_sought
        datatype: currency
    help:
      content: |
        If you are not sure how much
        money to seek in damages, just ask
        for a million dollars, since you
        want ${ defendant } to suffer.
      audio: |
        message_re_damages.mp3
"help-damages-label":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    question: |
      How much money do you wish
      to seek in damages?
    fields:
      - Money: damages_sought
        datatype: currency
    help:
      label: |
        More info
      content: |
        If you are not sure how much
        money to seek in damages, just ask
        for a million dollars, since you
        want ${ defendant } to suffer.
"hide-continue-button":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      % if user_number == number_to_enter:
      You have passed the short-term memory test.
      % else:
      You are wrong.
      % endif
    action buttons:
      - label: |
          Try again
        action: user_number
        show if: |
          user_number != number_to_enter
        color: primary
    hide continue button: |
      user_number != number_to_enter
    continue button field: threshold_screen
"hideif-boolean":
  "height": !!int |-
    340
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - "Do you have fruit?": has_fruit
        datatype: yesnoradio
      - "What fruit do you need?": fruit
        hide if: has_fruit
"html":
  "height": !!int |-
    264
  "width": !!int |-
    488
  "yaml": |-
    question: |
      I was thinking about your birthday.
    fields:
      - html: |
          The date and time today is
          <span class="mytime" id="today_time"></span>.
      - "When is your next birthday?": birth_date
        datatype: date
    css: |
      <style>
        .mytime {
           color: green;
        }
      </style>
    script: |
      <script>
        $("#today_time").html(Date());
      </script>
"hyperlink-style":
  "height": !!int |-
    260
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Here is your document.
    attachment:
      docx template file: resource_guide.docx
      hyperlink style: CustomStyle
    ---
    code: |
      if legal_issue == 'family':
        the_link = "the [Family Law Information Portal](https://familylawinfo.com)"
      else:
        the_link = "your [local law library](https://lawlibrarydirectory.org), which may be able to help you"
"if":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Describe your intelligence.
    field: user_intelligence
    choices:
      - Smart
      - Dumb
    ---
    if: |
      user_intelligence == 'Smart'
    question: |
      What is the square root of 50% of 32?
    fields:
      - Answer: answer
        datatype: integer
    ---
    if: |
      user_intelligence == 'Dumb'
    question: |
      What is 2+2?
    fields:
      - Answer: answer
        datatype: integer
    ---
    mandatory: True
    question: |
      % if answer == 4:
      That is correct.
      % else:
      Wrong answer.
      % endif
"image-sets":
  "height": !!int |-
    328
  "width": !!int |-
    488
  "yaml": |-
    image sets:
      freepik:
        attribution: |
          Icon made by
          [Freepik](http://www.flaticon.com/authors/freepik)
        images:
          baby: crawling.svg
          money: commerce.svg
"images":
  "height": !!int |-
    152
  "width": !!int |-
    488
  "yaml": |-
    images:
      star: star.svg
      diamond: bluediamond.svg
"immediate_file":
  "yaml": |-
    attachment:
      name: A file
      file: test_file
      variable name: the_file
      valid formats:
        - pdf
      content: |
        Hello, ${ url_args.get('name', 'you') }!
"imports":
  "height": !!int |-
    248
  "width": !!int |-
    488
  "yaml": |-
    imports:
      - re
"include":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    include:
      - docassemble.demo:data/questions/some-questions.yml
"income":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your income?
    fields:
      - Income: user_income_amount
        datatype: currency
      - Period: user_income_period
        datatype: number
        code: |
          period_list()
"indefinite-article":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Would you prefer to have
      ${ indefinite_article(fruit) }
      as opposed to
      ${ indefinite_article(vegetable) }?
    yesno: prefer_fruit
"indent":
  "height": !!int |-
    490
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Your allegations
    subquestion: |
      You allege that:

      1.  The sky is blue.

      2.  You have a house.

          Your house has a roof.

          Your roof is made up of many
          shingles.

      3.  You have a car.

      ${ indent(car_allegations) }

      4.  You have at least a high
          school education.
    ---
    template: car_allegations
    content: |
      Your car is black.

      Your car's gas tank is nearly empty.

      Your car goes from 0 to 60 fast enough
      not to be rear-ended on the highway.
"index-variable":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the ${ ordinal(i) }
      person's name?
    fields:
      - First: people[i].name.first
      - Last: people[i].name.last
"infinite-loop":
  "yaml": |-
    mandatory: True
    question: |
      The variable is
      ${ target_variable }.
"infinite-loop-2":
  "yaml": |-
    mandatory: True
    question: |
      I need ${ foo }.
"initial":
  "height": !!int |-
    216
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      counter = 0
    ---
    initial: True
    code: |
      counter = counter + 1
    ---
    question: |
      How many peaches do you have?
    subquestion: |
      The value of the counter
      is ${ counter }.
    fields:
      - no label: peaches
        datatype: integer
    ---
    code: |
      fruits = peaches + pears
    ---
    question: |
      How many pears do you have?
    subquestion: |
      The value of the counter
      is ${ counter }.
    fields:
      - no label: pears
        datatype: integer
    ---
    question: |
      You have ${ fruits } pieces of fruit.
    subquestion: |
      The value of the counter
      is ${ counter }.
    mandatory: True
"initial-code":
  "yaml": |-
    initial: use_counter
    code: |
      counter = counter + 1
    ---
    question: |
      Do you want to turn on the
      counter?
    yesno: use_counter
"interface":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    question: |
      You are using the ${ interface() }
      interface.
    mandatory: True
"interview-flowers":
  "yaml": |-
    question: |
      What is your favorite flower?
    fields:
      - Fruit: favorite_flower
"interview-fruit":
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
"interview-help":
  "height": !!int |-
    194
  "width": !!int |-
    488
  "yaml": |-
    interview help:
      heading: About this interview
      content: |
        Answer each question to the best of your
        ability.  If you do not know the answer
        to any question, panic.
"interview-list":
  "yaml": |-
    question: |
      My interviews
    subquestion: |
      % for interview in interview_list()[0]:
      * ${ interview['title'] }
        started at
        ${ interview['starttime'] }.
      % endfor
    field: my_interviews
"interview-url":
  "height": !!int |-
    226
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      multi_user = True
    ---
    question: |
      Ready to proceed?
    subquestion: |
      To invite someone else to complete
      this interview, ask them to go to
      [this URL](${ interview_url() }).

      To proceed with the interview,
      click "Yes."
    yesno: ready_to_proceed
"interview-url-refer":
  "height": !!int |-
    184
  "width": !!int |-
    488
  "yaml": |-
    mandatory: true
    question: |
      What interview would you
      like to use?
    subquestion: |
      * [Fruit]
      * [Vegetables]
      * [Flowers]

      [Fruit]: ${ interview_url(i='docassemble.demo:data/questions/interview-about-fruit.yml') }
      [Vegetables]: ${ interview_url(i='docassemble.demo:data/questions/interview-about-vegetables.yml') }
      [Flowers]: ${ interview_url(i='docassemble.demo:data/questions/interview-about-flowers.yml') }
"interview-url-session":
  "yaml": "mandatory: True\ncode: |\n  multi_user = False\n---\nquestion: |\n  Ready\
    \ to proceed?\nsubquestion: |\n  Here is an interview URL that launches another\
    \ interview.\n  \n  `${ interview_url(i='docassemble.base:data/questions/examples/interview-url-session-two.yml')\
    \ }`\n\n  To proceed with the interview,\n  click \"Yes.\"\nyesno: ready_to_proceed\n\
    ---\nquestion: All done\nsubquestion: |\n  Now we are done with the interview.\n\
    sets: final_screen"
"interview-url-session-two":
  "yaml": |-
    mandatory: True
    code: |
      multi_user = False
    ---
    mandatory: True
    code: |
      if ready_to_proceed:
        all_done
    ---
    question: |
      Please press continue
    field: ready_to_proceed
    ---
    question: All done
    subquestion: |
      Now we are done with the interview.
    event: all_done
"interview-url-temp":
  "height": !!int |-
    226
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      multi_user = True
    ---
    question: |
      Ready to proceed?
    subquestion: |
      To invite someone else to complete
      this interview, ask them to go to
      [this URL](${ interview_url(temporary=1) })
      within the next hour.

      To proceed with the interview,
      click "Yes."
    yesno: ready_to_proceed
"interview-vegetables":
  "yaml": |-
    question: |
      What is your favorite vegetable?
    fields:
      - Fruit: favorite_vegetable
"interview_url_action":
  "height": !!int |-
    218
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Individual
    ---
    mandatory: True
    code: |
      multi_user = True
      status = 'normal'
    ---
    initial: True
    code: |
      process_action()
    ---
    event: check_update_status
    code: |
      if 'status' in action_arguments():
        status = action_argument('status')
    ---
    mandatory: True
    question: |
      The current status is ${ status }.
    subquestion: |
      Anyone can use the following links
      to change the current status:

      * Change to [normal](${ interview_url_action('check_update_status', status='normal') })
      * Change to [danger](${ interview_url_action('check_update_status', status='danger') })
      * Change to [critical](${ interview_url_action('check_update_status', status='critical') })
"inverse-navbar":
  "height": !!int |-
    260
  "width": !!int |-
    1005
  "yaml": |-
    features:
      inverse navbar: False
"iso-country":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      In what country do you live?
    fields:
      - Country: country
    validation code: |
      try:
        country = iso_country(country)
      except:
        validation_error("That country does not exist.  Please try again.")
    ---
    mandatory: True
    question: |
      You live in ${ country_name(country) }.
"item":
  "height": !!int |-
    284
  "width": !!int |-
    488
  "yaml": "question: |\n  Describe the ${ ordinal(i) } fruit.\nfields:\n  - Name:\
    \ fruit[i].name\n  - Color: fruit[i].color\n  - Seeds: fruit[i].seeds\n    datatype:\
    \ integer\n---\nquestion: |\n  Are there any more fruit?\nyesno: fruit.there_is_another\n\
    ---\nmandatory: True\nquestion: |\n  Description of ten fruits.\nsubquestion:\
    \ |\n  % for index in range(10):\n  The name of the ${ ordinal(index) }\n  fruit\
    \ is ${ fruit.item(index).name }.\n  It is ${ fruit.item(index).color }\n  and\
    \ it has\n  ${ fruit.item(index).seeds } seeds.\n  \n  % endfor"
"item-dict":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "code: |\n  pet_types = [\n    'dog', 'cat', 'goldfish',\n    'turtle',\
    \ 'lizard', 'rabbit',\n    'rock', 'hamster', 'gerbil',\n    'rat']\n---\nquestion:\
    \ |\n  What type of pet do you have?\nfields:\n  - Type: pet.new_item_name\n \
    \   datatype: dropdown\n    code: pet_types\n---\nquestion: |\n  Describe your\
    \ pet ${ i }.\nfields:\n  - Name: pet[i].name\n  - Color: pet[i].color\n  - Legs:\
    \ pet[i].legs\n    datatype: integer\n---\nquestion: |\n  Do you have any other\
    \ pets?\nyesno: pet.there_is_another\n---\nmandatory: True\nquestion: |\n  Description\
    \ of ten pets.\nsubquestion: |\n  % for pet_type in pet_types:\n  The name of\
    \ your pet ${ pet_type }\n  is ${ pet.item(pet_type).name }.\n  It is ${ pet.item(pet_type).color\
    \ }\n  and it has\n  ${ pet.item(pet_type).legs } legs.\n  \n  % endfor"
"item-grid":
  "height": !!int |-
    308
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Select your favorite fruit.
    fields:
      - Favorite fruit: favorite_fruit
        item grid: 6
        input type: radio
        choices:
          - Apple
          - Orange
          - Peach
          - Pear
          - Banana
          - Grapes
"item-grid-breakpoint":
  "height": !!int |-
    308
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Select your favorite number.
    fields:
      - Favorite number: favorite_number
        input type: radio
        item grid:
          width: 3
          breakpoint: sm
        choices:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
"join":
  "yaml": |-
    initial: True
    code: |
      process_action()
      if user_has_privilege('admin', 'developer'):
        advocate_screen
    ---
    event: advocate_screen
    question: |
      Summary of user's answers so far.
    review:
      - Change Fruit: fruit
        button: |
          The favorite fruit was ${ fruit }.
      - Change Vegetable: vegetable
        button: |
          The favorite vegetable was ${ vegetable }.
      - Change Fungus: fungi
        button: |
          The favorite fungus was ${ fungi }.
    resume button label: Refresh
"js_action_call":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      The pie
    subquestion: |
      <button id="run" class="btn btn-primary">Run</button>

      <span id="resultsArea"></span>
    script: |
      <script>
        $("#run").click(function(){
          action_call('myaction', {fruit: 'apple'}, function(data){
            $("#resultsArea").html("The pie is called " + data.pie + ".")
          });
        });
      </script>
    ---
    event: myaction
    code: |
      fruit = action_argument('fruit')
      dessert = fruit + " pie"
      json_response(dict(pie=dessert))
"js_url_action":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      dessert = "cod liver oil"
    ---
    mandatory: True
    question: |
      Your dessert is ${ dessert }.
    subquestion: |
      If you want, you can
      <a id="choose">choose something tastier</a>.
    script: |
      <script>
        $("#choose").attr('href', url_action('myaction', {fruit: 'apple'}));
      </script>
    ---
    event: myaction
    code: |
      fruit = action_argument('fruit')
      dessert = fruit + " pie"
"js_variables":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      fruit = 'apple'
    ---
    mandatory: True
    question: |
      The fruit.
    subquestion: |
      Fruit is <span id="food"></span>.
    script: |
      <script>
        get_interview_variables(function(data){
          if (data.success){
            $("#food").html(data.variables['fruit']);
          }
        });
      </script>
"json-response":
  "yaml": |-
    mandatory: True
    code: |
      multi_user = True
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
"json-response-ajax":
  "height": !!int |-
    284
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Tell me about your shipment.
    fields:
      - Weight (lbs): weight
        datatype: number
      - Size: size
        choices:
          - Small box: 1
          - Medium box: 2
          - Large box: 3
      - html: |
          <button id="calcButton" class="btn btn-info float-end" type="button">Calculate</button>
          <span id="calcResults"></span>
    script: |
      <script>
        $("#calcButton").on('click', function(){
          var theWeight = parseFloat(val('weight'))
          var theSize = parseInt(val('size'))
          if (theWeight && theSize){
            action_call('calc', {weight: theWeight, size: theSize}, function(data){
              $("#calcResults").html("That will cost $" + data.cost.toLocaleString('en-US') + ".");
            });
          }
        })
      </script>
    ---
    event: calc
    code: |
      json_response({'cost': 4.44 + action_argument('weight') * 5.2 + action_argument('size') * 13.1})
"jsshowif":
  "height": !!int |-
    404
  "width": !!int |-
    488
  "yaml": "question: |\n  Please fill in the following information.\nsubquestion:\
    \ |\n  Try setting \"Favorite fruit\" to \n  \"apple\" or \"mango\" (and unfocus\
    \ the \n  field) to see what happens.\nfields:\n  - Favorite fruit: fruit\n  -\
    \ Favorite vegetable: vegetable\n  - Favorite fungus: mushroom\n    js show if:\
    \ |\n      val(\"fruit\") == \"apple\"\n  - Favorite spice: spice\n    js hide\
    \ if: |\n      val(\"fruit\") == \"mango\"\n---\nquestion: |\n  Please fill in\
    \ the following information.\nsubquestion: |\n  See what happens when you set\
    \ \n  \"Favorite cuisine\" to \"Chinese food.\"\nfields:\n  - Favorite cuisine:\
    \ cuisine\n    choices:\n      - Chinese food\n      - French food\n      - Belgian\
    \ food\n  - Favorite dish: dish\n    js show if: |\n      val('cuisine') == \"\
    Chinese food\"\n---\nquestion: |\n  Please fill in the following information.\n\
    fields:\n  - \"Do you watch TV?\": watches_tv\n    datatype: yesnoradio\n  - Favorite\
    \ TV show: tv_show\n    js show if: |\n      val('watches_tv') == true\n  - \"\
    I listen to the radio\": listens_to_radio\n    datatype: yesno\n  - Favorite radio\
    \ station: radio_station\n    js show if: |\n      val('listens_to_radio') ==\
    \ true\n  - Favorite modulation type: favorite_modulation\n    datatype: radio\n\
    \    choices:\n      - FM\n      - AM\n    js show if: |\n      val('listens_to_radio')\
    \ == true      \n  - Favorite antenna style: favorite_antenna\n    js show if:\
    \ |\n      val('favorite_modulation') == 'FM'\n---\nquestion: |\n  Please fill\
    \ in the following information.\nsubquestion: |\n  Try selecting Apple and Plum.\n\
    fields:\n  - Select the fruits you like: liked_fruits\n    datatype: checkboxes\n\
    \    choices:\n      - Apple\n      - Peach\n      - Pear\n      - Plum\n  - Favorite\
    \ way to eat apples and plums: apple_plum_dish\n    js show if: |\n      val(\"\
    liked_fruits['Apple']\") && val(\"liked_fruits['Plum']\")"
"label":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What are your favorite things to eat?
    fields:
      - label: Vegetable
        field: favorite_vegetable
      - label: Fruit
        field: favorite_fruit
"label-above-field":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Your sign
    fields:
      - "What is your Zodiac sign?": target_variable
        label above field: True
"language":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": "question: |\n  What is the meaning of life?\nfields:\n  - Meaning of life:\
    \ meaning_life\n---\nlanguage: es\nquestion: |\n  \xBFCu\xE1l es el significado\
    \ de la vida?\nfields:\n  - Significado de la Vida: meaning_life"
"language-change":
  "yaml": |-
    initial: True
    code: |
      set_language(language)
      menu_items
    ---
    language: en
    code: |
      menu_items = [ action_menu_item('Change language', 'change_language') ]
    ---
    language: es
    code: |
      menu_items = [ action_menu_item('Cambiar idioma', 'change_language') ]
    ---
    event: change_language
    code: |
      del language
      del menu_items
"language_from_browser":
  "height": !!int |-
    66
  "width": !!int |-
    488
  "yaml": |-
    question: |
      I think your language code is
      `${ language_from_browser() }`.
    mandatory: True
"language_from_browser_restricted":
  "height": !!int |-
    96
  "width": !!int |-
    488
  "yaml": |-
    question: |
      % if language_from_browser('es', 'fr') is None:
      I guess you do not speak
      Spanish or French.
      % else:
      Great!  Your language code is
      `${ language_from_browser('es', 'fr') }`.
      % endif
    mandatory: True
"lastfirst":
  "height": !!int |-
    218
  "width": !!int |-
    488
  "yaml": |-
    template: client_letter
    content: |
      We need to be prepared to bring a lawsuit against the following:

      % for party in enemy:
      * ${ party.name.lastfirst() }
      % endfor
    ---
    objects:
      enemy: PartyList
    ---
    mandatory: True
    code: |
      enemy.appendObject(Individual)
      enemy[0].name.first = "Darth"
      enemy[0].name.last = "Vader"
      enemy.appendObject(Person)
      enemy[1].name.text = "Death Star Corporation"
      enemy.appendObject(Individual)
      enemy[2].name.first = "Kylo"
      enemy[2].name.last = "Ren"
      enemy.gathered = True
"leave":
  "yaml": |-
    mandatory: True
    code: |
      command('leave', url=target_url)
    ---
    question: |
      Where do you want to go?
    field: target_url
    buttons:
      - Stanford: "http://stanford.edu/"
      - Harvard: "http://www.harvard.edu/"
"list-collect":
  "height": !!int |-
    577
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Tell me about the fruit.
    fields:
      - Fruit name: fruit[i].name.text
      - Number of seeds: fruit[i].seeds
        datatype: number
    list collect: True
"list-collect-disable-others":
  "yaml": |-
    question: |
      Tell me about the fruit.
    fields:
      - Fruit name: fruit[i].name.text
        choices:
          - Apple
          - Orange
          - Grapefruit
        disable others: True
      - Fruit name: fruit[i].name.text
      - Number of seeds: fruit[i].seeds
        datatype: number
    list collect: True
"list-collect-options":
  "height": !!int |-
    563
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Tell me about the fruit.
    fields:
      - Fruit name: fruit[i].name.text
      - Number of seeds: fruit[i].seeds
        datatype: number
    list collect:
      enable: not fruit.has_been_gathered()
      is final: False
      allow delete: False
      add another label: Add more
      label: |
        ${ fruit_name } ${ i+1 }.
"list-collect-string":
  "yaml": |-
    question: |
      Tell me about the fruit.
    fields:
      - Fruit name: fruit[i]
    list collect: True
"list-collect-uncheck-others":
  "yaml": |-
    question: |
      Tell me about the fruit.
    fields:
      - Fruit name: fruit[i].name.text
      - Number of seeds: fruit[i].seeds
        datatype: number
      - Sweet: fruit[i].sweet
        datatype: yesno
      - Sour: fruit[i].sour
        datatype: yesno
      - Neither: fruit[i].savory
        datatype: yesno
        uncheck others: True
    list collect: True
"list-interview":
  "height": !!int |-
    128
  "width": !!int |-
    488
  "yaml": |-
    code: |
      available_interviews = interview_menu()
    ---
    prevent going back: True
    mandatory: True
    question: |
      Available interviews
    subquestion: |
      % if len(available_interviews) > 0:
      % for interview in available_interviews:
      * [${ interview['title'] }](${ interview['link'] })
      % endfor
      % else:
      There are no available interviews.
      % endif
"list-table-manual-gather":
  "yaml": |-
    objects:
      - person: DAList.using(object_type=Individual,
                             complete_attribute='complete')
    ---
    mandatory: True
    code: |
      person[0]
      person[1]
      for item in person.elements:
        item.complete
      person.gathered = True
    ---
    code: |
      person[i].name.first
      person[i].favorite_fruit
      person[i].complete = True
"list-table-manual-gather-simple":
  "yaml": |-
    objects:
      - person: DAList
    ---
    mandatory: True
    code: |
      person[0]
      person[1]
      person.gathered = True
"lists":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      fears.extend(['spiders', 'snakes', 'fish'])
      fears.gathered = True
    ---
    mandatory: True
    question: |
      Your fears
    subquestion: |
      You are afraid of
      ${ comma_and_list(fears) }.
"live_chat":
  "yaml": |-
    mandatory: True
    code: |
      set_live_help_status(availability='available', mode='help', partner_roles=['advocate'])
"loading-legal":
  "height": !!int |-
    191
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.base.legal
"loading-util":
  "height": !!int |-
    194
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.base.util
"log":
  "height": !!int |-
    185
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      log("Hello, user!", "info")
      log("Lookout, user!", "danger")
    ---
    mandatory: True
    decoration: coins
    question: |
      The interview is complete.
"lucky-number":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    field: lucky_information_confirmed
    question: |
      Please confirm the following information.
    subquestion: |
      Your lucky number is ${ lucky_number }.
      [Increase](${ url_action('set_number_event', increment=1) })
      [Decrease](${ url_action('set_number_event', increment=-1) })

      Also, your lucky color is ${ lucky_color }.
      [Edit](${ url_action('lucky_color') })
    ---
    event: set_number_event
    code: |
      lucky_number += action_argument('increment')
    ---
    code: |
      lucky_number = 2
"madlibs":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - adjective: DAList
      - noun: DAList
      - person: DAList
      - place: DAList
    ---
    mandatory: True
    question: A funny story
    subquestion: |
      ${ person[0] } went to ${ place[0] }
      to buy
      ${ indefinite_article(noun[0]) }.

      At the ${ place[0] }, there was
      ${ indefinite_article(adjective[0])}
      ${ noun[1] }, which tried to zap
      ${ person[0] }.

      But luckily, ${ person[1] } came out
      of the back room just in time and
      lunged at the ${ noun[1] }, thereby
      saving the day.
    buttons:
      - Do it again: restart
    ---
    generic object: DAList
    question: |
      % if i == 0:
      Give me
      ${ indefinite_article(x.object_name()) }.
      % else:
      Give me another ${ x.object_name() }.
      % endif
    fields:
      - no label: x[i]
"main-page":
  "yaml": |-
    metadata:
      pre: |
        <p><a href="https://example.com/buy"
        style="color: red; text-decoration: underline;">
        Click here to buy now!</a></p>
      submit: |
        <p style="font-size: 9px">You click
        this button under the pains and
        penalties of perjury.  By clicking,
        you agree to comply with the terms
        and conditions of this site, which
        are available for inspection at
        2311 Business Center Road, Lansing,
        MI, 93483</p>
      post: |
        <p style="color: green;">Need
        help? Call 888-555-3933 now!!!</p>
"mainpage-demo-parts":
  "yaml": |-
    question: |
      What is your favorite vegetable?
    fields:
      - Favorite vegetable: favorite_vegetable
"mako-01":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      A summary
    subquestion: |
      You like ${ favorite_fruit }
      and ${ favorite_vegetable }.
    ---
    code: |
      favorite_fruit = 'apples'
      favorite_vegetable = 'potatoes'
"mako-02":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Hello!
    subquestion: |
      I hope you are having a good day.

      % if day_of_month == 1:
      Don't forget to change your wall calendar!
      % endif
"mako-03":
  "height": !!int |-
    178
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Commentary on the day of the month
    subquestion: |
      Let me tell you about today.

      % if day_of_month < 3:
      The month just started!
      % elif day_of_month < 15:
      It is the beginning part of
      the month.
      % else:
      It is the latter part of the month.
      % endif
"mako-04":
  "height": !!int |-
    178
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Commentary on the day of the month
    subquestion: |
      Let me tell you about today.

      % if day_of_month < 3:
      The month just started!
      % elif day_of_month < 15:
      It is the beginning part of
      the month.
      % else:
        % if month_of_year == 12:
      It is almost New Year's!
        % else:
      It is the latter part of the month.
        % endif
      % endif
"mako-05":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Foods I like
    subquestion: |
      % for food in ['plums', 'pears', 'peas']:
      I like ${ food }.
      % endfor
"mako-06":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.base.legal
    ---
    objects:
      - witness: PartyList
    ---
    mandatory: True
    question: |
      The ${ witness.as_noun() }
    subquestion: |
      % for person in witness:
      ${ person } is a witness.
      % endfor
    ---
    question: |
      What is the name of the
      ${ ordinal(i) } witness?
    fields:
      - First Name: witness[i].name.first
      - Last Name: witness[i].name.last
    ---
    question: |
      Are there any other witnesses?
    yesno: witness.there_is_another
"mako-07":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      <%
        a = 2
        b = 3
        the_answer = a + b
      %>
      The answer is ${ the_answer }.
"mako-08":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Apples
    subquestion: |
      % if not likes_apples:
        Oh well, never mind.
        <% return STOP_RENDERING %>
      % endif
      Apples are red.

      They can also be green.

      They have stems and seeds.

      They are juicy and sweet.
"mako-09":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Foods I like
    subquestion: |
      % for food in ['apples', 'peaches', 'pears', 'plums', 'turnips', 'raspberries']:
        % if loop.first:
      First, I like ${ food }.
        % elif loop.last:
      Last but not least, I am a
      big fan of ${ food }.
        % elif loop.even:
      I also like ${ food }.
        % elif loop.odd:
      The ${ ordinal(loop.index) } food
      I like is ${ food }.
        % endif
      % endfor
"mandatory":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      fruits = peaches + pears
      all_done
"mandatory-code":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: |
      favorite_food == "apples"
    question: |
      You have good taste in food.
    buttons:
      - Continue: continue
    ---
    mandatory: True
    question: |
      Thank you for your input.
    ---
    question: |
      What is your favorite food?
    fields:
      - no label: favorite_food
"mandatory-continue":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Please note that this app is only right for you if
      you are a bear.
    buttons:
      - I am not a bear: exit
      - Continue: continue
    ---
    mandatory: True
    question: |
      Instructions for bears
    subquestion: |
      Grip the doorknob and turn it.

      Then look for the pantry. That is where they keep the food.
"manual-attachment-list":
  "height": !!int |-
    291
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Here is your document.
    subquestion: |
      [:file: Praecipe to Discontinue](${ praecipe.url_for(attachment=True) })
    attachment code: praecipe
    manual attachment list: True
"markdown":
  "height": !!int |-
    849
  "width": !!int |-
    488
  "yaml": "question: |\n  Introduction to Markdown\nsubquestion: |\n  Markdown allows\
    \ you to express\n  formatting in plain text.\n  \n  # I am a heading\n\n  Write\
    \ in *italic text* or even\n  **bold text**.\n\n  ## I am a subheading\n\n  ###\
    \ I am a smaller subheading\n\n  To block quote,\n\n  > you can do this.\n\n \
    \ Insert an image:\n\n  ![Markdown logo](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/208px-Markdown-mark.svg.png)\n\
    \n  Here is a bullet list:\n\n  * Larry;\n  * Curly; and\n  * Moe\n\n  Here is\
    \ a numbered list:\n\n  1. Buy groceries.\n  2. Get the car inspected.\n  3. Take\
    \ over the world!\n  \n  You can [Google](http://google.com)\n  \"markdown\" to\
    \ learn more.\nmandatory: True"
"markdown-demo":
  "height": !!int |-
    782
  "width": !!int |-
    488
  "yaml": |-
    question: Markdown demonstration
    subquestion: |
      This is *italic text*.
      This is **bold text**.
      This is __also bold text__.

      > This is some block-quoted
      > text

      ### This is a heading

      This is an image from the internet:

      ![Bass logo](https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Bass_logo.svg/199px-Bass_logo.svg.png)

      Here is a bullet list:

      * Apple
      * Peach
      * Pear

      Here is a numbered list:

      1. Nutmeg
      2. Celery
      3. Oregano

      Here is a
      [link to a web site](http://google.com).
    mandatory: true
"material-icons":
  "yaml": |-
    mandatory: True
    decoration: portrait
    question: |
      Eligibility
    subquestion: |
      You are eligible for :local_hospital:
      health insurance for yourself and
      your :child_care: children.
"menu-item":
  "height": !!int |-
    96
  "width": !!int |-
    488
  "yaml": "mandatory: True\ncode: |\n  menu_items = [ action_menu_item('Visit Cow',\
    \ 'see_cow') ]\n---\nevent: see_cow\nquestion: |\n  Moo!\nsubquestion: |\n  [FILE\
    \ cow.jpg]\n  \n  Cow illustration designed by\n  [Freepik](http://www.freepik.com/free-photos-vectors/animal)\n\
    buttons:\n  - Continue: continue\n---\nquestion: Welcome to the interview\nsubquestion:\
    \ |\n  Check out the menu in the\n  upper-right corner.\nmandatory: True"
"menu-items-refer":
  "height": !!int |-
    96
  "width": !!int |-
    488
  "yaml": "mandatory: True\ncode: |\n  menu_items = [ {'url': interview_url(i='docassemble.demo:data/questions/interview-about-fruit.yml'),\n\
    \                  'label': 'Fruit'},\n                 {'url': interview_url(i='docassemble.demo:data/questions/interview-about-vegetables.yml'),\n\
    \                  'label': 'Vegetables'}, \n                 {'url': interview_url(i='docassemble.demo:data/questions/interview-about-flowers.yml'),\n\
    \                  'label': 'Flowers'} ]\n---\nmandatory: True\nquestion: |\n\
    \  Select an option from the\n  menu in the upper right."
"mermaid":
  "height": !!int |-
    338
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.base.mermaid
    ---
    template: diagram
    content: |
      graph TD;
          ${ a }-->${ b };
          ${ a }-->${ c };
          ${ b }-->${ d };
          ${ c }-->${ d };
    ---
    question: Give me some names.
    fields:
      - A: a
        default: A
      - B: b
        default: B
      - C: c
        default: C
      - D: d
        default: D
    ---
    mandatory: True
    question: |
      Here is your diagram.
    subquestion: |
      ${ mmdc(diagram, file_format='png') }
"message":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    code: |
      message("The interview is over.", "Better luck next time!")
    mandatory: True
"metadata":
  "height": !!int |-
    228
  "width": !!int |-
    488
  "yaml": |-
    metadata:
      title: |
        Interview title
      short title: |
        The title
      description: |
        This interview produces a Petition To
        Postpone Sheriff Sale.
      authors:
        - name: John Doe
          organization: Example, Inc.
      revision_date: 2016-03-22
      documentation: "https://docassemble.org/docs/initial.html#metadata"
"metadata-screen-parts":
  "height": !!int |-
    340
  "width": !!int |-
    488
  "yaml": |-
    metadata:
      title: Title
      short title: Short title
      subtitle: |
        This is the subtitle part.
      pre: |
        This is the pre part.
      submit: |
        This is the submit part.
      post: |
        This is the post part.
      under: |
        This is the under part.
      right: |
        This is the right part.
      exit link: leave
      exit label: |
        Exit label
      help label: |
        Help label
      help button color: warning
      continue button label: |
        Continue button label
      continue button color: success
      resume button label: |
        Resume button label
      resume button color: info
      back button label: |
        Back button label
      back button color: danger
      footer: |
        This is the footer part.
"min":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What percentage of your friends
      are turnips?
    fields:
      - Percent: percent
        datatype: number
        min: 0
        max: 100
"minlength":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the nuclear launch code?
    fields:
      - Code: launch_code
        minlength: 5
        maxlength: 15
"mixed-list":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - location: |
          DAList.using(
            there_are_any=True,
            ask_object_type=True)
    ---
    mandatory: True
    question: |
      The locations
    subquestion: |
      % for loc in location:
      * ${ loc }
      % endfor
    ---
    question: |
      Do you know the full address of the
      ${ ordinal(location.current_index()) }
      location?
    buttons:
      - Yes:
          code: |
            location.new_object_type = Address
      - No:
          code: |
            location.new_object_type = City
    ---
    question: |
      What is the address of the
      ${ ordinal(i) } location?
    fields:
      - Address: location[i].address
      - Unit: location[i].unit
        required: False
      - City: location[i].city
      - State: location[i].state
        code: |
          states_list()
      - Zip: location[i].zip
        required: False
    ---
    question: |
      What is the city of the
      ${ ordinal(i) } location?
    fields:
      - City: location[i].city
      - State: location[i].state
        code: |
          states_list()
    ---
    question: |
      Would you like to add another location?
    yesno: location.there_is_another
"ml-ajax":
  "yaml": |-
    features:
      javascript: suggestions.js
"ml-ajax-classify":
  "yaml": |-
    code: |
      ml = SimpleTextMachineLearner(group_id='sug')
    ---
    initial: True
    code: |
      if defined('classification'):
        entry_to_classify.classify(classification)
        del classification
      entry_to_classify = ml.one_unclassified_entry()
      if entry_to_classify is not None:
        need(classification)
    ---
    reconsider: True
    code: |
      current_keys = " ".join(map(lambda x: '<a class="mysug btn btn-primary">' + str(x) + '</a>', ml.dependent_in_use()))
    ---
    question: |
      How should this be classified?
    subquestion: |
      > ${ entry_to_classify.independent }

      ${ current_keys }.
    fields:
      - no label: classification
    ---
    mandatory: True
    question: |
      There is nothing left to classify.
    buttons:
      - Check again: refresh
"ml-classify":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    code: |
      ml = SimpleTextMachineLearner(group_id='demo')
    ---
    initial: True
    code: |
      if defined('classification'):
        entry_to_classify.classify(classification)
        del classification
      entry_to_classify = ml.one_unclassified_entry()
      if entry_to_classify is not None:
        need(classification)
    ---
    question: |
      How should this be classified?
    subquestion: |
      > ${ entry_to_classify.independent }
    fields:
      - no label: classification
    ---
    mandatory: True
    question: |
      There is nothing left to classify.
    buttons:
      - Check again: refresh
"ml-datatype":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Describe how you feel.
    fields:
      - no label: mood
        datatype: ml
    ---
    mandatory: True
    question: |
      You sound ${ mood }.
    help: |
      If `mood` is `None`, then
      go to Train from the menu
      and train the model "mood"
      in the `docassemble.base`
      package.
"ml-export":
  "height": !!int |-
    22
  "width": !!int |-
    488
  "yaml": |-
    initial: True
    code: |
      ml = SimpleTextMachineLearner('demo')
      the_data = ml.export_training_set(output_format='json')
      response(response=the_data, content_type='application/json')
"ml-export-yaml":
  "height": !!int |-
    297
  "width": !!int |-
    488
  "yaml": |-
    initial: True
    code: |
      ml = SimpleTextMachineLearner(group_id='demo')
      the_data = ml.export_training_set(output_format='yaml')
      response(response=the_data, content_type='text/plain')
"ml-predict":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "question: |\n  Enter some text.\nfields:\n  - no label: phrase\n---\nmandatory:\
    \ True\ncode: |\n  ml = SimpleTextMachineLearner(group_id='demo')\n  predictions\
    \ = ml.predict(phrase)\n---\nmandatory: True\nquestion: |\n  The prediction\n\
    subquestion: |\n  The text provided was:\n  > ${ phrase }\n  \n  % if len(predictions):\n\
    \  The prediction was:\n\n  > ${ predictions[0] }\n  % else:\n  There is not enough\
    \ training data\n  to make a prediction yet.\n  % endif\nbuttons:\n  - Restart:\
    \ restart"
"ml-predict-probabilities":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "mandatory: True\nquestion: |\n  The prediction\nsubquestion: |\n  The text\
    \ provided was:\n  > ${ phrase }\n  \n  % if len(predictions):\n  The prediction\
    \ was:\n\n  % for prediction in predictions:\n  * ${ '%s (%f)' % prediction }\n\
    \  % endfor\n  % else:\n  There is not enough training data\n  to make a prediction\
    \ yet.\n  % endif\nbuttons:\n  - Restart: restart"
"ml-save-and-predict":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "code: |\n  ml = SimpleTextMachineLearner(group_id='demo')\n---\ncode: |\n\
    \  ml.save_for_classification(phrase)\n  predictions = ml.predict(phrase)\n---\n\
    mandatory: True\nquestion: |\n  The prediction\nsubquestion: |\n  The text provided\
    \ was:\n  > ${ phrase }\n  \n  % if len(predictions):\n  The prediction was:\n\
    \n  > ${ predictions[0] }\n  % else:\n  There is not enough training data\n  to\
    \ make a prediction yet.\n  % endif\nbuttons:\n  - Restart: restart"
"mlarea-datatype":
  "height": !!int |-
    248
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Describe how you feel.
    fields:
      - no label: mood
        datatype: mlarea
    ---
    mandatory: True
    question: |
      You sound ${ mood }.
    help: |
      If `mood` is `None`, then
      go to Train from the menu
      and train the model "mood"
      in the `docassemble.base`
      package.
"modules":
  "height": !!int |-
    129
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - json
"money-field":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      How much is your house worth?
    fields:
      - Value: target_variable
        datatype: currency
        min: 0
"money-field-euro":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "question: |\n  How much is your house worth?\nfields:\n  - Value: house_value\n\
    \    datatype: currency\n    min: 0\n    currency symbol: \u20AC\n---\nquestion:\
    \ Your home value\nsubquestion: |\n  Your house is worth\n  ${ currency(house_value,\
    \ symbol=u'\u20AC') }.\nmandatory: True"
"name":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What are you fighting?
    field: opponent.name.text
    choices:
      - the Empire
      - the Rebel Alliance
    ---
    mandatory: True
    question: |
      You are fighting
      ${ opponent.name.full() }.
    subquestion: |
      Your enemy is ${ opponent.name }.

      Your opponent is ${ opponent }.
"name-company":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Do you wish to sue ${ company }?
    yesno: user_wants_to_sue
"name-company-question":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Do you wish to sue ${ company }?
    yesno: user_wants_to_sue
"need":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      need(fruit, all_done)
"need-specifier":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    need:
      - number_of_years_old
      - favorite_animal
    question: |
      Thank you for that information.
    subquestion: |
      My favorite animal is
      ${ favorite_animal },
      too!

      % if number_of_years_old < 10:
      You're growing so fast.  Pretty
      soon you'll be driving a
      ${ favorite_color } car!
      % endif
"nested-gather":
  "yaml": |-
    modules:
      - docassemble.base.legal
    ---
    objects:
      - witness: PartyList
    ---
    mandatory: True
    question: |
      Witnesses
    subquestion: |
      % for person in witness:
      ${ person } is a witness
      who likes
      ${ person.favorite_food }.
      % endfor
    ---
    code: |
      witness.there_are_any = True
    ---
    question: |
      What is the name of the
      ${ ordinal(i) } witness?
    fields:
      - First Name: witness[i].name.first
      - Last Name: witness[i].name.last
    ---
    question: |
      Are there any other witnesses?
    yesno: witness.there_is_another
    ---
    generic object: Individual
    sets: x.favorite_food
    code: |
      x.favorite_food = DAList()
    ---
    generic object: Individual
    code: |
      x.favorite_food.there_are_any = True
    ---
    generic object: Individual
    question: |
      What food does ${ x } like?
    fields:
      - Food: x.favorite_food[i]
    ---
    generic object: Individual
    question: |
      Is there any other food that
      ${ x } likes, besides
      ${ x.favorite_food }?
    yesno: x.favorite_food.there_is_another
"nested-loop":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": "objects:\n  - person: |\n      DAList.using(\n        object_type=Individual,\n\
    \        minimum_number=1,\n        complete_attribute='complete')\n  - person[i].child:\
    \ |\n      DAList.using(\n        object_type=Individual,\n        complete_attribute='complete')\n\
    ---\ncode: |\n  person[i].name.first\n  person[i].name.last\n  person[i].allergy.gather()\n\
    \  person[i].child.gather()\n  person[i].complete = True\n---\ncode: |\n  person[i].child[j].name.first\n\
    \  person[i].child[j].name.last\n  person[i].child[j].allergy.gather()\n  person[i].child[j].complete\
    \ = True\n---\nquestion: |\n  What is the name of the\n  ${ ordinal(i) }\n  person?\n\
    fields:\n  - First: person[i].name.first\n  - Last: person[i].name.last\n---\n\
    question: |\n  Is there another person?\nyesno: person.there_is_another\n---\n\
    question: |\n  Does ${ person[i] } have any children?\nyesno: person[i].child.there_are_any\n\
    ---\nquestion: |\n  What is the name of\n  ${ person[i].possessive(ordinal(j)\
    \ + ' child') }?\nfields:\n  - First: person[i].child[j].name.first\n  - Last:\
    \ person[i].child[j].name.last\n---\nquestion: |\n  Does ${ person[i] } have any\n\
    \  children other than ${ person[i].child }?\nyesno: person[i].child.there_is_another\n\
    ---\ngeneric object: Individual\nobjects:\n  - x.allergy: DAList\n---\ngeneric\
    \ object: Individual\nquestion: |\n  Does ${ x } have any allergies?\nyesno: x.allergy.there_are_any\n\
    ---\ngeneric object: Individual\nquestion: |\n  What allergy does ${ x } have?\n\
    fields:\n  - Allergy: x.allergy[i]\n---\ngeneric object: Individual\nquestion:\
    \ |\n  Does ${ x } have any allergies\n  other than ${ x.allergy }?\nyesno: x.allergy.there_is_another\n\
    ---\nmandatory: True\nquestion: |\n  Information retrieved\nsubquestion: |\n \
    \ You told me about\n  ${ person.quantity_noun('individual') },\n  their allergies,\
    \ their children,\n  and their children's allergies.\n\n  % for p in person:\n\
    \  You told me about ${ p }.\n    % if p.allergy.number() > 0:\n  ${ p } is allergic\
    \ to ${ p.allergy }.\n    % endif\n    % for c in p.child:\n  ${ p } has a child\
    \ named ${ c }.\n    % if c.allergy.number() > 0:\n  ${ c } is allergic to ${\
    \ c.allergy }.\n    % endif\n    % endfor\n \n  % endfor"
"nested-objects":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": "objects:\n  - user: Individual\n  - user.sibling: DAList.using(object_type=Individual)\n\
    \  - user.sibling[i].company_hired: |\n      DADict.using(object_type=Organization,\n\
    \                   auto_gather=False,\n                   complete_attribute='complete')\n\
    \  - user.sibling[i].company_hired[j].place_of_business: City\n---\ncode: |\n\
    \  user.sibling[i].company_hired.new(user.sibling[i].types_of_companies.true_values())\n\
    \  user.sibling[i].company_hired.gathered = True\n---\ncode: |\n  user.sibling[i].company_hired[j].name.text\n\
    \  user.sibling[i].company_hired[j].place_of_business.city\n  user.sibling[i].company_hired[j].complete\
    \ = True\n---\nquestion: |\n  Do you have any siblings?\nyesno: user.sibling.there_are_any\n\
    ---\nquestion: |\n  What is the name of your ${ ordinal(i) } sibling?\nfields:\n\
    \  - First Name: user.sibling[i].name.first\n---\nquestion: |\n  Do you have any\
    \ other siblings besides ${ user.sibling }?\nyesno: user.sibling.there_is_another\n\
    ---\nquestion: |\n  Which of the following types of companies has ${ user.sibling[i]\
    \ }\n  hired?\nfields:\n  - no label: user.sibling[i].types_of_companies\n   \
    \ datatype: checkboxes\n    choices:\n      - Bank\n      - Law Firm\n      -\
    \ Exterminator\n      - Financial Advisor\n---\nquestion: |\n  What is the name\
    \ of ${ user.sibling[i].possessive(j) }?\nfields:\n  - Company name: user.sibling[i].company_hired[j].name.text\n\
    ---\nquestion: |\n  In what city does ${ user.sibling[i].company_hired[j] }\n\
    \  do business?\nfields:\n  - City: user.sibling[i].company_hired[j].place_of_business.city\n\
    \  - State: user.sibling[i].company_hired[j].place_of_business.state\n    code:\
    \ states_list()\n---\nmandatory: True\nquestion: All done\nsubquestion: |\n  %\
    \ for sibling in user.sibling:\n  You have a sibling named ${ sibling }.\n \n\
    \  % for company_type in sibling.company_hired.keys():\n  ${ sibling } has hired\
    \ a ${ company_type }\n  called ${ sibling.company_hired[company_type] },\n  which\
    \ has a principal place of business in\n  ${ sibling.company_hired[company_type].place_of_business\
    \ }.\n \n  % endfor\n \n  % endfor"
"nested-objects-list":
  "yaml": |-
    objects:
      - fruit: DAList.using(object_type=Thing, auto_gather=False)
      - vegetable: DAList.using(object_type=Thing, auto_gather=False)
      - people: DAList.using(object_type=Individual, there_are_any=True, complete_attribute='complete')
"nested-veggies":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      veggies.object_type = DAList
      veggies.new('potato', 'turnip')
      veggies.gathered = True
      for item in veggies:
        veggies[item].there_are_any = True
    ---
    question: |
      Is there another ${ i }?
    yesno: veggies[i].there_is_another
    ---
    question: |
      How much does the
      ${ ordinal(j) }
      ${ i }
      weigh?
    fields:
      - Grams: veggies[i][j]
        datatype: number
"nested-veggies-override":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    question: |
      How much does the other
      ${ i } weigh?
    fields:
      - Grams: veggies[i][1]
        datatype: number
    ---
    question: |
      How much does the
      ${ ordinal(j) }
      ${ i } weigh?
    fields:
      - Grams: veggies[i][j]
        datatype: number
"nice-number":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    question: |
      There are ${ nice_number(toads) }
      toads and ${ nice_number(frogs) }
      frogs in the pond.
    buttons:
      - Restart: restart
    sets: all_done
"no-emojis":
  "height": !!int |-
    170
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Third quarter metrics
    subquestion: |
      [NO_EMOJIS]
      We are making more money
      :far-fa-money-bill-alt: than
      we did in the second quarter.

      So you can sleep well tonight! :bed:
"no-label-field":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your Zodiac sign?
    fields:
      - no label: target_variable
"no-mandatory":
  "yaml": |-
    question: |
      How are you doing?
    field: how_doing
    choices:
      - Fine
      - Ill
    ---
    question: |
      What is your favorite color?
    fields:
      Color: favorite_color
    ---
    question: |
      Your favorite color is
      ${ favorite_color }.
    subquestion: |
      % if how_doing == 'Fine':
      I am glad you are doing well.
      % else:
      I am sorry you aren't feeling 100%.
      % endif
"non-required-radio":
  "yaml": |-
    question: |
      Please provide the following information.
    fields:
      - "Do you like apricots?": likes_apricots
        datatype: yesnoradio
      - "Which of these do you like best?": fruit_favorite
        datatype: radio
        required: false
        choices:
          - Apples
          - Oranges
          - Peaches
"normalize":
  "height": !!int |-
    392
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - the_address: Address
    ---
    question: |
      Enter an address
    fields:
      - Address: the_address.address
      - Unit: the_address.unit
        required: False
      - City: the_address.city
      - State: the_address.state
      - Zip: the_address.zip
        required: False
    ---
    mandatory: True
    code: |
      the_address.normalize()
    ---
    mandatory: True
    question: |
      The normalized address
    subquestion: |
      ${ the_address }
"note":
  "height": !!int |-
    420
  "width": !!int |-
    488
  "yaml": "question: |\n  Please fill in the following information.\nfields:\n  -\
    \ Favorite fruit: fruit\n  - Favorite vegetable: vegetable\n  - note: |\n    \
    \  In case you did not know, a \n      mushroom is a fungus, not a\n      vegetable.\n\
    \  - Favorite fungus: mushroom"
"noun-plural":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      There
      % if the_number > 1:
      are
      ${ nice_number(the_number) }
      ${ noun_plural(the_noun) }
      % else:
      is one ${ the_noun }
      % endif
      in the pond.
    fields:
      - Singular noun: the_noun
    sets: all_done
"noyes":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Are you at least 18 years of age?
    noyes: user_is_minor
"number-field":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Describe your possessions.
    fields:
      - Number of cars: number_cars
        datatype: integer
      - Ounces of gold: gold_ounces
        datatype: number
"number-field-step":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    question: |
      How much gold and silver do you have?
    fields:
      - Ounces of gold: gold_ounces
        datatype: number
      - Ounces of silver: silver_ounces
        datatype: number
        step: 0.001
"number-formatting":
  "height": !!int |-
    242
  "width": !!int |-
    488
  "yaml": |-
    code: |
      monthly_income = 43143.26/12
    ---
    question: |
      Your monthly income
    subquestion: |
      Your monthly income is
      ${ monthly_income }
      dollars per month.

      But it would be better to say
      your monthly income is
      ${ '%.2f' % monthly_income }
      dollars per month, or
      ${ '{:.2f}'.format(monthly_income) }
      dollars per month, or
      ${ '{:,.2f}'.format(monthly_income) }
      dollars per month, or
      ${ int(monthly_income) }
      dollars per month, or
      best of all,
      ${ currency(monthly_income) }
      per month.
    mandatory: True
"object":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      protagonist: Individual
      antagonist: Individual
    ---
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
    ---
    question: Who is the villain?
    fields:
      - The villain is: villain
        datatype: object
        default: antagonist
        choices:
          - protagonist
          - antagonist
"object-checkboxes":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    objects:
      protagonist: Individual
      antagonist: Individual
      villain: PartyList
    ---
    mandatory: True
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
      villain.auto_gather = False
    ---
    question: Who are the villains, if any?
    fields:
      no label: villain
      datatype: object_checkboxes
      choices:
        - protagonist
        - antagonist
"object-checkboxes-dalist":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    objects:
      protagonist: Individual
      antagonist: Individual
    ---
    mandatory: True
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
    ---
    question: Who are the villains, if any?
    fields:
      no label: villain
      datatype: object_checkboxes
      choices:
        - protagonist
        - antagonist
"object-checkboxes-default":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    objects:
      protagonist: Individual
      antagonist: Individual
      villain: PartyList.using(auto_gather=False)
    ---
    mandatory: True
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
      villain.append(antagonist)
    ---
    mandatory: True
    question: Who are the villains, if any?
    fields:
      no label: villain
      datatype: object_checkboxes
      choices:
        - protagonist
        - antagonist
"object-default":
  "yaml": |-
    objects:
      protagonist: Individual
      antagonist: Individual
    ---
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
    ---
    question: Who is the villain?
    fields:
      The villain is: villain
      datatype: object_radio
      default: antagonist
      choices:
        - protagonist
        - antagonist
"object-demo":
  "yaml": |-
    mandatory: True
    objects:
      - fruit: DAList
      - feet: DADict
      - colors: DASet
    ---
    mandatory: True
    code: |
      fruit.append('apple', 'pear', 'orange')
      feet['dog'] = 4
      feet['human'] = 2
      feet['bird'] = 2
      colors.add('blue', 'red', 'green')
      fruit.gathered = True
      feet.gathered = True
      colors.gathered = True
    ---
    mandatory: True
    question: |
      Summary of groups
    subquestion: |
      The fruits include ${ fruit }.
      In alphabetical order:

      % for thing in sorted(fruit):
      * ${ thing }
      % endfor

      % for species in feet:
      A ${ species } has ${ feet[species] }
      feet.
      % endfor

      % for animal, number in feet.items():
      There are ${ number } feet on
      a ${ animal }.
      % endfor

      The colors are ${ colors }.
"object-disable-others":
  "height": !!int |-
    284
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    objects:
      protagonist: Individual
      antagonist: Individual
      actors: PartyList
      villain: Individual
    ---
    mandatory: True
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
      actors.append(protagonist)
      actors.append(antagonist)
      actors.auto_gather = False
      actors.gathered = True
    ---
    question: Who is the villain?
    fields:
      - One of these: villain
        datatype: object
        choices: actors
        disable others: True
      - First Name: villain.name.first
      - Last Name: villain.name.last
"object-multiselect-dalist":
  "height": !!int |-
    244
  "width": !!int |-
    488
  "yaml": |-
    question: Who are the villains, if any?
    fields:
      no label: villain
      datatype: object_multiselect
      choices:
        - protagonist
        - antagonist
"object-radio":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      protagonist: Individual
      antagonist: Individual
    ---
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
    ---
    question: Who is the villain?
    fields:
      - The villain is: villain
        datatype: object_radio
        default: antagonist
        choices:
          - protagonist
          - antagonist
"object-radio-address":
  "height": !!int |-
    392
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - shipping: Address
      - billing: Address
    ---
    question: |
      What is your shipping address?
    fields:
      - no label: shipping
        datatype: object_radio
        choices:
          - billing
        object labeler: |
          lambda y: y.on_one_line()
        none of the above: A new address
      - show if:
          variable: shipping
          is: null
        Address: shipping.address
      - show if:
          variable: shipping
          is: null
        Unit: shipping.unit
        required: False
      - show if:
          variable: shipping
          is: null
        City: shipping.city
      - show if:
          variable: shipping
          is: null
        State: shipping.state
        code:
          states_list()
      - show if:
          variable: shipping
          is: null
        Zip: shipping.zip
    ---
    question: |
      What is your billing address?
    fields:
      - Address: billing.address
      - Unit: billing.unit
        required: False
      - City: billing.city
      - State: billing.state
        code:
          states_list()
      - Zip: billing.zip
    ---
    mandatory: True
    question: |
      Your order
    subquestion: |
      I will send your bill to
      ${ billing.on_one_line() }.

      I will ship your order to
      ${ shipping.on_one_line() }.
"object-radio-address-2":
  "yaml": |-
    objects:
      - billing: Address.using(name_on_billing_choices_list='Your billing address')
      - shipping_manual: Address.using(name_on_billing_choices_list='A different address')
    ---
    question: |
      What address should I use as your shipping address?
    fields:
      - no label: shipping
        datatype: object_radio
        choices:
          - billing
          - shipping_manual
        object labeler: |
          lambda y: y.name_on_billing_choices_list
    ---
    question: |
      What is your shipping address?
    fields:
      - Address: shipping_manual.address
      - Unit: shipping_manual.unit
        required: False
      - City: shipping_manual.city
      - State: shipping_manual.state
        code:
          states_list()
      - Zip: shipping_manual.zip
    ---
    question: |
      What is your billing address?
    fields:
      - Address: billing.address
      - Unit: billing.unit
        required: False
      - City: billing.city
      - State: billing.state
        code:
          states_list()
      - Zip: billing.zip
    ---
    mandatory: True
    question: |
      Your order
    subquestion: |
      I will send your bill to
      ${ billing.on_one_line() }.

      I will ship your order to
      ${ shipping.on_one_line() }.
"object-radio-nota":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    question: Who is the villain?
    fields:
      - The villain is: villain
        datatype: object_radio
        default: antagonist
        none of the above: Someone else
        choices:
          - protagonist
          - antagonist
      - First name: villain.name.first
        show if:
          variable: villain
          is: null
      - Last name: villain.name.last
        show if:
          variable: villain
          is: null
"object-selections":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      protagonist: Individual
      antagonist: Individual
      actors: PartyList
    ---
    mandatory: True
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
      actors.append(protagonist)
      actors.append(antagonist)
      actors.auto_gather = False
      actors.gathered = True
    ---
    question: Who is the villain?
    fields:
      - The villain is: villain
        datatype: object
        choices: actors
"object-try-1":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    include: basic-questions.yml
    ---
    question: |
      What is your favorite date?
    fields:
      - Greatest Date Ever: favorite_date
        datatype: date
        choices:
          - ${ client.birthdate }
          - ${ advocate.birthdate }
    ---
    question: |
      The best day in the history of
      the world was ${ favorite_date }.
    mandatory: True
"object-try-2":
  "height": !!int |-
    338
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Who is the tallest?
    fields:
      - Tallest person: tallest_person
        choices:
          - ${ client }
          - ${ advocate }
"object-try-3":
  "height": !!int |-
    338
  "width": !!int |-
    488
  "yaml": |-
    include: basic-questions.yml
    ---
    question: Who is the villain?
    fields:
      no label: villain
      datatype: object
      default: client
      choices:
        - client
        - advocate
    ---
    question: |
      The villain, ${ villain }, was
      born on
      ${ format_date(villain.birthdate) }.
    mandatory: True
"objects":
  "height": !!int |-
    338
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - hero: Individual
      - villain: Individual
"ocr":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Here is the text of the file
    subquestion: |
      ${ ocr_file(the_file) }
    ---
    question: |
      Please upload a file
    fields:
      - File: the_file
        datatype: files
"ocr-background":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      the_file
      the_task
      user_testimonial
      if not the_task.ready():
        waiting_screen
    ---
    question: |
      Please upload a file
    fields:
      - File: the_file
        datatype: files
    ---
    code: |
      the_task = background_action('ocr_start', None)
    ---
    event: ocr_start
    code: |
      the_text = ocr_file(the_file)
      background_response_action('ocr_finish', text=the_text)
    ---
    event: ocr_finish
    code: |
      text_of_the_file = action_argument('text')
      background_response()
    ---
    question: |
      How do you describe what happened?
    fields:
      - no label: user_testimonial
        input type: area
    ---
    event: waiting_screen
    reload: 5
    question: |
      Please wait.
    ---
    mandatory: True
    question: |
      All done
    subquestion: |
      You claim that:

      ${ quote_paragraphs(user_testimonial) }

      The document states:

      ${ quote_paragraphs(text_of_the_file) }
"ocr-chord":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    mandatory: true
    code: |
      the_task
      final_screen
    ---
    code: |
      the_task = ocr_file_in_background(the_file)
    ---
    question: |
      Please upload one or more files.
    fields:
      - File: the_file
        datatype: files
    ---
    question: |
      What is your nickname?
    fields:
      - Nickname: nickname
    ---
    event: final_screen
    question: |
      Here is the text of the uploaded
      file, ${ nickname }.
    subquestion: |
      % if the_task.ready():
      The text is: ${ the_task.get() }
      % else:
      Still processing.  Please press Refresh
      after a few seconds to see if the task
      is done.
      % endif
    buttons:
      - Refresh: refresh
"ocr-chord-refresh":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    mandatory: true
    code: |
      the_files
      if the_task.ready():
        final_screen
      else:
        waiting_screen
    ---
    code: |
      the_task = ocr_file_in_background(the_files, 'refresh')
    ---
    event: waiting_screen
    question: |
      Please wait.
    subquestion: |
      Your document is being processed.
      This may take several minutes.

      The text of your document will be
      shown on the screen when the
      processing is finished.
    ---
    event: final_screen
    question: |
      Here is the text of the uploaded
      file.
    subquestion: |
      ${ the_task.get() }
    ---
    question: |
      Please upload one or more files.
    fields:
      - File: the_files
        datatype: files
"ocr-classify":
  "yaml": |-
    code: |
      ml = SimpleTextMachineLearner(group_id='ocr_ai')
    ---
    initial: True
    code: |
      if defined('classification'):
        entry_to_classify.classify(classification)
        del classification
      entry_to_classify = ml.one_unclassified_entry()
      if entry_to_classify is not None:
        need(classification)
    ---
    question: |
      How should this be classified?
    subquestion: |
      ${ entry_to_classify.independent }
    fields:
      - no label: classification
    ---
    mandatory: True
    question: |
      There is nothing left to classify.
    buttons:
      - Check again: refresh
"ocr-save-and-predict":
  "yaml": |-
    mandatory: True
    code: |
      the_file.set_attributes(persistent=True)
    ---
    mandatory: True
    code: |
      the_task
      if not the_task.ready():
        waiting_screen
      ml = SimpleTextMachineLearner(group_id='ocr_ai')
      ml.save_for_classification(phrase, info=the_file)
      predictions = ml.predict(phrase)
    ---
    question: |
      Please upload or take a
      picture of your legal document.
    fields:
      - no label: the_file
        datatype: file
    ---
    code: |
      the_task = background_action('ocr_start', None)
    ---
    event: ocr_start
    code: |
      background_response_action('ocr_finish', text=ocr_file(the_file))
    ---
    event: ocr_finish
    code: |
      phrase = action_argument('text')
      background_response()
    ---
    event: waiting_screen
    reload: 5
    question: |
      Please wait.
    ---
    mandatory: True
    question: |
      Your document
    subquestion: |
      % if len(predictions):
      Your document is a ${ predictions[0] }.
      % else:
      There is not enough training data
      to make a prediction yet.
      % endif
    buttons:
      - Restart: restart
"on-change":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    on change:
      married: |
        for item in income.complete_elements():
          item.invalidate_attr('amount')
        income.reset_gathered(mark_incomplete=True)
    ---
    question: |
      Are you married?
    yesno: married
    ---
    question: |
      % if married:
      What is the ${ ordinal(i) } income item
      that you and your spouse earn?
      % else:
      What is your ${ ordinal(i) } income source?
      % endif
    fields:
      - Name: income[i].name.text
      - Amount per year: income[i].amount
        datatype: currency
"only-sets":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the best color?
    fields:
      - Color: best_color
    ---
    question: |
      What is the time of day?
    field: time_of_day
    choices:
      - Night
      - Day
    ---
    only sets: best_thing
    code: |
      if time_of_day == 'Night':
        best_thing = 'astronomy'
        best_color = 'black'
      else:
        best_thing = 'the beach'
        best_color = 'blue'
    ---
    mandatory: True
    field: initial_screen
    question: |
      According to you, the best color
      is ${ best_color }.
    ---
    mandatory: True
    question: |
      Since the best thing is
      ${ best_thing }, the best color is
      ${ best_color }.
"optional-field":
  "height": !!int |-
    326
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What are your favorite things to eat?
    subquestion: |
      You may not like any vegetables,
      but at least tell me your favorite
      fruit.
    fields:
      - Vegetable: target_variable
        required: False
      - Fruit: other_target_variable
"order-of-blocks":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Do you like penguins?
    yesno: user_likes_penguins
    ---
    question: |
      Do you like elephants?
    yesno: user_likes_elephants
    ---
    mandatory: true
    question: |
      Hello!
    buttons:
      - Hello to you: continue
    ---
    mandatory: true
    question: |
      What is your name?
    fields:
      - Name: user_name
    ---
    mandatory: true
    question: |
      Your favorite food is
      ${ favorite_food }.

      % if user_likes_penguins:
      You are a fan of penguins.
      % else:
      You detest penguins, for some
      strange reason.
      % endif
    ---
    question: |
      What is your favorite food?
    fields:
      - Favorite food: favorite_food
"ordinal-number":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      The ${ ordinal_number(toads) }
      toad is here to see you.
    buttons:
      - Restart: restart
    sets: all_done
"other":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What kind of car do you drive?
    fields:
      - Make: car_make
        choices:
          - Honda
          - Toyota
          - Mazda
          - Other
      - Other make: car_make
        show if:
          variable: car_make
          is: Other
"override":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    include:
      - question-library.yml
    ---
    question: |
      So, about that dance tonight . . .
      wanna go?
    yesno: user_wants_to_go_to_dance
    ---
    mandatory: True
    code: |
      if user_agrees_it_is_a_nice_evening and user_wants_to_go_to_dance:
        good_news
    ---
    mandatory: True
    question: |
      Say, I have to run.  Bye!
    ---
    event: good_news
    question: |
      That is splendid news!
"page-numbers":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: Here is your document.
    subquestion: It has page numbers.
    attachments:
      - name: Summary of Benefits
        filename: benefits_summary
        metadata:
          FirstFooterRight: Page [PAGENUM]
          FooterRight: Page [PAGENUM]
        content: |
          [BOLDCENTER] Summary of Benefits

          ${ client } is entitled to
          benefits plan ${ benefits }.
    mandatory: True
"password-field":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Enter your username and password.
    fields:
      - Username: user_name
      - Password: target_variable
        datatype: password
"past-tense":
  "height": !!int |-
    200
  "width": !!int |-
    488
  "yaml": |-
    question: |
      I ${ verb_past(the_verb) }
      the apple.
    fields:
      - Present tense verb: the_verb
    sets: all_done
"path-and-mimetype":
  "height": !!int |-
    470
  "width": !!int |-
    488
  "yaml": |-
    code: |
      (filename_a, mimetype_a) = path_and_mimetype('data/static/hello.pdf')
      (filename_b, mimetype_b) = path_and_mimetype('docassemble.demo:data/static/house.png')
      (filename_c, mimetype_c) = path_and_mimetype('https://docassemble.org/img/docassemble-logo.jpg')
    ---
    mandatory: True
    question: |
      File locations and MIME types
    subquestion: |
      #### `data/static/hello.pdf`

      Path **${ filename_a }** has
      MIME type **${ mimetype_a }**.

      #### `docassemble.demo:data/static/house.png`

      Path **${ filename_b }** has
      MIME type **${ mimetype_b }**.

      #### `https://docassemble.org/img/docassemble-logo.jpg`

      Path **${ filename_c }** has
      MIME type **${ mimetype_c }**.
"pdf-a":
  "height": !!int |-
    599
  "width": !!int |-
    488
  "yaml": |-
    question: Your document is ready.
    subquestion: |
      If you open the PDF file and look at
      its properties, you will see that it
      is a PDF/A file.
    attachment:
      - name: A hello world document
        filename: Hello_World_Document
        valid formats:
          - pdf
        description: |
          A document with a classic message
        content: |
          Hello, world!
        pdf/a: True
    mandatory: True
"pdf-concatenate":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - static_file: DAStaticFile.using(filename='star.pdf')
    ---
    attachment:
      variable name: assembled_file
      filename: assembled_file
      content: |
        Hello world!
    ---
    question: |
      Upload a file
    fields:
      - File: uploaded_file
        datatype: file
    ---
    mandatory: True
    code: |
      output_file = pdf_concatenate(uploaded_file, assembled_file, static_file, filename="result.pdf")
    ---
    mandatory: True
    question: |
      Here is your concatenated file.
    subquestion: |
      ${ output_file }
"pdf-fill":
  "height": !!int |-
    218
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Here is your PDF form
    attachment:
      name: A filled-in form
      filename: filled-form
      pdf template file: sample-form.pdf
      fields:
        - Your Name: |
            ${ user }
        - Your Organization: |
            ${ user.organization }
        - Apple Checkbox: |
            ${ likes_apples }
        - Orange Checkbox: |
            ${ likes_oranges }
        - Pear Checkbox: |
            ${ likes_pears }
        - Toast Checkbox: |
            ${ likes_toast }
    mandatory: True
"pdf-fill-code":
  "height": !!int |-
    340
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Here is your PDF form
    attachments:
      - name: A filled-in form
        filename: filled-form
        pdf template file: sample-form.pdf
        fields:
          Your Name: |
            ${ user }
          Your Organization: |
            ${ user.organization }
          Apple Checkbox: |
            ${ likes_apples }
          Pear Checkbox: |
            ${ likes_pears }
        code: |
          {"Orange Checkbox": likes_oranges,
           "Toast Checkbox": likes_toast}
    mandatory: True
"pdf-fill-export-values":
  "yaml": |-
    question: |
      Here is your PDF form
    attachment:
      name: A filled-in form
      filename: filled-form
      pdf template file: sample-form-different-export-values.pdf
      fields:
        - Your Name: |
            ${ user }
        - Your Organization: |
            ${ user.organization }
        - Apple Checkbox: |
            ${ likes_apples }
        - Orange Checkbox: |
            ${ likes_oranges }
        - Pear Checkbox: |
            ${ likes_pears }
        - Toast Checkbox: |
            ${ likes_toast }
    mandatory: True
"pdf-fill-not-editable":
  "height": !!int |-
    282
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Here is your PDF form
    attachment:
      name: A filled-in form
      filename: filled-form
      pdf template file: sample-form.pdf
      editable: False
      fields:
        Your Name: |
          ${ user }
        Your Organization: |
          ${ user.organization }
        Apple Checkbox: |
          ${ likes_apples }
        Orange Checkbox: |
          ${ likes_oranges }
        Pear Checkbox: |
          ${ likes_pears }
        Toast Checkbox: |
          ${ likes_toast }
    mandatory: True
"pdf-fill-signature":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please sign your name below.
    signature: user.signature
    under: |
      ${ user }
    ---
    sets: final_screen
    question: Congratulations!
    subquestion: |
      You have now transferred everything
      you own to ${ friend }.
    attachment:
      - name: Transfer of Ownership
        filename: Transfer-of-Ownership
        pdf template file: |
          Transfer-of-Ownership.pdf
        fields:
          - "grantor": ${ user }
          - "grantee": ${ friend }
          - "collection": ${ prized_collection }
          - "signature": ${ user.signature }
"pdf-fill-signature-alt":
  "yaml": |-
    question: |
      Please sign your name below.
    signature: user.signature
    under: |
      ${ user }
    ---
    sets: final_screen
    question: Congratulations!
    subquestion: |
      You have now transferred everything
      you own to ${ friend }.
    attachment:
      - name: Transfer of Ownership
        filename: Transfer-of-Ownership
        pdf template file: |
          Transfer-of-Ownership.pdf
        field code:
          - "grantor": user
          - "grantee": friend
          - "collection": prized_collection
          - "signature": user.signature
"pdf-fill-skip-undefined":
  "yaml": |-
    question: |
      Here is your PDF form
    subquestion: |
      Note that the `user.organization`
      and `likes_oranges` variables are
      not defined, but the document was
      assembled anyway.
    attachment:
      name: A filled-in form
      filename: filled-form
      pdf template file: sample-form.pdf
      skip undefined: True
      fields:
        - Your Name: |
            ${ user }
        - Your Organization: |
            ${ user.organization }
        - Apple Checkbox: |
            ${ likes_apples }
        - Orange Checkbox: |
            ${ likes_oranges }
        - Pear Checkbox: |
            ${ likes_pears }
        - Toast Checkbox: |
            ${ likes_toast }
    mandatory: True
"pdf-template-alt-1":
  "height": !!int |-
    218
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Here is your document.
    attachment:
      pdf template file: letter.pdf
      fields:
        - letter_date: ${ today() }
        - subject_line: ${ subject_of_letter }
        - recipient_address: ${ recipient.address_block() }
"pdf-template-alt-2":
  "height": !!int |-
    218
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Here is your document.
    attachment:
      pdf template file: letter.pdf
      field code:
        - letter_date: today()
        - subject_line: subject_of_letter
        - recipient_address: recipient.address_block()
"pdf-template-alt-3":
  "height": !!int |-
    218
  "width": !!int |-
    488
  "yaml": "mandatory: True\nquestion: Here is your document.\nattachment:\n  pdf template\
    \ file: letter.pdf\n  code: |\n    {'letter_date': today(), \n     'subject_line':\
    \ subject_of_letter, \n     'recipient_address': recipient.address_block()}"
"pdf-template-alt-4":
  "height": !!int |-
    218
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Here is your document.
    attachment:
      pdf template file: letter.pdf
      code: letter_variables
    ---
    code: |
      letter_variables = {}
      letter_variables['letter_date'] = today()
      if letter_type == 'threat':
        letter_variables['subject_line'] = "Litigation hold"
      else:
        letter_variables['subject_line'] = "Matter we discussed"
      letter_variables['recipient_address'] = recipient.address_block()
    reconsider: True
"periodic-amount":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your salary?
    fields:
      - Amount: user_salary
        datatype: currency
      - Period: period
        code: |
          period_list()
    ---
    question: Result of question
    subquestion: |
      user_salary is
      ${ user_salary }
      and period is
      ${ period }.
    mandatory: True
"periodic-value":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user_salary: PeriodicValue
    ---
    question: |
      Do you make money from working?
    yesno: user_salary.exists
    ---
    question: |
      What is your salary?
    fields:
      - Amount: user_salary.value
        datatype: currency
      - Period: user_salary.period
        default: 1
        choices:
          - Annually: 1
          - Monthly: 12
          - Per week: 54
    ---
    mandatory: True
    question: |
      % if user_salary.exists:
      You make ${ currency(user_salary) }
      per year.
      % else:
      Get a job!
      % endif
"persistent-task":
  "height": !!int |-
    253
  "width": !!int |-
    488
  "yaml": "default screen parts:\n  under: |\n    % if task_performed('fruit_gathered',\
    \ persistent=True):\n    The task has been performed.\n    % else:\n    The task\
    \ has not been performed.\n    % endif\n---\nmandatory: True\ncode: |\n  favorite_fruit\n\
    \  mark_task_as_performed('fruit_gathered', persistent=True)\n  final_screen\n\
    ---\nquestion: |\n  What is your favorite fruit?\nsubquestion: |\n  Note whether\
    \ the task has been \n  performed yet.\nfields:\n  - Fruit: favorite_fruit\n---\n\
    event: final_screen\nquestion: |\n  You like ${ favorite_fruit }\nsubquestion:\
    \ |\n  Press the Back button and \n  then notice whether the task \n  has been\
    \ performed."
"post":
  "height": !!int |-
    308
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the airspeed velocity of an
      unladen swallow?
    fields:
      - Velocity: swallow_velocity
    under: |
      Note: if you did not catch this
      movie reference, you need to
      improve your cultural literacy.
    post: |
      This is the `post`, which comes
      after `under`.
"postpopulate-list":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Individual
      - user.mom: Individual
      - user.favorite_things: |
          DAList.using(object_type=Thing)
    ---
    code: |
      if user.likes_something:
        user.favorite_things.there_are_any = True
      else:
        default_things_appended
        user.favorite_things.there_are_any = False
        user.favorite_things.there_is_another = False
    ---
    code: |
      if user.likes_another_thing:
        del user.likes_another_thing
        user.favorite_things.there_is_another = True
      else:
        default_things_appended
        user.favorite_things.there_is_another = False
    ---
    code: |
      user.favorite_things.append(user.mom)
      user.favorite_things.appendObject(
        name='apple pie'
      )
      default_things_appended = True
    ---
    question: |
      What is your mother's name?
    fields:
      - First name: user.mom.name.first
      - Last name: user.mom.name.last
    ---
    question: |
      What is your ${ ordinal(i) }
      favorite thing?
    fields:
      - Thing: user.favorite_things[i].name.text
    ---
    question: |
      Do you have any favorite things?
    yesno: user.likes_something
    ---
    question: |
      Besides ${ user.favorite_things },
      do you have any other favorite
      things?
    yesno: user.likes_another_thing
    ---
    mandatory: True
    question: |
      Your favorite things are
      ${ user.favorite_things }.
"pre":
  "height": !!int |-
    169
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the airspeed velocity of an
      unladen swallow?
    fields:
      - Velocity: swallow_velocity
    pre: |
      Note: if you do not catch the
      movie reference in this question,
      you need to improve your cultural
      literacy.
"prepopulate-list":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Individual
      - user.mom: Individual
      - user.favorite_things: |
          DAList.using(object_type=Thing)
    ---
    code: |
      user.favorite_things.clear()
      user.favorite_things.append(user.mom)
      user.favorite_things.appendObject(
        name='apple pie'
      )
      user.favorite_things.there_are_any = True
    ---
    question: |
      What is your mother's name?
    fields:
      - First name: user.mom.name.first
      - Last name: user.mom.name.last
    ---
    question: |
      What is your ${ ordinal(i) }
      favorite thing?
    fields:
      - Thing: user.favorite_things[i].name.text
    ---
    question: |
      Besides ${ user.favorite_things },
      do you have any other favorite
      things?
    yesno: user.favorite_things.there_is_another
    ---
    mandatory: True
    question: |
      Your favorite things are
      ${ user.favorite_things }.
"prevent-back":
  "height": !!int |-
    246
  "width": !!int |-
    488
  "yaml": |-
    code: |
      app_submitted = True
      prevent_going_back()
"prevent-going-back":
  "height": !!int |-
    246
  "width": !!int |-
    488
  "yaml": |-
    prevent going back: True
    question: |
      Your application for ${ service }
      has been submitted.
    mandatory: True
"progress":
  "height": !!int |-
    116
  "width": !!int |-
    488
  "yaml": |-
    features:
      progress bar: True
    ---
    question: Are you doing well?
    yesno: user_is_well
    progress: 20
    ---
    question: Done with the interview.
    subquestion: |
      % if user_is_well:
      I am glad you are doing well.
      % else:
      I am sorry to hear that!
      % endif
    progress: 100
    mandatory: True
"progress-features":
  "height": !!int |-
    116
  "width": !!int |-
    488
  "yaml": |-
    features:
      progress bar: True
"progress-features-percentage":
  "height": !!int |-
    116
  "width": !!int |-
    488
  "yaml": |-
    features:
      progress bar: True
      show progress bar percentage: True
"progress-multi":
  "height": !!int |-
    116
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      first_part_done
      second_part_done
      final_screen
    ---
    code: |
      user_is_well
      user_is_bigger_than_a_breadbox
      ready_for_second_part
      set_progress(0)
      first_part_done = True
    ---
    code: |
      user_likes_turnips
      user_likes_clownfish
      second_part_done = True
"qr-code":
  "height": !!int |-
    420
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Read the news on your mobile
      phone
    subquestion: |
      If you have a QR code reader on
      your phone, point it here:

      ${ qr_code('https://news.google.com') }
    mandatory: True
"qr-code-demo":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": "mandatory: True\nquestion: Here is a URL for you in a QR code\nsubquestion:\
    \ |\n  [QR https://news.google.com, 200px, Google News]\nattachment:\n  name:\
    \ Your QR code\n  filename: your_code\n  content: |\n    Use the QR reader on\
    \ your smartphone to take a picture of this:\n    \n    [QR https://news.google.com]"
"quantity-noun":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      You have ${ quantity_noun(4, "apple") }.
"question":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the airspeed velocity of an
      unladen swallow?
    fields:
      - Velocity: swallow_velocity
"question-autoterms":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    question: Have you ever met a creeper?
    subquestion: |
      If you have met a zombie pigman, you
      have almost certainly met a creeper.
    yesno: met_a_creeper
    auto terms:
      creeper: |
        A tall ${ creeper_color } creature
        that explodes if you get too close.
      zombie pigman: |
        A harmless creature who carries a gold
        sword.
"question-back-button":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    features:
      question back button: True
      navigation back button: False
"question-back-button-sometimes":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    question: Is the sky blue?
    yesno: sky_is_blue
    back button: |
      not user_is_well
"question-back-button-sometimes-label":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    question: Is the sky blue?
    yesno: sky_is_blue
    back button: True
    back button label: |
      Wait, go back
"question-help-button":
  "height": !!int |-
    130
  "width": !!int |-
    488
  "yaml": |-
    features:
      question help button: True
    ---
    interview help:
      label: More info
      heading: About this interview
      content: |
        This is an interview about fruit.
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    help:
      label: Huh?
      heading: What is a fruit?
      content: |
        A fruit is a fleshy edible
        part of a plant that has
        seeds.
    ---
    question: |
      What is your favorite color?
    fields:
      - Color: favorite_color
    help:
      heading: What is a color?
      content: |
        Every photon has a frequency, which
        determines its color.
    ---
    question: |
      What is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
"question-help-button-off":
  "height": !!int |-
    130
  "width": !!int |-
    488
  "yaml": |-
    features:
      question help button: False
    ---
    interview help:
      label: More info
      heading: About this interview
      content: |
        This is an interview about fruit.
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    help:
      label: Huh?
      heading: What is a fruit?
      content: |
        A fruit is a fleshy edible
        part of a plant that has
        seeds.
    ---
    question: |
      What is your favorite color?
    fields:
      - Color: favorite_color
    help:
      heading: What is a color?
      content: |
        Every photon has a frequency, which
        determines its color.
    ---
    question: |
      What is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
"question-library":
  "yaml": |-
    question: |
      Interested in going to the dance tonight?
    yesno: user_wants_to_go_to_dance
"question-markup":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the *airspeed* velocity of an
      unladen ${ african_or_european }
      swallow?
    fields:
      - Velocity: swallow_velocity
"question-sequence":
  "yaml": |-
    mandatory: True
    question: |
      Let's think about apples.
    fields:
      - "Are apples good?": question_one_a
        datatype: yesnoradio
      - "Your favorite variety": question_one_b
    ---
    mandatory: True
    question: |
      Are peaches good?
    yesno: question_two
    ---
    mandatory: True
    question: |
      Are turnips good?
    yesno: question_three
    ---
    mandatory: True
    question: |
      Is linoleum good?
    yesno: question_four
    ---
    mandatory: True
    question: |
      Are automobiles good?
    yesno: question_five
    ---
    mandatory: True
    question: |
      Is furniture good?
    yesno: question_six
    ---
    mandatory: True
    question: |
      Was this interview good?
    yesno: question_seven
    ---
    mandatory: True
    question: |
      Thanks for answering my questions!
"question-terms":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    question: Have you ever met a {creeper}?
    subquestion: |
      If you have met a {zombie pigman}, you
      have almost certainly met a creeper.
    yesno: met_a_creeper
    terms:
      creeper: |
        A tall ${ creeper_color } creature
        that explodes if you get too close.
      zombie pigman: |
        A harmless creature who carries a gold
        sword.
"question-terms-alternate":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    question: Have you ever met a {creeper}?
    subquestion: |
      If you have met a
      {zombie pigman|zombified pigman},
      you have almost certainly met a creeper.
    yesno: met_a_creeper
    terms:
      creeper: |
        A tall ${ creeper_color } creature
        that explodes if you get too close.
      zombie pigman: |
        A harmless creature who carries a gold
        sword.
"questionless":
  "yaml": |-
    mandatory: True
    code: |
      json_response({'final': True, 'inhabitants': inhabitant_count})
    ---
    code: |
      if favorite_number == 42 and user_agrees_to_waive_penalties:
        inhabitant_count = 2
      else:
        inhabitant_count = 2000 + favorite_number * 45
"quote_paragraphs":
  "height": !!int |-
    288
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Your allegations
    subquestion: |
      You allege that:

      ${ quote_paragraphs(allegations) }
"radio-list":
  "height": !!int |-
    554
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Describe your car.
    fields:
      - Number of wheels: wheels_on_car
        datatype: integer
      - Type: car_type
        input type: radio
        choices:
          - Convertible
          - Hatchback
          - Sedan
      - Model: car_country
        input type: radio
        choices:
          - BMW: Germany
          - Buick: United States
          - Honda: Japan
          - Toyota: Japan
"radio-list-mobile":
  "height": !!int |-
    732
  "width": !!int |-
    385
  "yaml": |-
    question: |
      Describe your car.
    fields:
      - Number of wheels: wheels_on_car
        datatype: integer
      - Type: car_type
        datatype: radio
        choices:
          - Convertible
          - Hatchback
          - Sedan
      - Model: car_country
        datatype: radio
        choices:
          - BMW: Germany
          - Buick: United States
          - Honda: Japan
          - Toyota: Japan
"range":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    question: |
      On a scale from 1 to 10, how
      much do you like these animals?
    fields:
      - Possums: possum_preference
        datatype: range
        min: 1
        max: 10
        step: 0.5
      - Rabbits: rabbit_preference
        datatype: range
        min: 1
        max: 10
"range-log":
  "height": !!int |-
    241
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the airspeed velocity,
      in miles per hour, of an
      unladen swallow?
    fields:
      - Velocity: velocity
        datatype: range
        min: 1
        max: 10000
        step: 10
        default: 10
        scale: logarithmic
"raw-html":
  "height": !!int |-
    240
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - raw html: |
          <div class="p-4 mb-3 rounded bg-danger">
      - Favorite fruit: favorite_fruit
      - raw html: |
          </div>
"read-qr":
  "height": !!int |-
    515
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please upload a file (or files) with
      a QR code.
    fields:
      - File: user_upload
        datatype: files
    ---
    question: |
      Codes found
    subquestion: |
      The following codes were found:

      % for code in read_qr(user_upload):
      * ${ code }
      % endfor
    mandatory: True
"reconsider":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    code: |
      cat_food_cans_needed = number_of_cats * 4
    reconsider: True
"reconsider-function":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    code: |
      number_of_pets = number_of_cats + number_of_dogs
    ---
    question: |
      You have
      ${ nice_number(number_of_pets) }
      pets.
    subquestion: |
      However, I do not think
      you have been totally honest.
    field: interim_report
    ---
    question: |
      Do you want a goldfish?
    yesno: wants_goldfish
    ---
    event: final_report
    question: |
      You really have
      ${ nice_number(number_of_pets) }
      pets.
    subquestion: |
      % if wants_goldfish:
      You would rather have a goldfish.
      % endif
    ---
    mandatory: True
    code: |
      interim_report
      ask_dogs_again
      reconsider('number_of_pets')
      final_report
"redact":
  "height": !!int |-
    362
  "width": !!int |-
    488
  "yaml": |-
    template: petition_text
    content: |
      Dear Judge,

      My name is ${ user }.
      I have a claim against
      the defendant.  A big one.

      My SSN is ${ redact(user.ssn) }.
      My phone number is
      ${ user.phone_number }.

      My home address is:

      ${ redact(user.address) }

      I demand ${ currency(money_claimed) }.

      Thank you.

      Sincerely,

      ${ user }
    ---
    mandatory: True
    question: |
      Here is your document.
    subquestion: |
      You need to print both copies
      and file them in court.

      The unredacted version goes
      to the judge, and the redacted
      version will go in the public
      record.
    attachments:
      - name: Unredacted petition
        filename: petition_unredacted
        redact: False
        valid formats:
          - pdf
          - rtf
          - docx
        content: |
          ${ petition_text }
      - name: Redacted petition
        filename: petition_redacted
        valid formats:
          - pdf
          - rtf
          - docx
        content: |
          ${ petition_text }
"redis":
  "height": !!int |-
    199
  "width": !!int |-
    488
  "yaml": "objects:\n  r: DARedis\n---\nmandatory: True\ncode: |\n  key = r.key('my_variable')\n\
    \  r.set(key, 'hello world')\n---\nmandatory: True\nquestion: |\n  Value has been\
    \ retrieved from\n  the redis server.\nsubquestion: |\n  The key is `${ key }`.\n\
    \  \n  The value is \"${ r.get(key).decode() }\"."
"redis-data":
  "height": !!int |-
    547
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - r: DARedis
    ---
    question: |
      Upload a file.
    subquestion: |
      Note: if someone else uses this
      interview in the 30 seconds
      after you upload the file,
      your file will be shown to
      that user.
    fields:
      - File: uploaded_file
        datatype: file
    ---
    code: |
      mykey = r.key('upload')
    ---
    code: |
      file_from_redis = r.get_data(mykey)
    ---
    mandatory: True
    code: |
      if file_from_redis is None:
        uploaded_file.set_attributes(private=False)
        r.set_data(mykey, uploaded_file, expire=30)
        del file_from_redis
    comment: |
      If there is no file in Redis, we
      get the user to upload a file.
      Then we undefine file_from_redis
      (which is None) so that in the
      next question, the interview will
      try to fetch the file from Redis
      again.
    ---
    mandatory: True
    question: |
      The file
    subquestion: |
      ${ file_from_redis }
"refresh":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      tell_time
    ---
    event: tell_time
    question: |
      The current time is
      ${ current_datetime().format_time() }.
    buttons:
      - Tell me again: refresh
"relationships":
  "yaml": |-
    objects:
      - tree: RelationshipTree
"reload":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    reload: True
    question: |
      You have viewed this screen
      ${ counter }
      ${ noun_plural('time', counter) }.
    field: acknowledged
"required-code":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: Do you like soda?
    yesno: user_likes_soda
    ---
    question: |
      What are your favorite
      things to drink?
    fields:
      - Favorite Beverage Overall: favorite_beverage
      - Favorite Soda: favorite_soda
        required: user_likes_soda
"reset":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    reset:
      - cat_food_cans_needed
"response":
  "height": !!int |-
    23
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      data = {'fruit': 'apple', 'pieces': 2}
      response(json.dumps(data), content_type="application/json")
"response-hello":
  "yaml": |-
    mandatory: True
    code: |
      response("Hello, world!")
"response-json":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "objects:\n  - user: Individual\n---\nmandatory: True\ncode: |\n  multi_user\
    \ = True\n---\nevent: query_fruit\ncode: |\n  data = {'fruit': favorite_fruit,\
    \ 'pieces': number_of_pieces}\n  json_response(data)\n---\nmandatory: True\nquestion:\
    \ |\n  You currently have\n  ${ nice_number(number_of_pieces) }\n  ${ noun_plural('piece',\
    \ number_of_pieces) }\n  of\n  ${ noun_singular(favorite_fruit) }.\nsubquestion:\
    \ |\n  Use\n  [this link](${ interview_url_action('query_fruit') })\n  to query\
    \ the information from\n  another application.\n\n  You can also change the \n\
    \  [fruit](${ url_action('favorite_fruit') })\n  and the\n  [number of pieces](${\
    \ url_action('number_of_pieces') })."
"response-svg":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    sets: all_done
    code: |
      svg_image = """\
      <?xml version="1.0" encoding="UTF-8" standalone="no"?>
      <svg
         xmlns:dc="http://purl.org/dc/elements/1.1/"
         xmlns:cc="http://creativecommons.org/ns#"
         xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns="http://www.w3.org/2000/svg"
         version="1.1"
         id="svg2"
         width="100"
         height="100">
        <circle
           id="circle4"
           fill="red"
           stroke-width="3"
           stroke="black"
           r="40"
           cy="50"
           cx="50" />
      </svg>
      """
      response(binaryresponse=svg_image, content_type="image/svg+xml")
"resume-button-label":
  "height": !!int |-
    234
  "width": !!int |-
    488
  "yaml": |-
    event: review_answers
    question: |
      Revisit your answers
    review:
      - Revisit fruit: fruit
        button: |
          You indicated you liked
          ${ fruit }.
      - Revisit vegetable: vegetable
        button: |
          You indicated you liked
          ${ vegetable }.
      - Revisit fungus: fungi
        button: |
          You indicated you liked
          ${ fungi }.
    resume button label: Keep going
"review":
  "height": !!int |-
    538
  "width": !!int |-
    488
  "yaml": |-
    event: review_answers
    question: |
      Review your answers
    review:
      - note: |
          Welcome to the review of answers.
      - note: |
          #### Your identity
        show if: user.name.first
      - Change your name: user.name.first
        help: |
          You said your name was
          **${ user.name }**.
      - note: |
          #### Your favorite foods
        show if: fruit
      - Revisit Fruit: fruit
        button: |
          You said you liked ${ fruit }.
      - Revisit Vegetable: vegetable
        button: |
          You said you liked ${ vegetable }.
      - Revisit Fungus: fungi
        button: |
          You said you liked ${ fungi }.
      - note: |
          We suspect you prefer
          ${ fruit } to ${ vegetable }.
"review-1":
  "height": !!int |-
    266
  "width": !!int |-
    488
  "yaml": |-
    event: review_answers
    question: |
      Revisit questions
    subquestion: |
      These are the questions you have
      answered so far.  Click to revisit.
    review:
      - Favorite fruit: fruit
      - Favorite vegetable: vegetable
      - Favorite fungus: fungi
    ---
    mandatory: True
    code: |
      menu_items = [ action_menu_item('Review Answers', 'review_answers') ]
"review-10":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Review your answers
    review:
      - note: |
          Please review your favorite fruits
          and vegetables.
      - Edit:
          - favorite_fruit
        button: |
          #### Favorite fruit

          You said your favorite
          fruit was **${ favorite_fruit }**.
      - Edit:
          - favorite_vegetable
        button: |
          #### Favorite vegetable

          You said your favorite
          fruit was **${ favorite_vegetable }**.
        css class: bg-warning-subtle
      - note: |
          #### Best fruits

          ${ fruit_list.table }

          ${ fruit_list.add_action() }
        css class: bg-secondary-subtle
    continue button field: show_review_screen
"review-2":
  "height": !!int |-
    258
  "width": !!int |-
    488
  "yaml": "event: review_answers\nquestion: |\n  Revisit your answers\nreview:\n \
    \ - Revisit fruit: fruit\n    button: |\n      You said your favorite fruit was\n\
    \      ${ fruit }.\n  - Revisit vegetable: vegetable\n    button: |\n      You\
    \ said your favorite vegetable\n      was ${ vegetable }.\n  - Revisit fungus:\
    \ fungi\n    button: |\n      You said your favorite fungus \n      was ${ fungi\
    \ }."
"review-3":
  "height": !!int |-
    258
  "width": !!int |-
    488
  "yaml": |-
    event: review_answers
    question: |
      Revisit your answers
    review:
      - note: |
          Revisit your food preferences.
        show if: fruit
      - Favorite fruit: fruit
      - Favorite vegetable: vegetable
      - Favorite fungus: fungi
"review-4":
  "height": !!int |-
    202
  "width": !!int |-
    488
  "yaml": |-
    event: review_answers
    question: |
      Revisit your answers
    review:
      - Favorite fruit: fruit
        help: |
          You indicated you liked
          ${ fruit }.
      - Favorite vegetable: vegetable
        help: |
          You indicated you liked
          ${ vegetable }.
      - Favorite fungus: fungi
        help: |
          You indicated you liked
          ${ fungi }.
"review-5":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": "event: review_answers\nquestion: |\n  Revisit your answers\nreview:\n \
    \ - Edit:\n      - fruit\n      - vegetable\n      - fungi\n    button: |\n  \
    \    Your favorite fruit is ${ fruit }.\n      \n      Your favorite vegetable\
    \ is ${ vegetable }.\n      \n      Your favorite fungus is ${ fungi }."
"review-6":
  "height": !!int |-
    202
  "width": !!int |-
    488
  "yaml": |-
    event: review_answers
    question: |
      Revisit your answers
    review:
      - note: |
          Thank you for telling me
          about your food preferences.
        show if:
          - fruit
          - vegetable
          - fungi
      - Favorite fruit: fruit
      - Favorite vegetable: vegetable
      - Favorite fungus: fungi
"review-7":
  "height": !!int |-
    298
  "width": !!int |-
    488
  "yaml": "event: review_answers\nquestion: |\n  Revisit your answers\nreview:\n \
    \ - Edit:\n      - fruit\n      - vegetable\n      - recompute:\n          - salad\n\
    \      - fungi\n    button: |\n      Your favorite fruit is ${ fruit }.\n    \
    \  \n      Your favorite vegetable is ${ vegetable }.\n      \n      Your favorite\
    \ fungus is ${ fungi }.\n\n      We expect you would enjoy a ${ salad }.\n---\n\
    question: |\n  What is your favorite fruit?\nfields:\n  - no label: fruit\n---\n\
    question: |\n  What is your favorite vegetable?\nfields:\n  - no label: vegetable\n\
    ---\ncode: |\n  salad = fruit + \"-\" + vegetable + \" salad\"\n---\nquestion:\
    \ |\n  What is your favorite fungi?\nfields:\n  - no label: fungi"
"review-8":
  "height": !!int |-
    392
  "width": !!int |-
    488
  "yaml": |-
    objects:
      address: Address
    ---
    event: review_answers
    question: |
      Revisit your answers
    review:
      - label: Edit
        fields:
          - address.address
          - recompute:
              - address.geocoding_reset
              - address.county
        button: |
          Your address is:

          ${ address }

          This address is located in
          ${ address.county }.
    ---
    question: |
      What is your address?
    fields:
      - "Street address": address.address
        address autocomplete: True
      - 'Apt/Unit': address.unit
        required: False
      - 'City': address.city
      - 'State': address.state
        code: states_list()
      - 'Zip': address.zip
    ---
    question: |
      In which county in
      ${ state_name(address.state) }
      do you live?
    fields:
      - County: address.county
    ---
    sets: address.county
    code: |
      address.geocode()
    ---
    code: |
      address.reset_geocoding()
      address.geocoding_reset = True
    ---
    mandatory: True
    question: All done
    subquestion: |
      You live in ${ address.county }.

      [Review your answers](${ url_action('review_answers')})
"review-8a":
  "height": !!int |-
    392
  "width": !!int |-
    488
  "yaml": |-
    objects:
      address: Address
    ---
    event: review_answers
    question: |
      Revisit your answers
    review:
      - label: Edit
        fields:
          - address.address
          - recompute:
              - address.geocoding_reset
              - address.county
          - set:
              - address.manually_edited: True
        button: |
          Your address is:

          ${ address }

          This address is located in
          ${ address.county }.
    ---
    question: |
      What is your address?
    fields:
      - "Street address": address.address
        address autocomplete: True
      - 'Apt/Unit': address.unit
        required: False
      - 'City': address.city
      - 'State': address.state
        code: states_list()
      - 'Zip': address.zip
    ---
    question: |
      In which county in
      ${ state_name(address.state) }
      do you live?
    fields:
      - County: address.county
    ---
    sets: address.county
    code: |
      address.geocode()
    ---
    code: |
      address.reset_geocoding()
      address.geocoding_reset = True
    ---
    mandatory: True
    question: All done
    subquestion: |
      You live in ${ address.county }.

      [Review your answers](${ url_action('review_answers')})
"review-9":
  "yaml": |-
    event: review_answer
    question: |
      Revisit the equation
    review:
      - Change this:
          - undefine:
              - a
              - b
              - c
          - recompute:
              - d
        button: |
          ${ a } + ${ b } - ${ c } = ${ d }
    ---
    code: |
      d = a + b - c
    ---
    mandatory: True
    question: All done
    subquestion: |
      The answer is ${ d }.  You can
      [change this](${ url_action('review_answer') }).
"review-conditional":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": "question: |\n  What is your favorite fruit?\nfield: favorite_fruit\nchoices:\n\
    \  - Apple\n  - Orange\n  - Pear\n  - Peach\n---\nif: |\n  favorite_fruit == 'Apple'\n\
    question: |\n  What is your favorite apple?\nfields:\n  - Favorite apple variety:\
    \ favorite_apple\n---\nquestion: |\n  Result\nsubquestion: |\n  Your favorite\
    \ fruit is ${ favorite_fruit }.\n  \n  % if favorite_fruit == 'Apple':\n  Your\
    \ favorite apple is ${ favorite_apple }.\n  % endif\nfield: results_shown\n---\n\
    question: |\n  Please review the results.\nreview:\n  - label: Edit\n    fields:\n\
    \      - favorite_fruit\n      - follow up:\n        - favorite_apple\n    button:\
    \ |\n      Your favorite fruit is ${ favorite_fruit }.\n      \n      % if favorite_fruit\
    \ == 'Apple':\n      Your favorite apple is ${ favorite_apple }.\n      % endif\n\
    field: results_reviewed"
"review-edit-list":
  "height": !!int |-
    298
  "width": !!int |-
    488
  "yaml": "mandatory: true\nquestion: |\n  Thank you for your answers!\nsubquestion:\
    \ |\n  The people are ${ person } and your\n  favorite is ${ favorite }.\n\n \
    \ You can\n  [edit your answers](${ url_action('review_interview') })\n  if you\
    \ want.\n---\nevent: review_interview\nquestion: |\n  Edit your answers\nreview:\n\
    \  - Edit: favorite\n    button: |\n      Your favorite person is ${ favorite\
    \ }.\n  - Edit: person.revisit\n    button: |\n      The people are:\n\n     \
    \ % for y in person:\n      * ${ y }\n      % endfor\n---\ncontinue button field:\
    \ person.revisit\nquestion: |\n  Edit the people\nsubquestion: |\n  ${ person.table\
    \ }\n  \n  ${ person.add_action() }\n---\ntable: person.table\nrows: person\n\
    columns:\n  - Name: |\n      row_item.name.full()\n  - Fruit: |\n      row_item.favorite_fruit\n\
    edit:\n  - name.first\n  - favorite_fruit"
"review-edit-list-custom-button":
  "height": !!int |-
    405
  "width": !!int |-
    488
  "yaml": |-
    features:
      review button color: secondary
      review button icon: pencil-alt
"review-edit-list-table":
  "height": !!int |-
    389
  "width": !!int |-
    488
  "yaml": "need: person.table\nmandatory: true\nquestion: |\n  Thank you for your\
    \ answers!\nsubquestion: |\n  The people are ${ person }.\n\n  You can\n  [edit\
    \ your answers](${ url_action('review_interview') })\n  if you want.\n---\nevent:\
    \ review_interview\nquestion: |\n  Edit your answers\nreview:\n  - note: |\n \
    \     % if len(person):\n      The people are:\n\n      ${ person.table }\n  \
    \    \n      ${ person.add_action() }\n      % else:\n      There are no people.\n\
    \n      ${ person.add_action(\"I would like to add one.\") }\n      % endif\n\
    ---\ntable: person.table\nrows: person\ncolumns:\n  - Name: |\n      row_item.name.full()\n\
    \  - Fruit: |\n      row_item.favorite_fruit\nedit:\n  - name.first\n  - favorite_fruit"
"review-field":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "question: |\n  Revisit your answers\nreview:\n  - Revisit fruit: fruit\n\
    \    button: |\n      You said your favorite fruit was\n      ${ fruit }.\n  -\
    \ Revisit vegetable: vegetable\n    button: |\n      You said your favorite vegetable\n\
    \      was ${ vegetable }.\n  - Revisit fungus: fungi\n    button: |\n      You\
    \ said your favorite fungus \n      was ${ fungi }.\ncontinue button field: answers_reviewed\n\
    ---\nmandatory: True\ncode: |\n  fruit\n  vegetable\n  fungi\n  answers_reviewed\n\
    \  final_screen"
"review-side-note":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Review your answers
    review:
      - note: |
          Welcome to the review of answers.
      - note: |
          #### Your identity
        show if: user.name.first
      - Change your name: user.name.first
        help: |
          You said your name was
          **${ user.name }**.
        note: |
          Do not use a pseudonym, please.
      - note: |
          #### Your favorite foods
        show if: fruit
      - Revisit Fruit: fruit
        button: |
          You said you liked ${ fruit }.
        note: |
          This should be a tasty fruit.
      - Revisit Vegetable: vegetable
        button: |
          You said you liked ${ vegetable }.
      - Revisit Fungus: fungi
        button: |
          You said you liked ${ fungi }.
      - note: |
          We suspect you prefer
          ${ fruit } to ${ vegetable }.
    continue button field: answers_reviewed
"review-tabular":
  "height": !!int |-
    354
  "width": !!int |-
    488
  "yaml": |-
    event: review_answers
    question: |
      Revisit your answers
    review:
      - Revisit fruit: fruit
        button: |
          You said your favorite fruit was
          ${ fruit }.
      - Revisit vegetable: vegetable
        button: |
          You said your favorite vegetable
          was ${ vegetable }.
      - Revisit fungus: fungi
        button: |
          You said your favorite fungus
          was ${ fungi }.
    tabular: True
"review-tabular-class":
  "height": !!int |-
    357
  "width": !!int |-
    488
  "yaml": |-
    event: review_answers
    question: |
      Revisit your answers
    review:
      - Revisit fruit: fruit
        button: |
          You said your favorite fruit was
          ${ fruit }.
      - Revisit vegetable: vegetable
        button: |
          You said your favorite vegetable
          was ${ vegetable }.
      - Revisit fungus: fungi
        button: |
          You said your favorite fungus
          was ${ fungi }.
    tabular: table table-striped
"right":
  "height": !!int |-
    146
  "width": !!int |-
    488
  "yaml": "features:\n  centered: False\n---\nquestion: |\n  What is the airspeed\
    \ velocity of an\n  unladen swallow?\nfields:\n  - Velocity: swallow_velocity\n\
    right: |\n  ### Note\n    \n  If you did not catch this\n  movie reference, you\
    \ need to\n  improve your cultural literacy."
"right-centered":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": "question: |\n  What is the airspeed velocity of an\n  unladen swallow?\n\
    fields:\n  - Velocity: swallow_velocity\nright: |\n  ### Note\n    \n  If you\
    \ did not catch this\n  movie reference, you need to\n  improve your cultural\
    \ literacy."
"salutation":
  "height": !!int |-
    492
  "width": !!int |-
    488
  "yaml": |-
    template: letter_to_client
    content: |
      Dear
      ${ client.salutation() }
      ${ client.name.last }:

      I hope this letter finds you well.

      Blah, blah, blah.

      Dear
      ${ client.salutation(with_name=True) }:

      I hope this letter finds you well.

      Blah, blah, blah.

      Dear
      ${ client.salutation(with_name_and_punctuation=True) }

      I hope this letter finds you well.

      Blah, blah, blah.
"sample-function":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .test
    ---
    mandatory: True
    question: |
      The number after 3 is
      ${ plus_one(3) }.
"save-and-predict":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    code: |
      entry = ml.new_entry()
"save-url-to-file":
  "height": !!int |-
    266
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    objects:
      - logo: DAFile
    ---
    code: |
      url = 'https://docassemble.org/img/docassemble-logo.jpg'
      (filename, mimetype) = path_and_mimetype(url)
      logo.set_mimetype(mimetype)
      logo.copy_into(filename)
    ---
    field: initial_screen
    question: |
      Obtained file
    subquestion: |
      The URL [${ url }](${ url })
      has been saved to a file.

      It has a MIME type of
      ${ mimetype }.

      Click "Continue" to see it.
    ---
    mandatory: True
    need: initial_screen
    question: |
      Here is the file.
    subquestion: |
      ${ logo }
"scan-for-variables":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the best color?
    fields:
      - Color: best_color
    ---
    question: |
      What is the time of day?
    field: time_of_day
    choices:
      - Night
      - Day
    ---
    mandatory: True
    question: |
      The best color is
      ${ best_color }.
    field: initial_color_seen
    ---
    scan for variables: False
    mandatory: True
    code: |
      if time_of_day == 'Night':
        best_color = 'black'
      else:
        best_color = 'blue'
    ---
    mandatory: True
    question: |
      The best color is now
      ${ best_color }.
"scan-for-variables-original":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the best color?
    fields:
      - Color: best_color
    ---
    question: |
      What is the time of day?
    field: time_of_day
    choices:
      - Night
      - Day
    ---
    mandatory: True
    question: |
      The best color is
      ${ best_color }.
    field: initial_color_seen
    ---
    mandatory: True
    code: |
      if time_of_day == 'Night':
        best_color = 'black'
      else:
        best_color = 'blue'
    ---
    mandatory: True
    question: |
      The best color is now
      ${ best_color }.
"scan-for-variables-sets":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the best color?
    fields:
      - Color: best_color
    ---
    question: |
      What is the time of day?
    field: time_of_day
    choices:
      - Night
      - Day
    ---
    scan for variables: False
    sets:
      - best_thing
    code: |
      if time_of_day == 'Night':
        best_thing = 'astronomy'
        best_color = 'black'
      else:
        best_thing = 'the beach'
        best_color = 'blue'
    ---
    mandatory: True
    field: initial_screen
    question: |
      According to you, the best color
      is ${ best_color }.
    ---
    mandatory: True
    question: |
      Since the best thing is
      ${ best_thing }, the best color is
      ${ best_color }.
"script":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Do you want to build a snowman?
    subquestion: |
      <span id="beg"></span>
    yesno: wants_to_build_snowman
    script: |
      setTimeout(function(){
        $("#beg").html("Pretty please?");
      }, 3000);
"sections":
  "height": !!int |-
    200
  "width": !!int |-
    488
  "yaml": "sections:\n  - Introduction\n  - About you:\n    - Contact info\n    -\
    \ Demographics\n  - Preferences\n  - Conclusion\n---\nfeatures:\n  navigation:\
    \ True\n  progress bar: True\n---\nmandatory: True\ncode: |\n  menu_items = [\
    \ action_menu_item('Roadmap', 'road_map') ]\n---\ninitial: True\ncode: |\n  if\
    \ returning_user(minutes=0.5):\n    welcome_back\n---\nmandatory: True\nquestion:\
    \ |\n  Welcome to the interview\nsubquestion: |\n  If you are not on a\n  smartphone-sized\
    \ device,\n  you should see a navigation\n  bar to the left.\nfield: sees_nav_bar\n\
    ---\nmandatory: True\nquestion: |\n  I am going to ask you some\n  questions about\
    \ yourself.\nfield: intro_to_about_you\nsection: About you\n---\nmandatory: True\n\
    question: |\n  What is your name?\nfields:\n  - First Name: first_name\n  - Last\
    \ Name: last_name\nsection: Contact info\n---\nmandatory: True\nquestion: |\n\
    \  What is your e-mail address?\nfields:\n  - E-mail: email_address\n    datatype:\
    \ email\n---\nmandatory: True\nquestion: |\n  What is your gender?\nfield: gender\n\
    choices:\n  - Male\n  - Female\n  - Something else\nsection: Demographics\n---\n\
    mandatory: True\nquestion: |\n  What kind of belly button\n  do you have?\nsubquestion:\
    \ |\n  To see what a user would\n  see after returning to\n  the interview after\
    \ a period\n  of absence, try waiting\n  thirty seconds, then\n  [click into the\n\
    \  interview](${ interview_url(local=True) }).\n\n  In addition, there is a similar\n\
    \  screen available on the Menu in the\n  upper-right, under \"Roadmap.\"\nfield:\
    \ belly_button\nchoices:\n  - Innie\n  - Outie\n---\nmandatory: True\nquestion:\
    \ |\n  What is your favorite fruit?\nfields:\n  - Favorite fruit: favorite_fruit\n\
    section: Preferences\n---\nmandatory: True\nquestion: |\n  What is your favorite\
    \ vegetable?\nfields:\n  - Favorite vegetable: favorite_vegetable\n---\nprogress:\
    \ 100\nmandatory: True\nquestion: Thank you.\nsubquestion: |\n  ${ first_name\
    \ },\n\n  Your answers mean a lot to me.\n  \n  I am going to go eat some\n  ${\
    \ favorite_vegetable }\n  now.\nsection: Conclusion\n---\nevent: welcome_back\n\
    question: |\n  Welcome back!\nsubquestion: |\n  You are currently in the\n  **${\
    \ nav.get_section(display=True) }**\n  section.\n\n  ${ nav }\n\n  Press \"Continue\"\
    \ to pick up\n  where you left off.\nbuttons:\n  Continue: continue\n---\nevent:\
    \ road_map\nquestion: |\n  Roadmap\nsubquestion: |\n  You are currently in the\n\
    \  **${ nav.get_section(display=True) }**\n  section.\n\n  ${ nav }\n\n  Press\
    \ \"Continue\" to resume the\n  interview.\nbuttons:\n  Continue: continue"
"sections-auto-open":
  "height": !!int |-
    156
  "width": !!int |-
    488
  "yaml": |-
    sections:
      - Introduction
      - About you:
        - Contact info
        - Demographics
      - Preferences
      - Conclusion
    auto open: True
"sections-horizontal":
  "height": !!int |-
    219
  "width": !!int |-
    488
  "yaml": |-
    features:
      navigation: horizontal
      progress bar: True
"sections-keywords":
  "height": !!int |-
    156
  "width": !!int |-
    488
  "yaml": "sections:\n  - intro: Introduction\n  - about: About you\n    subsections:\n\
    \      - contact: Contact info\n      - demographic: Demographics\n  - prefs:\
    \ Preferences\n  - conclusion: Conclusion\n---\nfeatures:\n  navigation: True\n\
    ---\nmandatory: True\nquestion: |\n  Welcome to the interview\nsubquestion: |\n\
    \  If you are not on a\n  smartphone-sized device,\n  you should see a navigation\n\
    \  bar to the left.\nfield: sees_nav_bar\n---\nmandatory: True\nquestion: |\n\
    \  I am going to ask you some\n  questions about yourself.\nfield: intro_to_about_you\n\
    section: about\n---\nmandatory: True\nquestion: |\n  What is your name?\nfields:\n\
    \  - First Name: first_name\n  - Last Name: last_name\nsection: contact\n---\n\
    mandatory: True\nquestion: |\n  What is your e-mail address?\nfields:\n  - E-mail:\
    \ email_address\n    datatype: email\n---\nmandatory: True\nquestion: |\n  What\
    \ is your gender?\nfield: gender\nchoices:\n  - Male\n  - Female\n  - Something\
    \ else\nsection: demographic\n---\nmandatory: True\nquestion: |\n  What kind of\
    \ belly button\n  do you have?\nfield: belly_button\nchoices:\n  - Innie\n  -\
    \ Outie\n---\nmandatory: True\nquestion: |\n  What is your favorite fruit?\nfields:\n\
    \  - Favorite fruit: favorite_fruit\nsection: prefs\n---\nmandatory: True\nquestion:\
    \ |\n  What is your favorite vegetable?\nfields:\n  - Favorite vegetable: favorite_vegetable\n\
    ---\nmandatory: True\nquestion: Thank you.\nsubquestion: |\n  ${ first_name },\n\
    \n  Your answers mean a lot to me.\n  \n  I am going to go eat some\n  ${ favorite_vegetable\
    \ }\n  now.\nsection: conclusion"
"sections-keywords-code":
  "height": !!int |-
    135
  "width": !!int |-
    488
  "yaml": "sections:\n  - intro: Introduction\n  - about: About you\n    subsections:\n\
    \      - contact: Contact info\n      - demographic: Demographics\n  - prefs:\
    \ Preferences\n  - conclusion: Conclusion\n---\nfeatures:\n  navigation: True\n\
    ---\nmandatory: True\ncode: |\n  sees_nav_bar\n  nav.set_section('about')\n  intro_to_about_you\n\
    \  nav.set_section('contact')\n  first_name\n  email_address\n  nav.set_section('demographic')\n\
    \  gender\n  belly_button\n  nav.set_section('prefs')\n  favorite_fruit\n  favorite_vegetable\n\
    \  nav.set_section('conclusion')\n  final_screen\n---\nquestion: |\n  Welcome\
    \ to the interview\nsubquestion: |\n  If you are not on a\n  smartphone-sized\
    \ device,\n  you should see a navigation\n  bar to the left.\nfield: sees_nav_bar\n\
    ---\nquestion: |\n  I am going to ask you some\n  questions about yourself.\n\
    field: intro_to_about_you\n---\nquestion: |\n  What is your name?\nfields:\n \
    \ - First Name: first_name\n  - Last Name: last_name\n---\nquestion: |\n  What\
    \ is your e-mail address?\nfields:\n  - E-mail: email_address\n    datatype: email\n\
    ---\nquestion: |\n  What is your gender?\nfield: gender\nchoices:\n  - Male\n\
    \  - Female\n  - Something else\n---\nquestion: |\n  What kind of belly button\n\
    \  do you have?\nfield: belly_button\nchoices:\n  - Innie\n  - Outie\n---\nquestion:\
    \ |\n  What is your favorite fruit?\nfields:\n  - Favorite fruit: favorite_fruit\n\
    ---\nquestion: |\n  What is your favorite vegetable?\nfields:\n  - Favorite vegetable:\
    \ favorite_vegetable\n---\nevent: final_screen\nquestion: Thank you.\nsubquestion:\
    \ |\n  ${ first_name },\n\n  Your answers mean a lot to me.\n  \n  I am going\
    \ to go eat some\n  ${ favorite_vegetable }\n  now."
"sections-keywords-get-sections":
  "height": !!int |-
    398
  "width": !!int |-
    488
  "yaml": "sections:\n  - intro: Introduction\n  - about: About you\n    subsections:\n\
    \      - contact: Contact info\n      - demographic: Demographics\n  - prefs:\
    \ Preferences\n  - conclusion: Conclusion\n---\nfeatures:\n  navigation: True\n\
    ---\nmandatory: True\nquestion: |\n  Welcome to the interview\nsubquestion: |\n\
    \  The sections of this interview,\n  as a JSON list, are:\n\n  ```\n  ${ json.dumps(nav.get_sections(),\
    \ indent=2) }\n  ```\nfield: sees_nav_bar\n---\nmandatory: True\nquestion: |\n\
    \  I am going to ask you some\n  questions about yourself.\nfield: intro_to_about_you\n\
    section: about\n---\nmandatory: True\nquestion: |\n  What is your name?\nfields:\n\
    \  - First Name: first_name\n  - Last Name: last_name\nsection: contact\n---\n\
    mandatory: True\nquestion: |\n  What is your e-mail address?\nfields:\n  - E-mail:\
    \ email_address\n    datatype: email\n---\nmandatory: True\nquestion: |\n  What\
    \ is your gender?\nfield: gender\nchoices:\n  - Male\n  - Female\n  - Something\
    \ else\nsection: demographic\n---\nmandatory: True\nquestion: |\n  What kind of\
    \ belly button\n  do you have?\nfield: belly_button\nchoices:\n  - Innie\n  -\
    \ Outie\n---\nmandatory: True\nquestion: |\n  What is your favorite fruit?\nfields:\n\
    \  - Favorite fruit: favorite_fruit\nsection: prefs\n---\nmandatory: True\nquestion:\
    \ |\n  What is your favorite vegetable?\nfields:\n  - Favorite vegetable: favorite_vegetable\n\
    ---\nmandatory: True\nquestion: Thank you.\nsubquestion: |\n  ${ first_name },\n\
    \n  Your answers mean a lot to me.\n  \n  I am going to go eat some\n  ${ favorite_vegetable\
    \ }\n  now.\nsection: conclusion"
"sections-keywords-review":
  "height": !!int |-
    135
  "width": !!int |-
    488
  "yaml": |-
    sections:
      - intro: Introduction
      - about: About you
        subsections:
          - contact: Contact info
          - demographic: Demographics
      - prefs: Preferences
      - conclusion: Conclusion
    ---
    event: contact
    section: contact
    question: |
      Review contact information
    review:
      - Edit name: first_name
        button: |
          Name: ${ first_name } ${ last_name }
      - Edit e-mail: email_address
        button: |
          E-mail: ${ email_address }
    ---
    event: demographic
    section: demographic
    question: |
      Review demographic information
    review:
      - Edit gender: gender
        button: |
          Gender: ${ gender }
      - Edit belly button: belly_button
        button: |
          Belly button: ${ belly_button }
    ---
    event: prefs
    section: prefs
    question: |
      Preferences
    review:
      - Edit fruit: favorite_fruit
        button: |
          Favorite fruit: ${ favorite_fruit }
      - Edit vegetable: favorite_vegetable
        button: |
          Favorite vegetable: ${ favorite_vegetable }
"sections-keywords-set-sections":
  "height": !!int |-
    172
  "width": !!int |-
    488
  "yaml": |-
    sections:
      - intro: Introduction
      - about: About you
        subsections:
          - contact: Contact info
          - demographic: Demographics
      - prefs: Preferences
    ---
    features:
      navigation: True
    ---
    question: |
      What additional section
      would you like to add to
      this interview?
    fields:
      - Name: new_name
      - Keyword: new_keyword
        help: |
          Use only letters and
          underscores.
    ---
    mandatory: True
    code: |
      new_section = {}
      new_section[new_keyword] = new_name
      the_sections = nav.get_sections()
      the_sections.append(new_section)
      nav.set_sections(the_sections)
    ---
    mandatory: True
    code: |
      sees_nav_bar
      nav.set_section('about')
      intro_to_about_you
      nav.set_section('contact')
      first_name
      email_address
      nav.set_section('demographic')
      gender
      belly_button
      nav.set_section('prefs')
      favorite_fruit
      favorite_vegetable
      nav.set_section(new_keyword)
      final_screen
"sections-non-progressive":
  "height": !!int |-
    135
  "width": !!int |-
    488
  "yaml": |-
    sections:
      - intro: Introduction
      - about: About you
        subsections:
          - contact: Contact info
          - demographic: Demographics
      - prefs: Preferences
      - conclusion: Conclusion
    progressive: False
    ---
    event: intro
    code: |
      force_ask('sees_nav_bar')
    ---
    event: about
    code: |
      force_ask('intro_to_about_you')
    ---
    event: contact
    code: |
      force_ask('first_name', 'email_address')
    ---
    event: demographic
    code: |
      force_ask('gender', 'belly_button')
    ---
    event: prefs
    code: |
      force_ask('favorite_fruit', 'favorite_vegetable')
    ---
    event: conclusion
    code: |
      force_ask('final_screen')
    ---
    features:
      navigation: True
"sections-small-screen-dropdown":
  "height": !!int |-
    312
  "width": !!int |-
    385
  "yaml": |-
    features:
      navigation: True
      small screen navigation: dropdown
"sections-small-screen-false":
  "height": !!int |-
    210
  "width": !!int |-
    385
  "yaml": "sections:\n  - Introduction\n  - About you:\n    - Contact info\n    -\
    \ Demographics\n  - Preferences\n  - Conclusion\n---\nfeatures:\n  navigation:\
    \ True\n  small screen navigation: False\n  progress bar: True\n---\nmandatory:\
    \ True\ncode: |\n  menu_items = [ action_menu_item('Roadmap', 'road_map') ]\n\
    ---\ninitial: True\ncode: |\n  if returning_user(minutes=0.5):\n    welcome_back\n\
    ---\nmandatory: True\nquestion: |\n  Welcome to the interview\nfield: sees_nav_bar\n\
    ---\nmandatory: True\nquestion: |\n  I am going to ask you some\n  questions about\
    \ yourself.\nfield: intro_to_about_you\nsection: About you\n---\nmandatory: True\n\
    question: |\n  What is your name?\nfields:\n  - First Name: first_name\n  - Last\
    \ Name: last_name\nsection: Contact info\n---\nmandatory: True\nquestion: |\n\
    \  What is your e-mail address?\nfields:\n  - E-mail: email_address\n    datatype:\
    \ email\n---\nmandatory: True\nquestion: |\n  What is your gender?\nfield: gender\n\
    choices:\n  - Male\n  - Female\n  - Something else\nsection: Demographics\n---\n\
    mandatory: True\nquestion: |\n  What kind of belly button\n  do you have?\nsubquestion:\
    \ |\n  To see what a user would\n  see after returning to\n  the interview after\
    \ a period\n  of absence, try waiting\n  thirty seconds, then\n  [click into the\n\
    \  interview](${ interview_url(local=True) }).\n\n  In addition, there is a similar\n\
    \  screen available on the Menu in the\n  upper-right, under \"Roadmap.\"\nfield:\
    \ belly_button\nchoices:\n  - Innie\n  - Outie\n---\nmandatory: True\nquestion:\
    \ |\n  What is your favorite fruit?\nfields:\n  - Favorite fruit: favorite_fruit\n\
    section: Preferences\n---\nmandatory: True\nquestion: |\n  What is your favorite\
    \ vegetable?\nfields:\n  - Favorite vegetable: favorite_vegetable\n---\nprogress:\
    \ 100\nmandatory: True\nquestion: Thank you.\nsubquestion: |\n  ${ first_name\
    \ },\n\n  Your answers mean a lot to me.\n  \n  I am going to go eat some\n  ${\
    \ favorite_vegetable }\n  now.\nsection: Conclusion\n---\nevent: welcome_back\n\
    question: |\n  Welcome back!\nsubquestion: |\n  You are currently in the\n  **${\
    \ nav.get_section(display=True) }**\n  section.\n\n  ${ nav }\n\n  Press \"Continue\"\
    \ to pick up\n  where you left off.\nbuttons:\n  Continue: continue\n---\nevent:\
    \ road_map\nquestion: |\n  Roadmap\nsubquestion: |\n  You are currently in the\n\
    \  **${ nav.get_section(display=True) }**\n  section.\n\n  ${ nav }\n\n  Press\
    \ \"Continue\" to resume the\n  interview.\nbuttons:\n  Continue: continue"
"send-email":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - recipient: Individual
    ---
    mandatory: true
    question: |
      E-mail test
    subquestion: |
      % if intro_provided and email_sent_ok:
      The e-mail was sent successfully.
      % else:
      There was a problem sending the e-mail.
      % endif
    ---
    question: |
      E-mail test
    subquestion: |
      This interview will send you an e-mail.
    field: intro_provided
    ---
    question: |
      What is your name?
    fields:
      - First Name: recipient.name.first
      - Last Name: recipient.name.last
    ---
    question: |
      What is your e-mail address?
    fields:
      - E-mail: recipient.email
        datatype: email
    ---
    code: |
      email_sent_ok = send_email(to=recipient, template=notification)
    ---
    template: notification
    subject: |
      Greetings, ${ recipient }!
    content: |
      This is an e-mail sent from a
      **docassemble** interview.

      Have a nice day!
"send-email-with-attachment":
  "height": !!int |-
    623
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - Your First Name: user.name.first
      - Your Last Name: user.name.last
      - Your E-mail: user.email
        datatype: email
      - A Picture: the_file
        datatype: file
    ---
    code: |
      success_sending_email = send_email(to=[user], template=hello_email, attachments=[the_file])
"send-sms":
  "yaml": |-
    objects:
      client: Individual
"server-capabilities":
  "height": !!int |-
    466
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Server capabilities
    subquestion: |
      % for feature, enabled in server_capabilities().items():
      * **${ feature }**: ${ 'enabled' if enabled else 'disabled' }
      % endfor
"session-interview":
  "height": !!int |-
    497
  "width": !!int |-
    755
  "yaml": |-
    metadata:
      require login: True
      temporary session: True
      hidden: True
    ---
    mandatory: True
    code: |
      current_page = 0
      next_id_of_page = [None]
    ---
    reconsider: True
    code: |
      current_info = user_info()
      list_of_interviews = []
      (items, next_id) = interview_list(next_id=next_id_of_page[current_page])
      if len(next_id_of_page) == current_page + 1 and next_id is not None:
        next_id_of_page.append(next_id)
      del next_id
      for info in items:
        if not info['metadata'].get('hidden', False):
          list_of_interviews.append(info)
        del info
      if len(list_of_interviews) > 0:
        list_of_interviews += [dict()]
      set_save_status('overwrite')
    ---
    table: session_table
    rows: |
      list_of_interviews
    columns:
      - Title: |
          '<a href="' + interview_url(i=row_item['filename'], session=row_item['session']) + '">' + row_item['title'] + '</a>' if 'title' in row_item else ''
      - Modified: |
          row_item['modtime'] if 'modtime' in row_item else ''
      - Delete: |
          action_button_html(url_action('delete', filename=row_item['filename'], session=row_item['session']), color='warning', label='Delete') if 'title' in row_item else action_button_html(url_action('delete_all'), color='danger', label='Delete All')
    ---
    table css class: table table-striped
    mandatory: True
    question: |
      Resume an interview
    subquestion: |
      % if len(list_of_interviews) > 0:
      Click interview title to resume an interview
      you already started.

      ${ session_table }
      % else:
      You do not have any sessions.
      % endif

      % if current_page > 0:
      ${ action_button_html(url_action('change_page', direction=-1), label="Prev", icon='chevron-left', size='md', color='secondary') }
      % endif
      % if current_page + 1 < len(next_id_of_page):
      ${ action_button_html(url_action('change_page', direction=1), label="Next", icon='chevron-right', size='md', color='secondary') }
      % endif
    ---
    event: change_page
    code: |
      current_page += int(action_argument('direction'))
    ---
    event: delete
    code: |
      if interview_list(
          action='delete',
          filename=action_argument('filename'),
          session=action_argument('session')):
        log("Deleted interview", "success")
"session-interview-redirect":
  "yaml": |-
    initial: True
    code: |
      if not user_logged_in():
        response(url=url_of('login'))
      if interface() == 'json':
        for interview in interview_list(filename='docassemble.demo:data/questions/questions.yml')[0]:
          response(url=interview_url(i=interview['filename'], session=interview['session'], local=True, json=1))
        response(url=interview_url(i='docassemble.demo:data/questions/questions.yml', local=True, json=1))
      else:
        for interview in interview_list(filename='docassemble.demo:data/questions/questions.yml')[0]:
          response(url=interview_url(i=interview['filename'], session=interview['session'], local=True))
        response(url=interview_url(i='docassemble.demo:data/questions/questions.yml', local=True))
"session-local":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      multi_user = True
    ---
    mandatory: True
    code: |
      session_local.how_doing
      final_screen
    ---
    question: |
      How are you doing today?
    field: session_local.how_doing
    choices:
      - Well: well
      - Poorly: poor
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Favorite fruit: favorite_fruit
    ---
    event: final_screen
    question: |
      Your favorite fruit is ${ favorite_fruit }
    subquestion: |
      % if session_local.how_doing == 'well':
      I am glad you are doing well.
      % else:
      I am sorry you are poorly today.
      % endif

      Try re-joining this interview by
      using a different web browser, an
      incognito tab, or by closing your
      browser application and opening it
      again, and visiting this URL:

      [${ interview_url() }](${ interview_url() })
"set-language":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": "initial: True\ncode: |\n  set_language(language)\n---\nquestion: |\n  What\
    \ language do you speak?\nfield: language\nchoices:\n  - English: en\n  - Espa\xF1\
    ol: es"
"set-logo-title":
  "height": !!int |-
    119
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - company_logo: DAStaticFile.using(filename='example-inc.svg')
    ---
    mandatory: True
    code: |
      set_parts(title='Example Inc.', logo='<img src="' + company_logo.url_for() + '" style="height: 20px; width: 157px;">')
"set-parts":
  "height": !!int |-
    194
  "width": !!int |-
    488
  "yaml": |-
    metadata:
      title: Set the interview title
      short title: Title
      tab title: The Title
      subtitle: The subtitle
      pre: The pre text
      submit: The submit text
      post: The post text
    ---
    question: |
      What is your favorite fruit?
    subquestion: |
      Note the interview titles.
    fields:
      Fruit: favorite_fruit
    ---
    mandatory: True
    code: |
      favorite_fruit = noun_plural(favorite_fruit)
      favorite_fruit = capitalize(favorite_fruit)
    ---
    mandatory: True
    code: |
      set_parts(
        title=favorite_fruit + " rule",
        short="I'm Tiny!",
        tab="TabTab",
        subtitle="a fruit interview",
        pre="This is about fruit",
        submit="Get ready for some buttons",
        post=DAStaticFile(filename="endmatter.html").slurp())
"setField":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What groceries should we buy for
      tomorrow's breakfast?
    subquestion: |
      <a id="decide" href="#" class="btn btn-sm btn-primary">Decide for me</a>
    fields:
      - Cold cereal: cold_cereal
        choices:
          - Lucky Charms
          - Cheerios
          - Froot Loops
          - Corn Flakes
      - Hot cereal: hot_cereal
        input type: radio
        choices:
          - Oatmeal
          - Cream of wheat
          - Bran
      - Juice: juice_varieties
        datatype: checkboxes
        choices:
          - Apple
          - Orange
          - Grapefruit
      - Other: other_groceries
    script: |
      <script>
        $("#decide").click(function(){
          setField("cold_cereal", "Lucky Charms");
          setField("hot_cereal", "Cream of wheat");
          setField("juice_varieties['Apple']", true);
          setField("juice_varieties['Orange']", true);
          setField("juice_varieties['Grapefruit']", false);
          setField("other_groceries", "Bread and jam");
          return false;
        });
      </script>
"setparts-demo":
  "yaml": |-
    mandatory: True
    code: |
      set_parts(subtitle='This is the subtitle part.', pre='This is the pre part.', submit='This is the submit part.', post='This is the post part.', under='This is the under part.', right='This is the right part.', exit_link='leave', exit_label='Exit label', help_label='Help label', continue_button_label='Continue button label', back_button_label='Back button label')
"show-login":
  "height": !!int |-
    96
  "width": !!int |-
    488
  "yaml": |-
    metadata:
      show login: False
"showif":
  "height": !!int |-
    286
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - Favorite fruit: fruit
      - Favorite vegetable: vegetable
      - Favorite fungus: mushroom
        show if:
          code: |
            2 + 2 == 3
"showif-boolean":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - "Do you like fruit?": likes_fruit
        datatype: yesnoradio
      - "What's your favorite fruit?": favorite_fruit
        show if: likes_fruit
"showif-boolean-yesno-false":
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - "I like fruit.": likes_fruit
        datatype: yesno
      - "Why do you not like fruit?": fruit_dislike_reason
        show if:
          variable: likes_fruit
          is: False
"showif-nested":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - "Do you like fruit?": likes_fruit
        datatype: yesnoradio
      - "Do you like apples?": likes_apples
        datatype: yesnoradio
        show if: likes_fruit
      - "Why do you like apples?": reason_for_liking_apples
        show if: likes_apples
      - "Why do you hate apples?": reason_for_hating_apples
        show if:
          variable: likes_apples
          is: False
      - "Do you like Fuji apples?": likes_fuji
        datatype: yesnoradio
        show if: likes_apples
      - "Why do you like Fuji apples?": reason_for_liking_fuji_apples
        show if: likes_fuji
"showif-nested-checkbox":
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - "Do you like fruit?": likes_fruit
        datatype: yesnoradio
      - "Do you like apples?": likes_apples
        datatype: yesnoradio
        show if: likes_fruit
      - "Favorite varieties": varieties_liked
        datatype: checkboxes
        choices:
          - Fuji
          - Granny Smith
          - Gala
          - Red Delicious
        show if: likes_apples
      - "Why do you like Fuji apples?": reason_for_liking_fuji_apples
        show if: |
          varieties_liked['Fuji']
"shuffle":
  "height": !!int |-
    400
  "width": !!int |-
    488
  "yaml": |-
    question: |
      For which of the following obscure
      candidates do you wish to vote?
    fields:
      - Candidate: candidate
        datatype: radio
        shuffle: True
        choices:
          - Aaron Aardvark
          - Albert Arnold
          - Felicia Fellowes
          - Miranda Moore
          - Zachariah Zephyr
"side-html":
  "height": !!int |-
    130
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is 2+2?
    fields:
      Answer: answer
      choices:
        - 3
        - 4
        - 5
      html: |
        <span style="color: green;">Hint: 2 + 2 = 4.</span>
"side-note":
  "height": !!int |-
    130
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is 2+2?
    fields:
      Answer: answer
      choices:
        - 3
        - 4
        - 5
      note: |
        Hint: 2 + 2 = 4.
"signature":
  "height": !!int |-
    386
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Sign your name
    subquestion: |
      By signing your name, you agree to
      our terms and conditions.
    signature: target_variable
    under: |
      ${ user }
"signature-blue":
  "height": !!int |-
    425
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Sign your name
    subquestion: |
      By signing your name, you agree to
      our terms and conditions.
    signature: target_variable
    pen color: "#33f"
    under: |
      ${ user }
"signin":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      if user_logged_in():
        goodbye_page
      else:
        sign_in_page
    ---
    question: |
      Please sign in
    buttons:
      - Sign in: signin
    sets: sign_in_page
"single-spacing":
  "height": !!int |-
    630
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Here is your document.
    subquestion: |
      It demonstrates types of spacing.
    attachments:
      - name: A test document
        filename: test_document
        metadata:
          SingleSpacing: True
        content: |
          ${ client } is entitled to
          benefits plan ${ benefits }.

          Four score and seven years ago
          our fathers brought forth on
          this continent, a new nation,
          conceived in Liberty, and
          dedicated to the proposition
          that all men are created equal.

          Now we are engaged in a great
          civil war, testing whether that
          nation, or any nation so
          conceived and so dedicated,
          can long endure.

          # What about double-spacing?

          Let's try this with double
          spacing.

          [DOUBLESPACING]

          Four score and seven years ago
          our fathers brought forth on
          this continent, a new nation,
          conceived in Liberty, and
          dedicated to the proposition
          that all men are created equal.

          Now we are engaged in a great
          civil war, testing whether that
          nation, or any nation so
          conceived and so dedicated,
          can long endure.
    mandatory: True
"single_to_double_newlines":
  "height": !!int |-
    288
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Here is your first book.
    attachment:
      name: Story of My Life
      filename: life_story
      content: |
        [BOLDCENTER] My Life Story

        ${ single_to_double_newlines(life_story) }

        [CENTER] The End.
"sms":
  "yaml": |-
    question: |
      Hello, world!
    subquestion: |
      Are you doing well?
    yesno: doing_well
    ---
    terms:
      world: |
        A planet.
    ---
    mandatory: True
    question: |
      % if doing_well:
      Glad to hear that!
      % else:
      Sorry to hear that!
      % endif
    attachment:
      content: |
        Hello world!
      valid formats:
        - pdf
"social":
  "height": !!int |-
    126
  "width": !!int |-
    488
  "yaml": |-
    metadata:
      title: Social meta tags
      short: Social
      social:
        description: |
          A demonstration of meta tags.
        image: court.png
        og:
          image: docassemble.demo:data/static/crown.png
          description: A one-page guided interview demonstrating meta tags.
        twitter:
          title: Social meta tag demo
          site: "@docassemble"
          description: |
            An interview that demonstrates meta tags.
          image: https://docassemble.org/img/docassemble-logo-sq-125.jpg
          "image:alt": Docassemble logo
"someone-already-mentioned-bad":
  "yaml": |-
    imports:
      - docassemble.demo.change_suffix
"someone-already-mentioned2":
  "yaml": |-
    mandatory: True
    objects:
      successor_agent: Individual
      conservator: Individual
      guardian: Individual
"someone-already-mentioned3":
  "height": !!int |-
    338
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Who is the trustee?
    fields:
      - no label: trustee
        datatype: object_radio
        disable others: True
        none of the above: Someone else
        choices:
          - agent
      - First name: trustee.name.first
      - Middle name: trustee.name.middle
        required: False
      - Last name: trustee.name.last
      - Suffix: trustee.name.suffix
        required: False
        code: name_suffix()
"sort":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      building: DAList.using(object_type=Thing, minimum_number=2)
"space-underscore":
  "height": !!int |-
    129
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Removing spaces
    subquestion: |
      Your book is *${ book }* and
      without underscores, it is
      ${ space_to_underscore(book) }.
    sets: all_done
"state":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Where do you live?
    fields:
      - State: user_state
        code: states_list()
    ---
    mandatory: True
    question: |
      You live in
      ${ state_name(user_state) },
      which is abbreviated
      ${ user_state }.
"static-file":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - the_icon: DAStaticFile
    ---
    code: |
      if user.gender == 'Female':
        the_icon.filename = 'female243.png'
      else:
        the_icon.filename = 'male244.png'
    ---
    mandatory: True
    question: |
      The image
      ${ the_icon.show(width='1em') }
    subquestion: |
      ${ the_icon }
"static_image":
  "height": !!int |-
    390
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      An image created by code
    subquestion: |
      This is the "${ image_name }" image.

      ${ static_image(image_name + '.svg') }
"subdivision-type":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": "mandatory: True\nquestion: |\n  Geography lesson\nsubquestion: |\n  % for\
    \ country in ['BG', 'SE', 'TN', 'VN', 'LV', 'US']:\n  In ${ country_name(country)\
    \ },\n  you live in a\n  ${ subdivision_type(country) }.\n  \n  % endfor"
"subquestion":
  "height": !!int |-
    248
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the airspeed velocity of an
      unladen swallow?
    subquestion: Be careful how you answer.
    fields:
      - Velocity: swallow_velocity
"supersede":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    id: informal favorite fruit question
    supersedes: regular favorite fruit question
    question: |
      What the heck is your favorite fruit?
    fields:
      Fruit: favorite_fruit
    ---
    id: regular favorite fruit question
    question: |
      What is your favorite fruit?
    fields:
      Fruit: favorite_fruit
    ---
    mandatory: True
    question: |
      Your favorite fruit is
      ${ favorite_fruit }.
"supersede-order":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    order:
      - informal favorite fruit question
      - regular favorite fruit question
    ---
    id: informal favorite fruit question
    question: |
      What the heck is your favorite fruit?
    fields:
      Fruit: favorite_fruit
    ---
    id: regular favorite fruit question
    question: |
      What is your favorite fruit?
    fields:
      Fruit: favorite_fruit
    ---
    mandatory: True
    question: |
      Your favorite fruit is
      ${ favorite_fruit }.
"supersede-regular":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What the heck is your favorite fruit?
    fields:
      Fruit: favorite_fruit
    ---
    question: |
      What is your favorite fruit?
    fields:
      Fruit: favorite_fruit
    ---
    mandatory: True
    question: |
      Your favorite fruit is
      ${ favorite_fruit }.
"suppress-loading-util":
  "yaml": |-
    metadata:
      suppress loading util: True
    ---
    code: |
      try:
        Individual
        individual_defined = True
      except:
        individual_defined = False
    ---
    mandatory: True
    question: |
      % if individual_defined:
      `Individual` is defined.
      % else:
      `Individual` is not defined.
      % endif
"table":
  "height": !!int |-
    289
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: DAList
    ---
    mandatory: true
    code: |
      fruit.object_type = Thing
    ---
    mandatory: True
    question: |
      Information about fruit
    subquestion: |
      Here is a fruity summary.

      ${ fruit_table }
    ---
    table: fruit_table
    rows: fruit
    columns:
      - Fruit Name: row_item.name
      - Seeds: row_item.seeds
"table-alt":
  "height": !!int |-
    289
  "width": !!int |-
    488
  "yaml": |-
    code: |
      thing = "Fruit"
    ---
    table: fruit_table
    rows: fruit
    columns:
      - header: |
          ${ thing } Name
        cell: |
          row_item.name
      - header: |
          Number of Seeds
        cell: |
          row_item.seeds
"table-dict":
  "height": !!int |-
    249
  "width": !!int |-
    488
  "yaml": |-
    scan for variables: False
    mandatory: True
    code: |
      income['employment'].receives = True
      income['employment'].amount = 237
      income['benefits'].receives = False
      income['interest'].receives = True
      income['interest'].amount = 23
    ---
    table: income.table
    rows: income
    columns:
      - Type: |
          row_index
      - Receives: |
          'Yes' if row_item.receives else 'No'
      - Amount: |
          currency(row_item.amount) if row_item.receives else ''
    ---
    mandatory: True
    question: |
      Summary of income
    subquestion: |
      ${ income.table }
"table-dict-confirm":
  "height": !!int |-
    332
  "width": !!int |-
    488
  "yaml": |-
    table: income.table
    rows: income
    columns:
      - Type: |
          row_index
      - Receives: |
          'Yes' if row_item.receives else 'No'
      - Amount: |
          currency(row_item.amount) if row_item.receives else ''
    delete buttons: True
    confirm: True
"table-dict-delete-buttons":
  "height": !!int |-
    332
  "width": !!int |-
    488
  "yaml": |-
    table: income.table
    rows: income
    columns:
      - Type: |
          row_index
      - Receives: |
          'Yes' if row_item.receives else 'No'
      - Amount: |
          currency(row_item.amount) if row_item.receives else ''
    delete buttons: True
"table-dict-edit":
  "height": !!int |-
    332
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - income: |
          DADict.using(
            object_type=DAObject,
            keys=['employment', 'benefits', 'interest'],
            complete_attribute='complete',
            there_is_another=False)
    ---
    code: |
      if income[i].receives:
        income[i].amount
      income[i].complete = True
    ---
    question: |
      Income from ${ i }
    fields:
      - "Do you get income from ${ i }?": income[i].receives
        datatype: yesnoradio
      - "How much do you get from ${ i }?": income[i].amount
        datatype: currency
        show if: income[i].receives
    ---
    table: income.table
    rows: income
    columns:
      - Type: |
          row_index
      - Receives: |
          'Yes' if row_item.receives else 'No'
      - Amount: |
          currency(row_item.amount) if row_item.receives else ''
    edit:
      - receives
"table-dict-edit-delete-buttons":
  "height": !!int |-
    332
  "width": !!int |-
    488
  "yaml": |-
    table: income.table
    rows: income
    columns:
      - Type: |
          row_index
      - Receives: |
          'Yes' if row_item.receives else 'No'
      - Amount: |
          currency(row_item.amount) if row_item.receives else ''
    edit:
      - receives
    delete buttons: False
"table-dict-edit-minimum-number":
  "height": !!int |-
    332
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - income: |
          DADict.using(
            object_type=DAObject,
            keys=['employment', 'benefits', 'interest'],
            complete_attribute='complete',
            minimum_number=3,
            there_is_another=False)
"table-dict-string":
  "height": !!int |-
    332
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Income from ${ i }
    fields:
      - "How much income do you get from ${ i }?": income[i]
        datatype: currency
    ---
    question: |
      What type of income would you
      like to add?
    fields:
      - "Type of income": income.new_item_name
    ---
    table: income.table
    rows: income
    columns:
      - Type: |
          row_index
      - Receives: |
          'Yes' if row_item > 0 else 'No'
      - Amount: |
          currency(row_item) if row_item > 0 else ''
    edit: True
"table-empty":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    table: fruit_table
    rows: fruit
    columns:
      - Fruit Name: row_item.name
      - Number of Seeds: row_item.seeds
    show if empty: False
"table-empty-message":
  "height": !!int |-
    146
  "width": !!int |-
    488
  "yaml": |-
    table: fruit_table
    rows: fruit
    columns:
      - Fruit Name: row_item.name
      - Number of Seeds: row_item.seeds
    show if empty: |
      I'm very sorry, but there are no fruits
      to display today.
"table-export":
  "height": !!int |-
    340
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruit: DAList
    ---
    mandatory: true
    code: |
      fruit.object_type = Thing
    ---
    mandatory: True
    question: |
      Information about fruit
    subquestion: |
      Here is a fruity summary.

      ${ fruit_table }

      You can also [download this information].

      [download this information]: ${ fruit_table.export('fruit.xlsx', title='fruit').url_for() }
    ---
    table: fruit_table
    rows: fruit
    columns:
      - Fruit Name: row_item.name
      - Seeds: row_item.seeds
      - Last eaten: row_item.last_eaten
"table-if-then":
  "height": !!int |-
    289
  "width": !!int |-
    488
  "yaml": |-
    table: fruit_table
    rows: fruit
    columns:
      - Fruit Name: |
          noun_plural(row_item.name)
      - Number of Seeds: |
          "too many" if row_item.seeds > 20 else row_item.seeds
"table-mako":
  "height": !!int |-
    289
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Information about fruit
    subquestion: |
      Here is a fruity summary.

      Fruit Name     |Number of Seeds
      ---------------|----------------
      % for item in fruit:
      ${ item.name } | ${ item.seeds }
      % endfor
"table-markdown":
  "height": !!int |-
    289
  "width": !!int |-
    488
  "yaml": "mandatory: true\nquestion: |\n  Your fruit inventory\nsubquestion: |\n\
    \  This describes your fruit\n  collection.\n  \n  Fruit  | How many\n  -------|---------\n\
    \  Apple  | 4\n  Orange | 3\n  Pear   | 6"
"table-markdown-class":
  "height": !!int |-
    289
  "width": !!int |-
    488
  "yaml": |-
    mandatory: true
    question: |
      Your vegetable inventory
    subquestion: |
      This describes your vegetable collection.

      Vegetable { .text-center } | How many { .text-center }
      ---------------------------|--------------------------
      Potato                     | 4 { .text-end }
      Brocolli                   | 3 { .text-end }
      Beet                       | 6 { .text-end }
"table-markdown-noheader":
  "height": !!int |-
    289
  "width": !!int |-
    488
  "yaml": "mandatory: true\nquestion: |\n  Your vegetable inventory\nsubquestion:\
    \ |\n  This describes your vegetable\n  collection.\n\n  &nbsp;   |&nbsp;\n  ---------|------\n\
    \  Potato   |4     \n  Brocolli |3     \n  Beet     |6"
"table-markdown-unaligned":
  "height": !!int |-
    289
  "width": !!int |-
    488
  "yaml": |-
    mandatory: true
    question: |
      Your vegetable inventory
    subquestion: |
      This describes your vegetable
      collection.

      Vegetable|How many
      ------|----
      Potato|4
      Brocolli|3
      Beet|6
"table-not-available-label":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    table: fruit.table
    rows: fruit
    columns:
      - Fruit Name: row_item
      - Number of Seeds: row_item.seeds
      - Last eaten: row_item.last_eaten
    show incomplete: True
    show if empty: You do not have any fruit.
    not available label: ""
    edit:
      - name.text
      - last_eaten
"table-python":
  "height": !!int |-
    329
  "width": !!int |-
    488
  "yaml": |-
    table: fruit_table
    rows: fruit
    columns:
      - Fruit Name: |
          noun_plural(row_item.name)
      - Number of Seeds: |
          row_item.seeds * 2
"table-read-only":
  "height": !!int |-
    361
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      fruit.appendObject()
      fruit[-1].important = True
      fruit[-1].name.text = 'Apple'
      fruit[-1].seeds = 10
      fruit.appendObject()
      fruit[-1].important = True
      fruit[-1].name.text = 'Orange'
      fruit[-1].seeds = 5
    ---
    code: |
      fruit[i].important = False
    ---
    table: fruit.table
    rows: fruit
    columns:
      - Name: |
          row_item
      - Seeds: |
          row_item.seeds
    edit:
      - name.text
    read only: important
"table-read-only-2":
  "height": !!int |-
    385
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      fruit.appendObject()
      fruit[-1].important = {'delete': True, 'edit': False}
      fruit[-1].name.text = 'Apple'
      fruit[-1].seeds = 10
      fruit.appendObject()
      fruit[-1].important = {'delete': False, 'edit': True}
      fruit[-1].name.text = 'Orange'
      fruit[-1].seeds = 5
    ---
    code: |
      fruit[i].important = False
    ---
    table: fruit.table
    rows: fruit
    columns:
      - Name: |
          row_item
      - Seeds: |
          row_item.seeds
    edit:
      - name.text
    read only: important
"table-reorder":
  "height": !!int |-
    379
  "width": !!int |-
    488
  "yaml": |-
    table: fruit_table
    rows: fruit
    columns:
      - Fruit Name: row_item.name
      - Seeds: row_item.seeds
    edit:
      - name.text
    allow reordering: True
"table-require-gathered":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    table: fruit.table
    rows: fruit
    columns:
      - Fruit Name: row_item
      - Number of Seeds: row_item.seeds
      - Last eaten: row_item.last_eaten
    require gathered: False
    edit:
      - name.text
      - last_eaten
"table-show-incomplete":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    table: fruit.table
    rows: fruit
    columns:
      - Fruit Name: row_item
      - Number of Seeds: row_item.seeds
      - Last eaten: row_item.last_eaten
    show incomplete: True
    show if empty: You do not have any fruit.
    edit:
      - name.text
      - last_eaten
"table-sort":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    table: fruit.table
    rows: fruit
    columns:
      - Fruit Name: row_item
      - Number of Seeds: row_item.seeds
      - Last Eaten: row_item.last_eaten
    sort key: |
      lambda y: y.last_eaten
    sort reverse: True
    filter: |
      row_item.seeds > 0
    show if empty: |
      You have never eaten any fruit.
    edit:
      - name.text
      - last_eaten
"table-sort-dict":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    table: income.table
    rows: income
    columns:
      - Type: |
          row_index
      - Receives: |
          'Yes' if row_item.receives else 'No'
      - Amount: |
          currency(row_item.amount) if row_item.receives else ''
    sort key: |
      lambda y: y[1].amount if y[1].receives else 0.0
    filter: |
      row_item.receives is False or row_item.amount < 100
    edit:
      - receives
    delete buttons: False
"table-width":
  "height": !!int |-
    705
  "width": !!int |-
    488
  "yaml": |-
    features:
      table width: 35
    ---
    table: fruit_table
    rows: fruit
    columns:
      - Fruit Name: row_item.name
      - Seeds: row_item.seeds
"tablegather":
  "height": !!int |-
    155
  "width": !!int |-
    488
  "yaml": "objects: \n  - parties: DAList.using(object_type=Individual,\n        \
    \                  complete_attribute='complete',\n                          gathered=True)\n\
    ---\ncode: |\n  parties[i].name.first\n  parties[i].role\n  parties[i].complete\
    \ = True\n---\nquestion: |\n  Parties to the case\nsubquestion: |\n  % if parties.number()\
    \ > 0:\n  ${ parties.table }\n\n  ${ parties.add_action(label=\"Add another party\"\
    ) }\n  % else:\n  Every case must have at least one party.\n  \n  ${ parties.add_action(label=\"\
    Add a party\") }\n  % endif\ncontinue button field: parties.reviewed\nhide continue\
    \ button: |\n  parties.number() == 0\n---\ntable: parties.table\nrows: parties\n\
    columns:\n  - Name: row_item\n  - Role: row_item.role\nedit:\n  - name.first\n\
    \  - role\n---\nquestion: |\n  What is the name of the ${ ordinal(i) } party?\n\
    fields:\n  - First name: parties[i].name.first\n  - Last name: parties[i].name.last\n\
    ---\nquestion: |\n  Is ${ parties[i] } a plaintiff or a defendant?\nfield: parties[i].role\n\
    choices:\n  - Plaintiff: plaintiff\n  - Defendant: defendant\n---\nevent: final_screen\n\
    question: |\n  Summary of case\nsubquestion: |\n  % for role_name in ('plaintiff',\
    \ 'defendant'):\n    % for party in parties.filter(role=role_name):\n      % if\
    \ loop.first:\n  The ${ noun_plural(role_name) } are:\n\n      % endif\n    *\
    \ ${ party }\n    % endfor\n\n  % endfor\n---\nmandatory: True\ncode: |\n  parties.reviewed\n\
    \  final_screen"
"tags":
  "height": !!int |-
    266
  "width": !!int |-
    488
  "yaml": |-
    metadata:
      tags:
        - apples
        - oranges
    ---
    mandatory: True
    question: Tags
    subquestion: |
      The tags are:

      % for tag in session_tags():
      * ${ tag }
      % endfor

      Check your
      [interview list](${ url_of('interviews') })
      to see these tags.
    field: first_screen_done
    ---
    mandatory: True
    code: |
      session_tags().add('grapes')
    ---
    mandatory: True
    question: Tags
    subquestion: |
      The tags are:

      % for tag in session_tags():
      * ${ tag }
      % endfor

      Check your
      [interview list](${ url_of('interviews') })
      to see how these tags
      have changed.
"target-code":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite food?
    fields:
      - Favorite food: favorite_food
    under: |
      [TARGET feedback]
    check in: question_food
    ---
    event: question_food
    code: |
      food = action_argument('favorite_food')
      if food:
        content = "What? You like " + food.upper() + "?"
      else:
        content = ''
      background_response(target='feedback',
                          content=content)
    ---
    mandatory: True
    question: |
      Your favorite food is ${ favorite_food }.
"target-code-multiple":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    check in: question_food
    question: |
      What is your favorite food?  [TARGET feedback_one]
    fields:
      - Favorite food: favorite_food
    under: |
      [TARGET feedback_two]
    ---
    event: question_food
    code: |
      food = action_argument('favorite_food')
      if food:
        content_one = "  (Please don't be gross.)"
        content_two = "What? You like " + food.upper() + "?"
      else:
        content_one = ''
        content_two = ''
      background_response([{'target': 'feedback_one',
                          'content': content_one},
                          {'target': 'feedback_two',
                          'content': content_two}])
"target-code-template":
  "height": !!int |-
    213
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite food?
    fields:
      - Favorite food: favorite_food
    under: |
      [TARGET feedback]
    check in: question_food
    ---
    event: question_food
    code: |
      if action_argument('favorite_food'):
        the_food = action_argument('favorite_food').upper()
      else:
        the_food = 'nothing'
      food_message
    ---
    template: food_message
    content: |
      _What?_  You like ${ the_food }?
    target: feedback
"target-template":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite food?
    fields:
      - Favorite food: favorite_food
    under: |
      [TARGET feedback]
    check in: question_food
    ---
    template: question_food
    content: |
      % if action_argument('favorite_food'):
      _What?_  You like
      ${ action_argument('favorite_food').upper() }?
      % endif
    target: feedback
"template":
  "height": !!int |-
    290
  "width": !!int |-
    488
  "yaml": |-
    template: disclaimer
    content: |
      The opinions expressed herein do not
      *necessarily* reflect the views
      of ${ company }.
    ---
    field: intro_screen
    question: Welcome to the interview!
    subquestion: |
      Greetings.  We hope you learn something
      from this guided interview.

      ${ disclaimer }

      To get started, press **Continue**.
"template-file":
  "height": !!int |-
    290
  "width": !!int |-
    488
  "yaml": |-
    template: disclaimer
    content file: disclaimer.md
    ---
    field: intro_screen
    question: Welcome to the interview!
    subquestion: |
      Greetings.  We hope you learn something
      from this guided interview.

      ${ disclaimer }

      To get started, press **Continue**.
"template-file-code":
  "height": !!int |-
    290
  "width": !!int |-
    488
  "yaml": |-
    code: |
      template_file_to_use = 'disclaimer.md'
    ---
    template: disclaimer
    content file:
      code: template_file_to_use
    ---
    field: intro_screen
    question: Welcome to the interview!
    subquestion: |
      Greetings.  We hope you learn something
      from this guided interview.

      ${ disclaimer }

      To get started, press **Continue**.
"template-show":
  "height": !!int |-
    290
  "width": !!int |-
    488
  "yaml": |-
    template: disclaimer
    content: |
      The opinions expressed herein do not
      *necessarily* reflect the views
      of ${ company }.
    ---
    field: intro_screen
    question: Welcome to the interview!
    subquestion: |
      Greetings.  We hope you learn something
      from this guided interview.

      ${ disclaimer.show(company="ABC Widgets, Incorporated") }

      To get started, press **Continue**.
"template-subject":
  "height": !!int |-
    327
  "width": !!int |-
    488
  "yaml": |-
    template: disclaimer
    subject: |
      Please be advised
    content: |
      The opinions expressed herein do not
      *necessarily* reflect the views
      of ${ company }.
    ---
    field: intro_screen
    question: Welcome to the interview!
    subquestion: |
      Greetings.  We hope you learn something
      from this guided interview.

      To get started, press **Continue**.
    under: |
      ### ${ disclaimer.subject }

      ${ disclaimer.content }
"terminal-screen":
  "height": !!int |-
    102
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Congratulations!
    subquestion: |
      You are all done with the interview.
    mandatory: True
"terms":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    terms:
      creeper: |
        A tall green creature that explodes if
        you get too close.
      zombie pigman: |
        A harmless creature who carries a gold
        sword.
    ---
    question: Have you ever met a {creeper}?
    subquestion: |
      If you have met a {zombie pigman}, you
      have almost certainly met a creeper.
    yesno: met_a_creeper
"terms-alternate":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    question: Have you ever met a {creeper}?
    subquestion: |
      If you have met a
      {zombie pigman|zombified pigman}, you
      have almost certainly met a creeper.
    yesno: met_a_creeper
"testage2":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Individual
    ---
    question: |
      How old are you?
    fields:
      - Age in years: user.age
        datatype: number
    ---
    mandatory: True
    code: |
      need(user.age)
    ---
    mandatory: True
    question: |
      You are ${ user.age_in_years() } years old.
"testdalist":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - recipient: DAList
      - trustee: Individual
      - beneficiary: Individual
      - grantor: Individual
    ---
    mandatory: True
    code: |
      recipient.clear()
      recipient.append(trustee)
      recipient.append(beneficiary)
      recipient.append(grantor)
      recipient.appendObject(Individual)
      recipient.appendObject(Individual)
      recipient.gathered = True
    ---
    mandatory: True
    question: The recipients
    subquestion: |
      % for person in recipient:
      ${ person } is a recipient.
      % endfor
    ---
    generic object: Individual
    question: |
      What is the name of the ${ x.object_name() }?
    fields:
      - First Name: x.name.first
      - Last Name: x.name.last
    ---
    generic object: Individual
    question: |
      The ${ ordinal(i) } ${ x.object_name() } must have a name.  What is it?
    fields:
      - First Name: x[i].name.first
      - Last Name: x[i].name.last
"text-box-field":
  "height": !!int |-
    248
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Tell me the story of your life.
    fields:
      - Life Story: target_variable
        input type: area
"text-box-field-rows":
  "height": !!int |-
    392
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Tell me the story of your life.
    fields:
      - Life Story: target_variable
        input type: area
        rows: 10
"text-default":
  "height": !!int |-
    302
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What are your favorite things to eat?
    subquestion: |
      Please be specific.
    fields:
      - Vegetable: target_variable
        default: eggplant
      - Fruit: other_target_variable
        default: |
          ${ greatest_fruit }
    ---
    code: |
      greatest_fruit = "apples"
"text-field":
  "height": !!int |-
    302
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What are your favorite things to eat?
    subquestion: |
      Please be specific.
    fields:
      - Vegetable: target_variable
      - Fruit: other_target_variable
"text-field-example":
  "height": !!int |-
    302
  "width": !!int |-
    488
  "yaml": |-
    question: Tell me about yourself
    fields:
      - Favorite color: user_favorite_color
      - Description of your ideal vacation: user_ideal_vacation
        input type: area
        required: False
"text-help":
  "height": !!int |-
    326
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What are your favorite things to eat?
    subquestion: |
      If you don't know what a vegetable or
      fruit is, click the question mark icons.
    fields:
      - Vegetable: target_variable
        help: |
          A plant.
      - Fruit: other_target_variable
        help: |
          The pulpy, edible seed vessels
          of certain plants.
"text-hint":
  "height": !!int |-
    302
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What are your favorite things to eat?
    subquestion: |
      Please be specific.
    fields:
      - Vegetable: target_variable
        hint: e.g., eggplant, turnips
      - Fruit: other_target_variable
        hint: e.g., apples, oranges
"time-field":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What time is your appointment?
    fields:
      - Time: target_variable
        datatype: time
"timezone-list":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your time zone?
    fields:
      - Time zone: user_timezone
        default: "America/New_York"
        code: |
          timezone_list()
"title-case":
  "height": !!int |-
    126
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Title of your book
    subquestion: |
      If your book is about
      ${ subject },
      its title should be
      "${ title_case(subject) }."
    sets: all_done
"today":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Today's date is ${ today() }.
    mandatory: True
"true-values":
  "height": !!int |-
    368
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - Apples
          - Peaches
          - Pears
          - Plums
    ---
    mandatory: True
    question: |
      Summary of your answer
    subquestion: |
      You like
      ${ likes_fruit.true_values() }.
"twocol":
  "yaml": |-
    objects:
      - user: Individual
"umbrella-interview":
  "height": !!int |-
    292
  "width": !!int |-
    488
  "yaml": |-
    include:
      - interview-fruit.yml
      - interview-vegetables.yml
      - interview-flowers.yml
    ---
    question: |
      What interview would you like to do?
    field: interview_choice
    choices:
      - Fruit
      - Vegetables
      - Flowers
    ---
    mandatory: true
    code: |
      if interview_choice == 'Fruit':
        interview_fruit_done
      elif interview_choice == 'Vegetables':
        interview_vegetables_done
      elif interview_choice == 'Flowers':
        interview_flowers_done
"under":
  "height": !!int |-
    269
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is the airspeed velocity of an
      unladen swallow?
    fields:
      - Velocity: swallow_velocity
    under: |
      Note: if you did not catch this
      movie reference, you need to
      improve your cultural literacy.
"under-text":
  "height": !!int |-
    352
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What are your favorite things to eat?
    subquestion: |
      Please be specific.
    fields:
      - Vegetable: target_variable
        under text: E.g., eggplant, turnips
      - Fruit: other_target_variable
        under text: E.g., apples, oranges
"update-terms":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    terms:
      - creeper: |
          A tall green creature that explodes if
          you get too close.
      - zombie pigman: |
          A harmless creature who carries a gold
          sword.
    ---
    mandatory: True
    code: |
      update_terms({'zombie pigman': 'A nether dweller', 'nether': 'The underworld'})
"upload":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": "question: |\n  Please upload a picture of yourself.\nfields:\n  - Picture:\
    \ user_picture\n    datatype: file\n---\nquestion: |\n  You're so adorable, Fran\xE7\
    ois!\nsubquestion: |\n  ${ user_picture }\nmandatory: True"
"upload-accept":
  "height": !!int |-
    515
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please upload a JPEG or PNG of yourself.
    fields:
      - Picture: user_picture
        datatype: file
        accept: |
          "image/jpeg, image/png"
"upload-max-image-size":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please upload a picture of yourself.
    fields:
      - Picture: user_picture
        datatype: file
        maximum image size: 100
    ---
    question: |
      You're so small!
    subquestion: |
      ${ user_picture }
    mandatory: True
"upload-max-image-size-features":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    features:
      maximum image size: 100
"upload-max-image-size-type":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please upload a picture of yourself.
    fields:
      - Picture: user_picture
        datatype: file
        maximum image size: 100
        image upload type: jpeg
    ---
    question: |
      You're so small!
    subquestion: |
      ${ user_picture }
    mandatory: True
"upload-max-image-size-type-features":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    features:
      maximum image size: 100
      image upload type: jpeg
"upload-multiple":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please upload pictures of yourself.
    fields:
      - Pictures: user_pictures
        datatype: files
    ---
    question: |
      Look at all those adorable photos!
    subquestion: |
      ${ user_pictures }
    mandatory: True
"upload-plain":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please upload a JPEG or PNG of yourself.
    fields:
      - File: user_file
        datatype: file
        file css class: None
"upload-show":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: |
      You're so adorable!
    subquestion: |
      ${ user_picture.show() }
    mandatory: True
"upload-show-width":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: |
      You're so adorable!
    subquestion: |
      ${ user_picture.show(width='250px') }
    mandatory: True
"upload_audio":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: Please record some audio.
    fields:
      - MP3 file: user_audio_file
        datatype: file
    ---
    question: |
      Let's listen to what you recorded.
    audio: ${ user_audio_file }
    mandatory: True
"upload_audio_microphone":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: Please record some audio.
    fields:
      - MP3 file: user_audio_file
        datatype: microphone
    ---
    question: |
      Let's listen to what you recorded.
    audio: ${ user_audio_file }
    mandatory: True
"upload_images":
  "yaml": |-
    question: Please take a picture.
    fields:
      - Picture: user_image
        datatype: camera
        maximum image size: 1200
    ---
    question: |
      Let's look at what you uploaded.
    subquestion: |
      ${ user_image }
    mandatory: True
"url-of":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Read more about this interview.
    subquestion: |
      Feel free to
      [read more](${ url_of('docassemble.base:hello.pdf') })
      about this interview before
      proceeding.
    field: ready_to_proceed
"use-question-library":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    include:
      - question-library.yml
    ---
    mandatory: True
    code: |
      if user_agrees_it_is_a_nice_evening and user_wants_to_go_to_dance:
        good_news
    ---
    mandatory: True
    question: |
      Say, I have to run.  Bye!
    ---
    event: good_news
    question: |
      That is splendid news!
"user-is-trustee":
  "height": !!int |-
    161
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      % if user is trustee:
      As the trustee of the estate, you need to understand that it is
      your fiduciary duty to safeguard the assets of the estate.
      % elif user is grantee:
      You are the grantee, which means that ${ trustee } is required to
      safeguard the assets of the estate on your behalf.
      % else:
      ${ trustee } will safeguard the assets of the estate on behalf of
      ${ grantee }.
      % endif
"user-logged-in":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      favorite_fruit
      ok_to_finish
      final_screen
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    code: |
      if not user_logged_in():
        require_login_screen
      ok_to_finish = True
    ---
    event: require_login_screen
    question: |
      You need to log in to finish this interview.
    buttons:
      - Log in: leave
        url: ${ url_of('login', next=interview_url()) }
"val":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What do you want for
      dessert<span id="the_dessert"></span>?
    fields:
      - Dessert: dessert
      - html: |
          <a href="#" id="show_me" class="btn btn-primary">Eat it</a>
    script: |
      <script>
        $("#show_me").click(function(){
          $("#the_dessert").html(" besides " + val('dessert'));
          return false;
        });
      </script>
"valid-formats":
  "height": !!int |-
    535
  "width": !!int |-
    488
  "yaml": |-
    question: Your document is ready.
    attachment:
      - name: A hello world document
        filename: Hello_World_Document
        valid formats:
          - pdf
        description: |
          A document with a classic message
        content: |
          Hello, world!
    mandatory: True
"valid-formats-code":
  "height": !!int |-
    535
  "width": !!int |-
    488
  "yaml": |-
    question: Your document is ready.
    attachment:
      - name: A hello world document
        filename: Hello_World_Document
        valid formats:
          code: |
            ['pdf'] + (['rtf'] if user_has_privilege('admin') else [])
        description: |
          A document with a classic message
        content: |
          Hello, world!
    mandatory: True
"validation-code-phone":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your phone number?
    fields:
      - Phone number: phone_number
    validation code: |
      if not phone_number_is_valid(phone_number):
        validation_error("Please enter a phone number in the format (xxx) xxx-xxxx", field="phone_number")
      phone_number = phone_number_formatted(phone_number)
"validation-error":
  "height": !!int |-
    240
  "width": !!int |-
    488
  "yaml": |-
    question: Repeat after me.
    subquestion: |
      To continue, type "I solemnly swear
      that I am up to no good."
    fields:
      - no label: oath
        validate: |
          lambda y: validation_error("No, you typed it wrong.") if y != 'I solemnly swear that I am up to no good.' else True
    ---
    mandatory: True
    need: oath
    question: |
      You are now allowed to use
      the Marauder's Map.
"validation-messages":
  "height": !!int |-
    254
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - "Favorite Fruit": favorite_fruit
        validation messages:
          required: |
            Come on, everyone has a favorite
            fruit.
      - "How many seeds does it have?": number_of_seeds
        datatype: integer
        max: 100
        validation messages:
          max: |
            No fruit has that many seeds!
          required: |
            I really need to know this.
"value":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: Summary
    subquestion: |
      Your favorite fruit is
      ${ value('favorite_fruit') }.
    mandatory: True
"variables_as_json":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "mandatory: True\ncode: |\n  multi_user = True\n---\nevent: query_variables\n\
    code: |\n  variables_as_json()\n---\nmandatory: True\nquestion: |\n  You currently\
    \ have\n  ${ nice_number(number_of_pieces) }\n  ${ noun_plural('piece', number_of_pieces)\
    \ }\n  of\n  ${ noun_singular(favorite_fruit) }.\nsubquestion: |\n  Use\n  [this\
    \ link](${ interview_url_action('query_variables') })\n  to query the information\
    \ from\n  another application.\n\n  You can also change the \n  [fruit](${ url_action('favorite_fruit')\
    \ })\n  and the\n  [number of pieces](${ url_action('number_of_pieces') })."
"verbatim":
  "height": !!int |-
    288
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Provide some text.
    subquestion: |
      Try inserting Markdown or HTML characters.
    fields:
      no label: user_input
      input type: area
    ---
    mandatory: True
    question: |
      This content should be devoid
      of formatting.
    subquestion: |
      ${ verbatim(user_input) }
    attachment:
      content: |
        ${ verbatim(user_input) }
"video":
  "height": !!int |-
    453
  "width": !!int |-
    488
  "yaml": |-
    field: ready_to_proceed
    question: |
      Welcome to the interview.
    subquestion: |
      Please watch this introductory video
      before proceeding with the interview.
    video: |
      [YOUTUBE 9bZkp7q19f0]
"video-static":
  "yaml": |-
    question: |
      Are you traveling to New York City?
    yesno: going_to_nyc
    video: nyc_tourism.mp4
"vimeo":
  "yaml": |-
    field: ready_to_proceed
    question: |
      Welcome to the interview.
    subquestion: |
      Please watch this introductory video
      before proceeding with the interview.
    video: |
      [VIMEO 154323013]
"with-mandatory":
  "yaml": |-
    question: |
      How are you doing?
    field: how_doing
    choices:
      - Fine
      - Ill
    ---
    question: |
      What is your favorite color?
    fields:
      Color: favorite_color
    ---
    mandatory: True
    question: |
      Your favorite color is
      ${ favorite_color }.
    subquestion: |
      % if how_doing == 'Fine':
      I am glad you are doing well.
      % else:
      I am sorry you aren't feeling 100%.
      % endif
"with-mandatory-tweak-a":
  "yaml": |-
    question: |
      How are you doing?
    field: how_doing
    choices:
      - Fine
      - Ill
    ---
    question: |
      What is your favorite color?
    fields:
      Color: favorite_color
    ---
    mandatory: True
    need:
      - how_doing
      - favorite_color
    question: |
      Your favorite color is
      ${ favorite_color }.
    subquestion: |
      % if how_doing == 'Fine':
      I am glad you are doing well.
      % else:
      I am sorry you aren't feeling 100%.
      % endif
"with-mandatory-tweak-b":
  "yaml": |-
    mandatory: True
    code: |
      how_doing
      final_screen
    ---
    question: |
      How are you doing?
    field: how_doing
    choices:
      - Fine
      - Ill
    ---
    question: |
      What is your favorite color?
    fields:
      Color: favorite_color
    ---
    event: final_screen
    question: |
      Your favorite color is
      ${ favorite_color }.
    subquestion: |
      % if how_doing == 'Fine':
      I am glad you are doing well.
      % else:
      I am sorry you aren't feeling 100%.
      % endif
"yaml-markdown-python":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite number?
    fields:
      Favorite number: best_number
      datatype: number
    ---
    question: |
      % if best_number == 42:
      That's **my** favorite number!
      % else:
      What a _lousy_ favorite number.
      % endif
    mandatory: True
"yesno":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Are you at least 18 years of age?
    yesno: over_eighteen
"yesno-custom":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Are you satisfied?
    field: user_is_satisfied
    buttons:
      - "You bet": True
      - "No way": False
"yesnomaybe":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Is Topeka the capital of Kansas?
    yesnomaybe: topeka_is_capital_of_kansas
    ---
    question: |
      % if topeka_is_capital_of_kansas:
      You were right that Topeka is the capital of Kansas.
      % elif topeka_is_capital_of_kansas is None:
      You should know your state capitals!
      % else:
      Actually, Topeka is the capital of Kansas.
      % endif
    mandatory: True
"zip-file":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - coins_picture: DAStaticFile.using(filename='coins36.png')
    ---
    question: |
      Please upload a picture of yourself.
    fields:
      - Picture: user_picture
        datatype: file
    ---
    mandatory: True
    question: |
      Here is your ZIP file.
    subquestion: |
      ${ zip_file(user_picture, {'assets': [coins_picture, 'cow.jpg'] }, filename="Image files.zip") }

"ab-test":
  "height": !!int |-
    362
  "width": !!int |-
    488
  "yaml": |-
    mandatory: true
    code: |
      import random
      if random.random() < 0.5:
        url = interview_url(i="docassemble.demo:data/questions/questions.yml")
      else:
        url = interview_url(i="docassemble.demo:data/questions/examples/redact-docx.yml")
      command('exit', url=url)
"advocate":
  "yaml": |-
    objects:
      - child: Individual
"ajax":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "code: |\n  favorite_fruit = \"apples\"\n---\nid: guess favorite fruit\n\
    mandatory: True\nquestion: |\n  Guess my favorite fruit.\nfields:\n  - Your guess:\
    \ guess\n  - note: |\n      ${ action_button_html(\"#\", id_tag=\"getFavoriteFruit\"\
    , label=\"Verify\", size=\"md\", color=\"primary\") }\nscript: |\n  <script>\n\
    \    $(document).on('daPageLoad', function(){\n      // hide the Continue button\n\
    \      // and disable the form for\n      // this question\n      if ($(\".question-guess-favorite-fruit\"\
    ).length > 0){\n        $(\".da-field-buttons\").remove();\n        $(\"#daform\"\
    ).off().on('submit', function(event){\n          event.preventDefault();\n   \
    \       return false;\n        });\n      };\n    });\n    $(\"#getFavoriteFruit\"\
    ).click(function(event){\n      event.preventDefault();\n      if (!/\\S/.test(val(\"\
    guess\"))){\n        flash(\"You need to guess something!\", \"danger\", true);\n\
    \        return false;\n      }\n      flash(\"Verifying . . .\", \"info\", true);\n\
    \      action_call(\"verify_favorite_fruit\", {\"fruit\": val(\"guess\")}, function(data){\n\
    \        if (data.success){\n          flash(\"You're right!\", \"info\", true);\n\
    \        }\n        else {\n          flash(\"You're totally wrong.  I actually\
    \ like \" + data.fruit + \".\", \"danger\", true);\n        }\n      });\n   \
    \   return false;\n    });\n  </script>\n---\nevent: verify_favorite_fruit\ncode:\
    \ |\n  # No need to save the interview\n  # answers after this action.\n  set_save_status('ignore')\n\
    \  \n  # Pretend we have to think\n  # about the answer.\n  import time\n  time.sleep(1)\n\
    \  \n  if favorite_fruit.lower() == action_argument('fruit').lower():\n    success\
    \ = True\n  else:\n    success = False\n  json_response(dict(success=success,\
    \ fruit=favorite_fruit))"
"all-mandatory":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Welcome to the interview!
    continue button field: intro
    ---
    mandatory: True
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    mandatory: True
    question: |
      What is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
    ---
    mandatory: True
    question: |
      Here is your document.
    attachment:
      content: |
        Your favorite fruit is ${ favorite_fruit }.

        % if favorite_fruit == 'apple':
        You will never need to see a doctor.

        % endif
        Your favorite vegetable is ${ favorite_vegetable }.
"background-tail":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "objects:\n  r: DARedis\n---\nmandatory: True\ncode: |\n  log_key = r.key('log:'\
    \ + current_context().session)\n  messages = list()\n---\nmandatory: True\ncode:\
    \ |\n  if the_task.ready():\n    last_messages_retrieved\n    final_screen\n \
    \ else:\n    waiting_screen\n---\ncode: |\n  the_task = background_action('bg_task',\
    \ 'refresh', additional=value_to_add)\n---\nquestion: |\n  How much shall I add\
    \ to 553?\nfields:\n  - Number: value_to_add\n    datatype: integer\n---\nevent:\
    \ bg_task\ncode: |\n  import time\n  r.rpush(log_key, 'Waking up.')\n  time.sleep(10)\n\
    \  r.rpush(log_key, 'Ok, I am awake now.')\n  value = 553 + action_argument('additional')\n\
    \  time.sleep(17)\n  r.rpush(log_key, 'I did the hard work.')\n  time.sleep(14)\n\
    \  r.rpush(log_key, 'Ok, I am done.')\n  background_response_action('bg_resp',\
    \ ans=value)\n---\nevent: bg_resp\ncode: |\n  answer = action_argument('ans')\n\
    \  background_response()\n---\nevent: waiting_screen\nquestion: |\n  Your process\
    \ is running.\nsubquestion: |\n  #### Message log\n  \n  <ul class=\"list-group\"\
    \ id=\"logMessages\">\n  </ul>\ncheck in: get_log\n---\nevent: get_log\ncode:\
    \ |\n  import json\n  new_messages = ''\n  while True:\n    message = r.lpop(log_key)\n\
    \    if message:\n      messages.append(message.decode())\n      new_messages\
    \ += '<li class=\"list-group-item\">' + message.decode() + '</li>'\n      continue\n\
    \    break\n  background_response('$(\"#logMessages\").append(' + json.dumps(new_messages)\
    \ + ')', 'javascript')\n---\ncode: |\n  while True:\n    message = r.lpop(log_key)\n\
    \    if message:\n      messages.append(message.decode())\n      continue\n  \
    \  break\n  last_messages_retrieved = True\n---\nevent: final_screen\nquestion:\
    \ |\n  The answer is ${ answer }.\nsubquestion: |\n  #### Message log\n  \n  <ul\
    \ class=\"list-group\" id=\"logMessages\">\n  % for message in messages:\n   \
    \ <li class=\"list-group-item\">${ message }</li>\n  % endfor\n  </ul>"
"bates-number":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Upload a file
    fields:
      - File: the_file
        datatype: file
    ---
    mandatory: True
    code: |
      the_file.bates_number(prefix='FRUIT')
    ---
    mandatory: True
    question: |
      Your file
    subquestion: |
      ${ the_file }
"bootstrap-theme":
  "height": !!int |-
    124
  "width": !!int |-
    488
  "yaml": |-
    features:
      bootstrap theme: lumen.min.css
"branch-mandatory":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Welcome to the interview!
    continue button field: intro
    ---
    mandatory: True
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    mandatory: favorite_fruit == 'apple'
    question: |
      What is your favorite type of apple?
    fields:
      - Type of apple: favorite_apple
    ---
    mandatory: True
    question: |
      Here is your document.
    attachment:
      content: |
        Your favorite fruit is ${ favorite_fruit }.

        % if favorite_fruit == 'apple':
        Your favorite type of apple is ${ favorite_apple }.

        % endif
"button-checkboxes":
  "height": !!int |-
    332
  "width": !!int |-
    488
  "yaml": |-
    features:
      css: button-checkboxes.css
    ---
    question: |
      Please tell me what you think.
    fields:
      - "Select the fruits you like": likes_fruit
        datatype: checkboxes
        choices:
          - apple
          - peach
          - pear
      - "What is your favorite fruit overall?": favorite_fruit
"calendar":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .calendar
    ---
    objects:
      - event: Thing
      - user: Person
      - attendees: DAList.using(object_type=Person)
    ---
    question: |
      Tell me about yourself.
    fields:
      - Name: user.name.text
      - E-mail: user.email
        datatype: email
    ---
    question: |
      Would you like to invite any attendees?
    yesno: attendees.there_are_any
    ---
    question: |
      Tell me about the ${ ordinal(i) } attendee.
    fields:
      - Name: attendees[i].name.text
      - E-mail: attendees[i].email
        datatype: email
    ---
    question: |
      Are there any more attendees besides ${ attendees }?
    yesno: attendees.there_is_another
    ---
    question: |
      Tell me about the event.
    fields:
      - Title: event.title
      - Location: event.location
        required: False
      - Start date: event.begin_date
        datatype: date
      - Start time: event.begin_time
        datatype: time
      - End date: event.end_date
        datatype: date
      - End time: event.end_time
        datatype: time
      - Description: event.description
        input type: area
        required: False
    validation code: |
      if event.end_date < event.begin_date:
        raise DAValidationError('The end date must be on or after the start date.', field='event.end_date')
      if event.end_date.replace_time(event.end_time) < event.begin_date.replace_time(event.begin_time):
        raise DAValidationError('The end time must be after the start time.', field='event.end_time')
    ---
    template: email_template
    subject: |
      ${ event.title }
    content: |
      You are invited to ${ event.title } \
      % if event.location:
      at ${ event.location } \
      % endif
      from \
      % if event.begin_date == event.end_date:
      ${ format_time(event.begin_time, 'hh:mm a') } to \
      ${ format_time(event.end_time, 'hh:mm a') } \
      on ${ event.begin_date }.
      % else:
      ${ format_time(event.begin_time, 'hh:mm a') } \
      on ${ event.begin_date } to \
      ${ format_time(event.end_time, 'hh:mm a') } \
      on ${ event.end_date }.
      % endif
      % if event.description:

      ${ event.description }
      % endif
    ---
    code: |
      ics_file = make_event(title=event.title,
                            location=event.location,
                            description=event.description,
                            begin_date=event.begin_date,
                            begin_time=event.begin_time,
                            end_date=event.end_date,
                            end_time=event.end_time,
                            organizer=user,
                            attendees=attendees)
    ---
    code: |
      email_sent = send_email(to=[user] + attendees,
                              template=email_template,
                              attachments=ics_file)
    ---
    event: final_screen
    prevent going back: True
    question: |
      The invitation was sent.
    ---
    mandatory: True
    code: |
      user.name.text
      attendees.gather()
      email_sent
      final_screen
"cards":
  "height": !!int |-
    153
  "width": !!int |-
    488
  "yaml": ""
"chatbot":
  "height": !!int |-
    386
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .chatbot
"chatbot-bg":
  "height": !!int |-
    153
  "width": !!int |-
    488
  "yaml": |-
    generic object: Conversation
    event: x.bg_ask
    code: |
      background_response(x.fg_ask(action_argument('prompt')))
"chatbot-bg-object":
  "height": !!int |-
    153
  "width": !!int |-
    488
  "yaml": ""
"chatbot-slow":
  "height": !!int |-
    386
  "width": !!int |-
    488
  "yaml": |-
    include:
      - chatbot-bg.yml
"chatbot-slow-object":
  "height": !!int |-
    386
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .chatbot_bg_object
"clauses":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": "objects:\n  - markdown_clause: DADict\n  - edited_clause: DADict\n---\n\
    code: |\n  markdown_clause[i] = assemble_docx('data/templates/contract.docx',\
    \ fields={'clause': i}, output_format='md', return_content=True)\n---\ncode: |\n\
    \  # This variable is set to None \n  # so that the .docx file does \n  # not\
    \ assemble a single clause\n  # when it is assembled at the\n  # end.\n  clause\
    \ = None\n---\nquestion: |\n  A contract\nsubquestion: |\n  You are agreeing to\
    \ a contract \n  with me.  Please continue.\ncontinue button field: welcome_screen\n\
    ---\nquestion: The clauses\nsubquestion: |\n  The firstborn clause is:\n  \n \
    \ ${ quote_paragraphs(markdown_clause['firstborn']) }\n\n  The counterparts clause\
    \ is:\n  \n  ${ quote_paragraphs(markdown_clause['counterparts']) }\ncontinue\
    \ button field: clauses_shown\n---\nquestion: |\n  Make any necessary changes\
    \ to the ${ i } clause.\nfields:\n  - no label: edited_clause[i]\n    default:\
    \ ${ markdown_clause[i] }\n    input type: area\n---\nevent: final_screen\nquestion:\
    \ |\n  Here is the contract.\nattachment:\n  name: Contract\n  docx template file:\
    \ contract.docx"
"collate":
  "height": !!int |-
    284
  "width": !!int |-
    488
  "yaml": "objects:\n  - favorite: DADict.using(object_type=DAObject, keys=['fruit',\
    \ 'vegetable', 'fungus'], gathered=True)\n  - cover_page: DAList\n---\nquestion:\
    \ |\n  What is your favorite ${ i }?\nfields:\n  - \"${ capitalize(i) }\": favorite[i].variety\n\
    \  - \"Do you have documentation of this?\": favorite[i].has_documentation\n \
    \   datatype: yesnoradio\n  - \"Attach documentation\": favorite[i].documentation\n\
    \    datatype: file\n    show if: favorite[i].has_documentation\n---\nattachment:\n\
    \  variable name: summary_document\n  content: |\n    [BOLDCENTER] Your Favorite\
    \ Things\n    \n    % for key, val in favorite.items():\n    Your favorite ${\
    \ key } is\n    ${ val.variety }.\n    % if val.has_documentation:\n    See Exhibit\n\
    \    ${ alpha(val.documentation_reference) }.\n    % endif\n    \n    % endfor\n\
    ---\nattachment:\n  variable name: cover_page[i]\n  docx template file: exhibit_insert.docx\n\
    ---\nmandatory: True\ncode: |\n  information_gathered\n  bundle\n  final_screen\n\
    ---\ncode: |\n  indexno = 0\n  for item in favorite.values():\n    item.variety\n\
    \    if item.has_documentation:\n      item.documentation\n      item.documentation_reference\
    \ = indexno\n      indexno += 1\n  information_gathered = True\n---\ncode: |\n\
    \  document_list = list()\n  document_list.append(summary_document)\n  for item\
    \ in favorite.values():\n    if item.has_documentation:\n      document_list.append(cover_page[item.documentation_reference])\n\
    \      document_list.append(item.documentation)\n  bundle = pdf_concatenate(document_list,\
    \ filename=\"Favorites.pdf\")\n---\nevent: final_screen\nquestion: |\n  Your documents\n\
    subquestion: |\n  ${ action_button_html(bundle.url_for(), color='link', label='Download\
    \ bundle', icon='file-pdf') }"
"companies":
  "yaml": |-
    modules:
      - .companydb
"complete-attribute-method":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .fishlist
    ---
    objects:
      - fishes: FishList
    ---
    question: |
      Are there any fish?
    yesno: fishes.there_are_any
    ---
    question: |
      Are there any more fish?
    yesno: fishes.there_is_another
    ---
    question: |
      What is the ${ ordinal(i) } fish's common name?
    fields:
      - Name: fishes[i].common_name
    ---
    question: |
      Tell me more about the ${ fishes[i] }.
    fields:
      - Species name: fishes[i].species
      - Number of scales: fishes[i].scales
        datatype: integer
    ---
    mandatory: True
    question: |
      Thank you for telling me about ${ fishes }.
"context":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    variable name: fruits
    use objects: True
    data:
      - question: Apple
        document: red fruit
      - question: Orange
        document: fruit that rhymes with nothing
      - question: Peach
        document: juicy fruit
        docx: peachy peach
        pandoc: very juicy fruit
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
        datatype: object
        choices: fruits
"context-code":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    variable name: fruits
    use objects: True
    data from code:
      - question: |
          "Apple"
        document: |
          "red fruit"
      - question: |
          "Orange"
        document: |
          "fruit that rhymes " + "with nothing"
      - question: |
          "Peach"
        document: |
          "juicy fruit"
        docx: |
          "peachy peach"
        pandoc: |
          "very juicy " + "fruit"
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
        datatype: object
        choices: fruits
"context-manual":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruits: DAList.using(auto_gather=False)
    ---
    code: |
      fruits.clear()
      fruits.appendObject(DAContext, 'Apple', 'red fruit')
      fruits.appendObject(DAContext, 'Orange', 'fruit that rhymes with nothing')
      fruits.appendObject(DAContext, question='Peach', document='juicy fruit', docx='peachy peach', pandoc='very juicy fruit')
      fruits.gathered = True
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
        datatype: object
        choices: fruits
"continuation-page":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - fruits: DAList.using(there_are_any=True)
    ---
    question: |
      What is your ${ ordinal(i) } favorite fruit?
    fields:
      - Fruit: fruits[i]
    ---
    question: |
      Do you have other favorite fruits besides ${ fruits }?
    subquestion: |
      Hint: enter at least five.
    yesno: fruits.there_is_another
"counter":
  "height": !!int |-
    194
  "width": !!int |-
    488
  "yaml": "objects:\n  r: DARedis\n  milestone: DADict.using(gathered=True)\n---\n\
    code: |\n  r.incr(r.key(i))\n  milestone[i] = True\n---\nmandatory: True\ncode:\
    \ |\n  milestone['01 started']\n  intro_screen\n  milestone['02 got past intro']\n\
    \  favorite_fruit\n  favorite_vegetable\n  milestone['03 collected info']\n  user_name\n\
    \  the_document\n  milestone['04 document assembled']\n  final_screen\n---\nevent:\
    \ final_screen\nquestion: |\n  Thank you for providing this information.\nsubquestion:\
    \ |\n  Statistics about this interview:\n    \n  % for step in sorted(milestone.keys()):\n\
    \  * ${ step[2:] }: ${ r.get(r.key(step)).decode() }\n\n  % endfor\nattachment\
    \ code: the_document"
"courtfile":
  "height": !!int |-
    316
  "width": !!int |-
    488
  "yaml": "objects:\n  - user: Individual\n  - court_filing_unit: DAEmailRecipient.using(name='Prothonotary\
    \ of the Court', address='jpyle@docassemble.org')\n---\nquestion: |\n  Please\
    \ provide your name and\n  e-mail address.\nfields:\n  - First Name: user.name.first\n\
    \  - Last Name: user.name.last\n  - E-mail address: user.email\n    datatype:\
    \ email\n---\nquestion: |\n  What is your favorite fruit?\nfields:\n  - Fruit:\
    \ user.favorite_fruit\n---\nattachment:\n  name: |\n    Praecipe to Declare Favorite\
    \ Fruit\n  filename: Praecipe_Favorite_Fruit_${ space_to_underscore(user) }\n\
    \  content: |\n    [BOLDCENTER] Praecipe to Declare\n    Favorite Fruit\n\n  \
    \  I, ${ user }, on ${ today() }, hereby\n    inform all interested parties that\
    \ my\n    favorite fruit is\n    ${ user.favorite_fruit }.\n  variable name: court_document\n\
    ---\nmandatory: True\nquestion: |\n  Your Praecipe to Declare Favorite Fruit\n\
    subquestion: |\n  % if task_performed('filed_in_court'):\n  You have filed your\
    \ **Praecipe to Declare\n  Favorite Fruit** in court.\n  \n  Follow up with the\
    \ court if you have\n  any questions about the legal process.\n  % else:\n  When\
    \ you are ready to file your Praecipe\n  to Declare Favorite Fruit in court, press\n\
    \  this button.\n  \n  ${ action_button_html(url_action('filing_process'),\n \
    \                       label='Submit this to the court',\n                  \
    \      size='md',\n                        color='warning') }\n\n  Until then,\
    \ take your time and look\n  over the document to make sure you\n  really want\
    \ to file it.\n  % endif\nattachment code: court_document\n---\nevent: filing_process\n\
    code: |\n  if task_performed('filed_in_court'):\n    # This is unlikely to happen\
    \ but\n    # still worth protecting against.\n    log('You have already filed\
    \ the document.', 'danger')\n  else:\n    force_ask('wants_to_file',\n       \
    \       'email_address_confirmed',\n              'really_wants_to_file',\n  \
    \            {'recompute': ['document_filed']},\n              'end_of_filing_process')\n\
    ---\nquestion: |\n  Are you completely and totally\n  sure you want to file your\
    \ Praecipe\n  to Declare Favorite Fruit?\nsubquestion: |\n  Once you file your\
    \ Praecipe, you\n  can't take it back.\nfield: wants_to_file\nbuttons:\n  - \"\
    Yes, I am sure I want to file.\": True\n  - \"On second thought, I am not ready\"\
    : False\n---\nif: wants_to_file\nquestion: |\n  What is your e-mail address?\n\
    subquestion: |\n  I am going to e-mail your document\n  to the court.  I need\
    \ to cc you on\n  the e-mail so you have it for your\n  records.\n\n  Please confirm\
    \ that this is your\n  e-mail address.\nfields:\n  - E-mail: user.email\ncontinue\
    \ button field: email_address_confirmed\n---\nif: wants_to_file\nquestion: |\n\
    \  Are you completely and totally sure\n  beyond a shadow of a doubt that you\n\
    \  wish to file your Praecipe in court?\nsubquestion: |\n  You can [take one last\
    \ look at it]\n  before submitting.\n\n  [take one last look at it]: ${ court_document.pdf.url_for()\
    \ }\nfield: really_wants_to_file\nbuttons:\n  - \"Submit the document now\": True\n\
    \  - \"Get me out of here!\": False\n---\ntemplate: filing_template\nsubject:\
    \ |\n  E-filing: Praecipe to Declare\n  Favorite Fruit on behalf of\n  ${ user\
    \ }\ncontent: |\n  To the Prothonotary:\n\n  Please accept the attached\n  Praecipe\
    \ to Declare Favorite Fruit,\n  which I am filing on behalf of\n  ${ user }.\n\
    \n  Thank you,\n\n  A local docassemble server\n\n  Cc: ${ user } via e-mail at\
    \ ${ user.email }\n---\ncode: |\n  if wants_to_file and really_wants_to_file:\n\
    \    document_filed = send_email(to=court_filing_unit,\n                     \
    \           cc=user,\n                                template=filing_template,\n\
    \                                attachments=court_document,\n               \
    \                 task='filed_in_court')\n    if document_filed:\n      prevent_going_back()\n\
    \    else:\n      log('There was a problem with the e-mail system.  Your document\
    \ was not filed.', 'danger')\n  else:\n    document_filed = False\n---\nif: wants_to_file\
    \ and really_wants_to_file and document_filed\nquestion: |\n  Congratulations!\n\
    subquestion: |\n  Your document is now on its way to the\n  court.\ncontinue button\
    \ field: end_of_filing_process"
"custody":
  "yaml": |-
    objects:
      - has_standing: DADict.using(auto_gather=False)
"customdate":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    features:
      javascript: datereplace.js
    ---
    question: |
      When were you born?
    fields:
      - Date of birth: date_of_birth
        datatype: date
"daglobal":
  "height": !!int |-
    294
  "width": !!int |-
    488
  "yaml": "objects:\n  - g: DAGlobal.using(base=the_base, key=the_key)\n  - g.fruits:\
    \ DAList.using(object_type=Thing)\n---\nquestion: |\n  In what scope should the\
    \ object `g` be global?\nfield: the_base\nchoices:\n  - User: user\n  - Interview:\
    \ interview\n  - Global: global\n---\nquestion: |\n  Under what key in the `${\
    \ the_base }` scope should the object `g` be\n  saved?\nsubquestion: |\n  Note:\
    \ you can see what keys already exist by calling\n  `DAGlobal.keys(${ repr(the_base)\
    \ })`.\n\n  You can test to see if a key is defined by calling\n  `DAGlobal.defined(${\
    \ repr(the_base) }, some_key)`. It will return\n  `True` if the key is defined\
    \ and `False` otherwise.\n\n  The result of `DAGlobal.keys(${ repr(the_base) })`\
    \ is:\n  `${ repr(DAGlobal.keys(the_base)) }`.\nfields:\n  - Key: the_key\n  \
    \  maxlength: 50\n---\nquestion: |\n  Now we will gather a list of fruit into\
    \ `g.fruits`.\ncontinue button field: g.fruits.there_are_any\n---\nquestion: |\n\
    \  What is the name of the ${ ordinal(i) } fruit?\nfields:\n  - Fruit: g.fruits[i].name.text\n\
    ---\nquestion: |\n  Besides ${ g.fruits }, are there any more fruits in the list?\n\
    yesno: g.fruits.there_is_another\n---\nmandatory: True\nquestion: |\n  The list\
    \ of fruits from `g.fruits`\nsubquestion: |\n  `g` is an object of class `DAGlobal`\
    \ with `g.base` set to\n  `${ repr(g.base) }` and `g.key` set to `${ repr(g.key)\
    \ }`.\n  \n  This list of fruits, known as `g.fruits` in the interview answers,\n\
    \  is stored as the `fruits` attribute of an object in global object\n  storage\
    \ on the SQL server, separate from the interview answers.\n\n  The fruits are:\n\
    \n  % for fruit in g.fruits:\n  * ${ fruit }\n  % endfor\n  \n  Because you set\
    \ `g.base` to `${ repr(g.base) }`,\n  % if g.base == 'user':\n  `g.fruits` will\
    \ be the same for the current user, regardless of the\n  interview and regardless\
    \ of the session, any time `g.key` is set to\n  `${ repr(g.key) }`. The data will\
    \ only be deleted if someone runs\n  `g.delete()` or the user deletes their account.\n\
    \  % elif g.base == 'interview':\n  `g.fruits` will be the same in this interview,\n\
    \  `${ user_info().filename }`, regardless of the user and regardless\n  of the\
    \ session, any time `g.key` is set to `${ repr(g.key) }`.\n  The data will not\
    \ be deleted unless someone runs `g.delete()`.\n  % else:\n  `g.fruits` will be\
    \ the same on this server, regardless of the user,\n  session, or interview, any\
    \ time `g.key` is set to\n  `${ repr(g.key) }`.  The data will not be deleted\
    \ unless someone\n  runs `g.delete()`.\n  % endif\n\n  The attributes of `g` do\
    \ not live in the interview answers; they\n  live in a separate, global area.\
    \ Every time the interview answers\n  load, the attributes of `g` are fetched\
    \ from the separate area of\n  the database, and every time the interview answers\
    \ are saved, the\n  attributes of `g` are saved to that separate area of the database.\n\
    \n  Unlike the interview answers, this separate area of the database\n  does not\
    \ use versioning. Thus, your use of `DAGlobal` objects may\n  interfere with the\
    \ way that the \"Back\" button works. You may wish to\n  use `prevent going back:\
    \ True` strategically throughout your\n  interview so that the user is not confused.\n\
    buttons:\n  - Restart: restart"
"daobject-language-functions":
  "height": !!int |-
    2481
  "width": !!int |-
    488
  "yaml": "mandatory: True\nobjects:\n  - user: Individual\n  - person: Individual\n\
    \  - thing: Thing\n---\nmandatory: True\ncode: |\n  user.name.first = 'John'\n\
    \  user.name.last = 'Smith'\n  user.gender = 'male'\n  person.name.first = 'Thomas'\n\
    \  person.name.last = 'Montague'\n  person.gender = 'male'\n  thing.name.text\
    \ = 'apple'\n---\ninitial: True\ncode: |\n  set_info(user=user)\n---\nmandatory:\
    \ True\nquestion: |\n  Language functions\nsubquestion: |\n  #### `possessive()`\n\
    \n  Don't eat the\n  ${ thing.possessive('core') }.\n\n  ${ person.possessive('r\xE9\
    sum\xE9') }\n  is unimpressive.\n\n  #### `object_possessive()`\n\n  Do you understand\n\
    \  ${ thing.object_possessive('intrinsic nature') }?\n\n  Have you met\n  ${ person.object_possessive('dog')\
    \ } yet?\n\n  #### `pronoun()`\n\n  Look at the ${ thing }, but do\n  not stare\
    \ at ${ thing.pronoun() }.\n\n  Look at ${ person }, but do\n  not stare at ${\
    \ person.pronoun() }.\n\n  #### `pronoun_objective()`\n\n  Eat the ${ thing },\
    \ but not too\n  much of ${ thing.pronoun_objective() }.\n\n  May an abundance\
    \ of ${ thing } be\n  granted unto ${ user.pronoun_objective() }.\n\n  Teach ${\
    \ person } well, but do not\n  bore ${ person.pronoun_objective() }.\n\n  ####\
    \ `pronoun_subjective()`\n\n  If you polish the ${ thing },\n  ${ thing.pronoun_subjective()\
    \ }\n  will be shiny.\n\n  ${ user.pronoun_subjective(capitalize=True) }\n  may\
    \ win unlimited ${ thing } pie for life\n  if you accept this limited time offer.\n\
    \n  If you are nice to ${ person },\n  ${ person.pronoun_subjective() } will\n\
    \  probably not be nice to you in return.\n\n  #### `pronoun_possessive()`\n\n\
    \  You can squeeze the ${ thing }, but\n  ${ thing.pronoun_possessive('juice')\
    \ }\n  will get all over your hands.\n\n  You have many fireplaces, but all\n\
    \  ${ user.pronoun_possessive('chimneys') }\n  are filled up with insulation.\n\
    \n  ${ person } drives, but\n  ${ person.pronoun_possessive('car') }\n  is a piece\
    \ of junk.\n\n  #### `is_are_you()`\n\n  ${ thing.is_are_you(capitalize=True)\
    \ }\n  sweet?\n\n  ${ user.is_are_you(capitalize=True) }\n  sweet?\n\n  #### `yourself_or_name()`\n\
    \n  Give the ${ thing } to\n  ${ user.yourself_or_name() }.\n\n  Give the ${ thing\
    \ } to\n  ${ person.yourself_or_name() }.\n\n  #### `itself()`\n\n  The ${ thing\
    \ } can speak for\n  ${ thing.itself() }.\n\n  You can speak for\n  ${ user.itself()\
    \ }.\n\n  ${ person } can speak for\n  ${ person.itself() }.\n\n  #### `is_user()`\n\
    \n  % for item in (thing, user, person):\n    % if item.is_user():\n  ${ item\
    \ } is the user.\n    % endif\n  % endfor\n\n  #### `do_question()`\n\n  ${ thing.do_question('exist',\
    \ capitalize=True) }?\n\n  ${ user.do_question('exist', capitalize=True) }?\n\n\
    \  ${ person.do_question('exist', capitalize=True) }?\n\n  #### `did_question()`\n\
    \n  ${ user.did_question('invest', capitalize=True) }\n  in real estate?\n\n \
    \ ${ person.did_question('invest', capitalize=True) }\n  in real estate?\n\n \
    \ #### `were_question()`\n\n  ${ user.were_question('present', capitalize=True)\
    \ }\n  at the scene of the crime?\n\n  ${ person.were_question('present', capitalize=True)\
    \ }\n  at the scene of the crime?\n\n  #### `have_question()`\n\n  ${ user.have_question('followed',\
    \ capitalize=True) }\n  the news about the ${ thing } festival?\n\n  ${ person.have_question('followed',\
    \ capitalize=True) }\n  the news about the ${ thing } festival?\n\n  #### `does_verb()`\n\
    \n  ${ user.pronoun_subjective(capitalize=True) }\n  ${ user.does_verb('eat')\
    \ }\n  like a pig.\n\n  ${ person.pronoun_subjective(capitalize=True) }\n  ${\
    \ person.does_verb('eat') }\n  like a pig.\n\n  #### `did_verb()`\n\n  ${ user.pronoun_subjective(capitalize=True)\
    \ }\n  ${ user.did_verb('go') }\n  to the park.\n\n  ${ person.pronoun_subjective(capitalize=True)\
    \ }\n  ${ person.did_verb('go') }\n  to the park.\n\n  #### `subjective_pronoun_or_name()`\n\
    \n  ${ user.subjective_pronoun_or_name(capitalize=True) }\n  will not disappoint\
    \ me again.\n\n  ${ person.subjective_pronoun_or_name(capitalize=True) }\n  will\
    \ not disappoint me again.\n\n  #### `pronoun_or_name()`\n\n  I gave the ${ thing\
    \ } to ${ user.pronoun_or_name() }.\n\n  I gave the ${ thing } to ${ person.pronoun_or_name()\
    \ }."
"data-objects":
  "height": !!int |-
    178
  "width": !!int |-
    488
  "yaml": |-
    variable name: people
    use objects: objects
    data:
      object: Individual
      module: docassemble.base.util
      items:
        - name:
            object: IndividualName
            item:
              first: Fred
              last: Smith
          email: fred@example.com
          allergies:
            - peanuts
            - subway tokens
          skills:
            - guessing pennies
        - name:
            object: IndividualName
            item:
              first: Larry
              last: Jones
          email: larry@example.com
          allergies: []
          skills:
            - stapling
            - making ${ 'coffee' }
    ---
    mandatory: True
    question: |
      Summary
    subquestion: |
      % for item in people:
      ${ item } is at ${ item.email } and is good at ${ item.skills }
      but has trouble with ${ item.allergies }.
      % endfor
"data-objects-gathered":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    variable name: people
    use objects: objects
    gathered: False
    data:
      object: Individual
      module: docassemble.base.util
      items:
        - name:
            object: IndividualName
            item:
              first: Fred
              last: Smith
          email: fred@example.com
          allergies:
            - peanuts
            - subway tokens
          skills:
            - guessing pennies
        - name:
            object: IndividualName
            item:
              first: Larry
              last: Jones
          email: larry@example.com
          allergies: []
          skills:
            - stapling
            - making ${ 'coffee' }
"demo-multi-sign":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    include:
      - docassemble.demo:data/questions/sign.yml
    ---
    objects:
      - user: Person
      - witnesses: DAList.using(object_type=Person, there_are_any=True)
      - sign: SigningProcess.using(documents='statement')
    ---
    mandatory: True
    code: |
      user.name.text
      user.favorite_fruit
      witnesses.gather()
      sign.out_for_signature()
      final_screen
    ---
    attachment:
      name: |
        ${ user.possessive('Declaration of Favorite Fruit') }
      filename: |
        fruit_declaration_${ space_to_underscore(user) }
      docx template file: declaration_of_favorite_fruit.docx
      variable name: statement
    ---
    reload: 60
    event: final_screen
    question: |
      % if sign.all_signatures_in():
      Your document is ready.
      % else:
      Your document is out for signature.
      % endif
    subquestion: |
      % if not sign.all_signatures_in():
      You will receive an e-mail
      when your document has been
      signed by all parties.
      % endif
    attachment code: |
      sign.list_of_documents(refresh=True)
"demo-multi-sign-2":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Person
      - witnesses: DAList.using(object_type=Person, there_are_any=True)
      - sign: SigningProcess.using(documents=['statement', 'certificate_of_service'])
"demo-with-basic-questions":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    include:
      - docassemble.demo:data/questions/demo-basic-questions.yml
    comment: |
      The "basic questions" loaded by this include
      block allow interview to gather information
      about names, e-mail addresses, and addresses
      in a variety of ways without specifying any
      question blocks.  The "basic questions" are
      configurable using object attributes.
    ---
    objects:
      - client: Individual
      - advocate: Individual
      - antagonist: Individual
    ---
    initial: True
    code: |
      set_info(user=client)
    comment: |
      Since this isn't a multi-user interview,
      setting up the user is just a single call to
      set_info().  The generic "basic questions"
      use the first person when the generic object
      instance is the user.
    ---
    code: |
      client.ask_email_with_name = True
    comment: |
      By default, the question that asks for an
      individual's name does not also ask for the
      individual's e-mail address, but if you set
      the ask_email_with_name attribute to True, an
      additional field will be included.
    ---
    code: |
      client.ask_about_homelessness = True
    comment: |
      There are multiple variations of the question
      that asks for an individual's address.  One
      variation allows the user to check a box
      stating that the individual is homeless, and
      if so, only the city and state are gathered.
      We want to ask the question this way when we
      ask for the client's address.
    ---
    code: |
      client.email_required = False
    comment: |
      When we ask for the client's e-mail address,
      we want to let the user leave the field
      blank.
    ---
    code: |
      advocate.ask_email_with_name = True
    comment: |
      When we ask for the advocate's name, we also
      want to ask for the advocate's e-mail
      address.
    ---
    code: |
      antagonist.name.default_first = "Brutus"
      antagonist.name.default_last = "Morpheus"
    comment: |
      By default, when the name of a user is asked,
      the field is blank if the name has not been
      defined yet.  The "basic questions" allow us
      to specify a default value.
    ---
    comment: |
      It is not strictly necessary in this
      interview to specify the above rules as
      separate code blocks, but it is good practice
      to do so because in interviews where such
      values may be pre-set or change as a result
      of user input, cramming the rules into a
      single rule may cause unintended side
      effects, such as overwriting the value of
      client.email_required just because the
      definition of advocate.ask_email_with_name
      was needed.
    ---
    mandatory: True
    code: |
      client.name.uses_parts = False
    comment: |
      We want to ask for the client's name in a
      single field.  This is useful because the
      client might have a name that does not fit
      the standard "first name, last name"
      structure.

      This block is mandatory because
      .name.uses_parts is defined automatically by
      the class definition; thus to override it we
      need to force this code to run.  The other
      settings in the previous block are undefined
      by default and their definitions will be
      sought out, so we can use non-mandatory
      blocks to provide their definitions.
    ---
    template: client.description
    content: petitioner
    comment: |
      This is a very small template, but it is
      useful to use a template because template
      content can be translated using the
      spreadsheet translation feature.
    ---
    template: advocate.description
    content: the lawyer
    ---
    template: advocate.ask_address_template
    subject: |
      How can we send mail to the lawyer's office?
    content: |
      Make sure you get this right.
    comment: |
      We want to ask the address question a little
      differently when when the object is the
      advocate.  The subject of the template
      corresponds to the "question" and the content
      corresponds to the "subquestion."
    ---
    mandatory: True
    question: |
      Summary
    subquestion: |
      % for person in (client, advocate, antagonist):
      ${ person.description } is:

      ${ person.name.full() } [BR]
      % if person.ask_about_homelessness and person.address.homeless:
      ${ person.address.city }, ${ person.address.state }
      % else:
      ${ person.address.block() }
      % endif
      % if person.email:
      [BR] ${ person.email }
      % endif

      % endfor
"dependency-demo":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Your favorite fruit is ${ favorite_fruit }.
    subquestion: |
      % if favorite_fruit == 'grapes':
      Your favorite vineyard is ${ favorite_vineyard }.
      % endif
    ---
    question: |
      Which vineyard do you think produces the best grapes?
    fields:
      - Vineyard: favorite_vineyard
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
"dependency-demo-code":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      if favorite_fruit == 'grapes':
        favorite_vineyard
      favorite_vegetable
      final_screen
    ---
    event: final_screen
    question: |
      Your favorite fruit is ${ favorite_fruit }.
    subquestion: |
      Your favorite vegetable is ${ favorite_vegetable }.

      % if favorite_fruit == 'grapes':
      Your favorite vineyard is ${ favorite_vineyard }.
      % endif
    ---
    question: |
      Which vineyard do you think produces the best grapes?
    fields:
      - Vineyard: favorite_vineyard
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    question: |
      What is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
"discovery":
  "yaml": |-
    template: discovery['rent records']
    content: |
      All records of any type whatsoever relating to the unit rented by ${
      client }.
"docxproperties":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    attachment:
      variable name: assembled_file
      docx template file: docx-with-metadata.docx
      valid formats:
        - docx
    ---
    mandatory: True
    code: |
      assembled_file
      user_name
      from docx import Document
      docx = Document(assembled_file.path())
      docx.core_properties.author = user_name
      docx.save(assembled_file.path())
      del docx
    ---
    mandatory: True
    question: Your document
    attachment code: assembled_file
    ---
    question: |
      What planet are you from?
    fields:
      - Planet: planet
    ---
    question: |
      What is your name?
    fields:
      - Name: user_name
"duplicate":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": "objects:\n  - user: Individual\n---\nquestion: |\n  What is your favorite\
    \ fruit?\nfields:\n  - Fruit: user.favorite_fruit\n---\nattachment: \n  variable\
    \ name: receipt\n  name: Favorite fruit receipt\n  filename: fruit\n  content:\
    \ |\n    Let it be known that your favorite fruit is\n    ${ user.favorite_fruit\
    \ }.\n---\nevent: duplicate_session\ncode: |\n  session_id = create_session(current_context().filename)\n\
    \  set_session_variables(current_context().filename, session_id,\n           \
    \             all_variables(simplify=False), \n                        overwrite=True)\n\
    \  set_session_variables(current_context().filename, session_id,\n           \
    \             {\"_internal['answered']\": _internal['answered'], \n          \
    \               \"_internal['answers']\": _internal['answers'],\n            \
    \             \"_internal['device_local']\": _internal['device_local'],\n    \
    \                     \"_internal['user_local']\": _internal['user_local']},\n\
    \                         overwrite=True)\n  set_save_status('overwrite')\n  log('A\
    \ <a href=\"' + interview_url(session=session_id, from_list=1) + '\">duplicate\
    \ session</a> has been created.', 'info')\n---\nmandatory: True\nquestion: |\n\
    \  Your favorite fruit is ${ user.favorite_fruit }.\nsubquestion: |\n  You can\
    \ [duplicate this session](${ url_action('duplicate_session') }).\nattachment\
    \ code: receipt"
"explain":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .somefuncs
    ---
    mandatory: True
    code: |
      clear_explanations()
      if favorite_fruit in ('apple', 'orange'):
        explain("You said your favorite fruit was " + favorite_fruit + ".")
        if wrong_vegetable(favorite_vegetable):
          explain("Because your favorite vegetable is disgusting, you are not eligible for the space program.")
          eligible = False
        else:
          explain("Since you like apple or orange, and turnips are not your favorite, you are mentally fit to go to the moon.")
          eligible = True
      else:
        explain("Since you do not like apple or orange, you are not eligible for the space program.")
        eligible = False
      final_screen
    ---
    event: final_screen
    question: |
      % if eligible:
      You will be joining the Apollo mission.
      % else:
      You are not allowed to enter the space program.
      % endif
    subquestion: |
      Reasoning:

      % for reason in logic_explanation():
      * ${ reason }
      % endfor
"fish-example":
  "height": !!int |-
    146
  "width": !!int |-
    488
  "yaml": "code: |\n  fishes = objects_from_file(\"fishes.yml\")\n---\nmandatory:\
    \ true\nquestion: |\n  Fish summary\nsubquestion: |\n  % for fish in fishes:\n\
    \  ${ fish } has\n  ${ fish.scales } scales.\n  \n  % endfor"
"fish-example-2":
  "height": !!int |-
    202
  "width": !!int |-
    488
  "yaml": "objects from file:\n  - fishes: fishes.yml\n---\nmandatory: True\nquestion:\
    \ |\n  Fish summary\nsubquestion: |\n  % for fish in fishes:\n  ${ fish } has\n\
    \  ${ fish.scales } scales.\n  \n  % endfor\ncontinue button field: first_screen"
"flags":
  "yaml": |-
    image sets:
      freepik:
        attribution: |
          Icons made by <a href="https://www.freepik.com/?__hstc=57440181.1fcb7629de44ad5220609e6254ecdbbf.1559232254037.1559232254037.1559232917862.2&__hssc=57440181.3.1559232917862&__hsfp=2541736765" title="Freepik">Freepik</a> from <a href="https://www.flaticon.com/"                title="Flaticon">www.flaticon.com</a> is licensed by <a href="http://creativecommons.org/licenses/by/3.0/"              title="Creative Commons BY 3.0" target="_blank">CC 3.0 BY</a></div>
        images:
          flag-en: united-kingdom.svg
          flag-es: mexico.svg
          flag-de: germany.svg
    ---
    question: Pick a language
    field: user_language
    buttons:
      - English: en
        image: flag-en
      - Spanish: es
        image: flag-es
      - German: de
        image: flag-de
"food-with-sig":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": "include:\n  - docassemble.demo:data/questions/examples/signature-diversion.yml\n\
    ---\nmandatory: True\nquestion: |\n  Here is your document.\nattachment:\n  name:\
    \ Summary of food\n  filename: food\n  content: |\n    [BOLDCENTER] Food Attestation\n\
    \n    My name is ${ user }.\n    \n    My favorite fruit is\n    ${ favorite_fruit\
    \ }.\n\n    My favorite vegetable is\n    ${ favorite_vegetable }.\n\n    I solemnly\
    \ swear that the\n    foregoing is true and\n    correct.\n\n    ${ user.signature.show(width=\"\
    2in\") }\n\n    ${ user }"
"free-nav":
  "height": !!int |-
    608
  "width": !!int |-
    488
  "yaml": |-
    features:
      navigation: True
      navigation back button: False
    ---
    objects:
      - user: Individual
    ---
    # likes_mushrooms is False at first
    # so that the mushrooms section is
    # hidden by default.
    mandatory: True
    code: |
      likes_mushrooms = False
      nav.progressive = False
    ---
    # make sure that the sections are
    # set every time the screen loads.
    initial: True
    code: |
      nav.set_sections(
        [{"identity": "About you"},
         {"fruit": "Fruit"},
         {"vegetables": "Vegetables",
          "subsections": [
              {"legumes": "Legumes"},
              {"root_veggies": "Root vegetables"}
            ]
         }] \
         + ([{'mushrooms': "Mushrooms"}] if likes_mushrooms else []) \
         + ["Conclusion"])
    ---
    mandatory: True
    code: |
      identity
      fruit
      vegetables
      legumes
      root_veggies
      if likes_mushrooms:
        favorite_mushroom
      final_screen
    ---
    event: final_screen
    section: Conclusion
    question: Conclusion
    subquestion: |
      ${ user },

      You live at ${ user.address.on_one_line() }.

      You like ${ favorite_fruit }.

      Your vegetable preferences are for a pot of
      ${ favorite_vegetable } stew with
      % if likes_mushrooms:
      ${ favorite_mushroom },
      % endif
      ${ favorite_legume } and
      ${ favorite_root_vegetable }.
    ---
    section: identity
    continue button field: identity
    question: About you
    fields:
      - First name: user.name.first
      - Last name: user.name.last
      - Likes mushrooms: likes_mushrooms
        datatype: yesnoradio
      - Address: user.address.address
        address autocomplete: True
      - Unit: user.address.unit
        required: False
      - City: user.address.city
      - State: user.address.state
        code: states_list()
      - Zip: user.address.zip
    check in: autosave
    ---
    section: fruit
    continue button field: fruit
    question: Fruit
    fields:
      - Favorite fruit: favorite_fruit
    check in: autosave
    ---
    section: vegetables
    continue button field: vegetables
    question: Vegetables
    fields:
      - Favorite vegetable: favorite_vegetable
    check in: autosave
    ---
    section: legumes
    continue button field: legumes
    question: Legumes
    fields:
      - Favorite legume: favorite_legume
    check in: autosave
    ---
    section: root_veggies
    continue button field: root_veggies
    question: Root vegetables
    fields:
      - Favorite root vegetable: favorite_root_vegetable
    check in: autosave
    ---
    section: mushrooms
    continue button field: mushrooms
    question: Mushrooms
    fields:
      - Favorite mushroom: favorite_mushroom
    check in: autosave
    ---
    event: autosave
    code: |
      set_save_status('overwrite')
      for variable_name, variable_value in action_arguments().items():
        if variable_value:
          if variable_name == 'likes_mushrooms':
            if variable_value == 'True':
              define(variable_name, True)
            else:
              define(variable_name, False)
          else:
            define(variable_name, variable_value)
"fruits-database":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .fruit_database
    ---
    question: |
      Pick a fruit.
    fields:
      - Fruit: favorite_fruit
        code: get_fruit_names()
    ---
    mandatory: True
    question: |
      Your favorite fruit,
      ${ favorite_fruit },
      is
      ${ fruit_info(favorite_fruit)['color'] }
      and has
      ${ fruit_info(favorite_fruit)['seeds'] }
      seeds.
"generic-document":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - plaintiff: Individual
      - defendant: Individual
    ---
    code: |
      plaintiff.opponent = defendant
      defendant.opponent = plaintiff
    ---
    code: |
      title = "Summary of case"
    ---
    question: |
      What is the name of the plaintiff?
    fields:
      - Name: plaintiff.name.first
    ---
    question: |
      What is the name of the defendant?
    fields:
      - Name: defendant.name.first
    ---
    generic object: Individual
    attachment:
      variable name: x.document
      name: Document for ${ x.name.first }
      docx template file: generic-document.docx
    ---
    mandatory: True
    question: |
      Here are your documents.
    attachment code: |
      [plaintiff.document, defendant.document]
"get-time":
  "height": !!int |-
    126
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.demo.gettime
    ---
    mandatory: True
    question: |
      The time
    subquestion: |
      According to the World Clock API, the
      current time in the Eastern time zone is
      ${ get_time() }.
"globalprofile":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - profile: DAGlobal.using(key='profile')
      - profile.user: Individual
      - profile.preferences: DADict
    ---
    mandatory: True
    code: |
      multi_user = True
      profile
      screen = {item: True for item in ['name', 'address', 'preferences']}
    ---
    mandatory: True
    question: |
      This is interview A.
    subquestion: |
      Go to your [Profile](${ url_action('profile_page') }).
    buttons:
      - Restart: restart
    ---
    event: profile_page
    question: |
      Your profile
    review:
      - label: Edit
        field: screen['name']
        button: |
          #### Name
          % if defined('profile.user.name.first'):
          ${ profile.user }
          % else:
          <span class="text-body-secondary">Your name has not been defined.</span>
          % endif
      - label: Edit
        field: screen['address']
        button: |
          #### Address

          % if defined('profile.user.address.address'):
          ${ profile.user.address.block() }
          % else:
          <span class="text-body-secondary">You have not yet provided your address.</span>
          % endif
      - label: Edit
        fields: screen['preferences']
        button: |
          #### Preferences

          % if defined('profile.preferences.favorite_fruit'):
          Favorite fruit: ${ profile.preferences.favorite_fruit }.

          Favorite vegetable: ${ profile.preferences.favorite_vegetable }.

          Screen mode: ${ profile.preferences.screen_mode }.
          % else:
          <span class="text-body-secondary">Your preferences have not been set yet.</span>
          % endif
    skip undefined: False
    ---
    question: |
      Your name
    fields:
      - First name: profile.user.name.first
      - Middle name: profile.user.name.middle
        required: False
      - Last name: profile.user.name.last
    continue button field: screen['name']
    ---
    question: |
      Your address
    fields:
      - Address: profile.user.address.address
        address autocomplete: True
      - Unit: profile.user.address.unit
        required: False
      - City: profile.user.address.city
      - State: profile.user.address.state
        code: |
          states_list()
      - Zip: profile.user.address.zip
    continue button field: screen['address']
    ---
    question: |
      Preferences
    fields:
      - Favorite fruit: profile.preferences.favorite_fruit
      - Favorite vegetable: profile.preferences.favorite_vegetable
      - Screen mode: profile.preferences.screen_mode
        choices:
          - Dark
          - Light
    continue button field: screen['preferences']
"globalprofile2":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - profile: DAGlobal.using(key='profile')
      - profile.user: Individual
      - profile.preferences: DADict
    ---
    mandatory: True
    code: |
      multi_user = True
      profile
      screen = {item: True for item in ['name', 'address', 'preferences']}
    ---
    mandatory: True
    question: |
      This is interview B.
    subquestion: |
      Go to your [Profile](${ url_action('profile_page') }).
    buttons:
      - Restart: restart
"globalprofile3":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - profile: DAGlobal.using(key='profile')
      - profile.user: Individual
      - profile.preferences: DADict
    ---
    mandatory: True
    code: |
      multi_user = True
    ---
    mandatory: True
    question: |
      This is interview A.
    subquestion: |
      Go to your [Profile](${ url_action('profile_page') }).
    buttons:
      - Restart: restart
    ---
    event: profile_page
    question: |
      Your profile
    review:
      - label: Edit
        field: profile.user.name.first
        button: |
          #### Name

          ${ profile.user }
      - label: Edit
        field: profile.user.address.address
        button: |
          #### Address

          ${ profile.user.address.block() }
      - label: Edit
        fields: profile.preferences.favorite_fruit
        button: |
          #### Preferences

          Favorite fruit: ${ profile.preferences.favorite_fruit }.

          Favorite vegetable: ${ profile.preferences.favorite_vegetable }.

          Screen mode: ${ profile.preferences.screen_mode }.
    skip undefined: False
    ---
    question: |
      Your name
    fields:
      - First name: profile.user.name.first
      - Middle name: profile.user.name.middle
        required: False
      - Last name: profile.user.name.last
    ---
    question: |
      Your address
    fields:
      - Address: profile.user.address.address
        address autocomplete: True
      - Unit: profile.user.address.unit
        required: False
      - City: profile.user.address.city
      - State: profile.user.address.state
        code: |
          states_list()
      - Zip: profile.user.address.zip
    ---
    question: |
      Preferences
    fields:
      - Favorite fruit: profile.preferences.favorite_fruit
      - Favorite vegetable: profile.preferences.favorite_vegetable
      - Screen mode: profile.preferences.screen_mode
        choices:
          - Dark
          - Light
"google-drive":
  "yaml": |-
    modules:
      - .google_drive
"google-sheet":
  "height": !!int |-
    240
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .google_sheets
    ---
    mandatory: True
    code: |
      data_stored_in_google_sheet
      final_screen_shown
    ---
    code: |
      append_to_sheet('Fruits and veggies', [user_name, favorite_fruit, favorite_vegetable])
      data_stored_in_google_sheet = True
    ---
    event: final_screen_shown
    question: |
      Thank you for your input!
    subquestion: |
      % if favorite_vegetable in ('turnips', 'brussel sprouts'):
      Although I disagree with your
      vegetable preferences!
      % endif
    ---
    question: |
      What is your first name?
    subquestion: |
      Note: This interview will store
      your answers in a public Google
      Sheet.
    fields:
      - Name: user_name
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    question: |
      What is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
"google-sheet-2":
  "yaml": |-
    modules:
      - .google_sheets
    ---
    objects:
      - court: Person
    ---
    mandatory: True
    code: |
      court_populated
      final_screen
    ---
    code: |
      need(county)
      # https://docs.google.com/spreadsheets/d/1SyLpF7ioE-PCLz3Pbll0AF0MVWR8ZZ_tyOvG7CczsAI/edit?usp=sharing
      for row in read_sheet('court_list'):
        if row['County'] == county:
          court.name.text = row['Name']
          court.address.address = row['Address']
          court.address.city = row['City']
          court.address.state = row['State']
          court.address.zip = row['Zip']
          court.address.county = row['County']
      court_populated = True
    ---
    question: |
      What is your county?
    field: county
    dropdown:
      - Adams County
      - Allen County
      - Beaver County
    ---
    event: final_screen
    question: |
      Your local court
    subquestion: |
      You need to go to the ${ court },
      which is located at:

      ${ court.address.block() }
"google-sheet-3":
  "height": !!int |-
    1182
  "width": !!int |-
    488
  "yaml": "modules:\n  - docassemble.demo.google_sheets\n---\nobjects:\n  - court:\
    \ DAList.using(object_type=Person, auto_gather=False)\n---\ncode: |\n  court.clear()\n\
    \  for row in read_sheet('court_list'):\n    item = court.appendObject()\n   \
    \ item.name.text = row['Name']\n    item.address.address = row['Address']\n  \
    \  item.address.city = row['City']\n    item.address.state = row['State']\n  \
    \  item.address.zip = row['Zip']\n    item.address.county = row['County']\n  \
    \  del item\n  court.gathered = True\n---\nattachment:\n  name: |\n    ${ court[i].address.county\
    \ } court\n  filename: |\n    ${ space_to_underscore(court[i].address.county)\
    \ }_court_info\n  variable name: court[i].info_sheet\n  content: |\n    [BOLDCENTER]\
    \ ${ court[i] }\n    \n    [NOINDENT] Your friendly court for\n    ${ court[i].address.county\
    \ }\n    is located at:\n\n    ${ court[i].address_block() }\n---\nmandatory:\
    \ True\nquestion: |\n  Court information\nsubquestion: |\n  Here are information\
    \ sheets\n  for each court in your state.\nattachment code: |\n  [item.info_sheet\
    \ for item in court]"
"graph":
  "height": !!int |-
    286
  "width": !!int |-
    488
  "yaml": "modules:\n  - .graph\n---\nobjects:\n  - graph: DAFile\n  - pets: DADict.using(there_are_any=True)\n\
    ---\nquestion: |\n  Tell me about an animal in your house.\nfields:\n  - Species\
    \ of animal: pets.new_item_name\n  - Number of pets of this type: pets.new_item_value\n\
    \    datatype: integer\n    min: 1\n---\nquestion: |\n  Do you have any more animals\
    \ in your house?\nyesno: pets.there_is_another\n---\ncode: |\n  make_pie(pets,\
    \ graph)  \n  graph.loaded = True\n---\nneed: graph.loaded\nmandatory: True\n\
    question: |\n  Here is your document with a graph.\nattachment:\n  docx template\
    \ file: graph.docx"
"harry-potter-or-heidegger":
  "yaml": |-
    mandatory: True
    code: |
      the_file.set_attributes(persistent=True)
    ---
    mandatory: True
    code: |
      the_task
      if not the_task.ready():
        waiting_screen
      ml = SimpleTextMachineLearner('hp_h')
      ml.save_for_classification(phrase, info=the_file)
      predictions = ml.predict(phrase, probabilities=True)
    ---
    question: |
      Upload a page
    subquestion: |
      Please upload or take a
      picture of a page from Harry Potter
      or Heidegger.
    fields:
      - no label: the_file
        datatype: file
    ---
    code: |
      the_task = background_action('ocr_start', None)
    ---
    event: ocr_start
    code: |
      background_response_action('ocr_finish', text=ocr_file(the_file))
    ---
    event: ocr_finish
    code: |
      phrase = action_argument('text')
      background_response()
    ---
    event: waiting_screen
    reload: 5
    question: |
      Please wait.
    ---
    mandatory: True
    question: |
      Your text
    subquestion: |
      % if len(predictions):
      Your document appears to be
      from ${ predictions[0][0] }
      (${ "%.0f%%" % (predictions[0][1] * 100.0) } sure).
      % else:
      There is not enough training data
      to make a determination yet.
      % endif
    buttons:
      - Restart: restart
"hook-on-gather":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    modules:
      .income
    ---
    objects:
      - income: |
          IncomeDict.using(
            object_type=DAObject,
            keys=['employment', 'benefits', 'interest'],
            complete_attribute='complete',
            there_is_another=False)
"indexdemo":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.demo.index
    ---
    mandatory: True
    objects:
      - index: MyIndex
    ---
    on change:
      user.name.first: |
        index.update({'first_name': user.name.first})
      user.name.last: |
        index.update({'last_name': user.name.last})
    ---
    objects:
      - user: Individual
    ---
    mandatory: True
    code: |
      favorite_fruit
      favorite_vegetable
      finish_time_stored
      final_screen
    ---
    question: |
      What is your name?
    fields:
      - First: user.name.first
      - Last: user.name.last
    ---
    question: |
      What is your favorite fruit, ${ user }?
    fields:
      - Fruit: favorite_fruit
    ---
    question: |
      What is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
    ---
    code: |
      index.update({'finish_time': current_datetime()})
      finish_time_stored = True
    ---
    event: final_screen
    question: |
      Thank you for that information.
"indexdemoquery":
  "height": !!int |-
    134
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.demo.index
    ---
    objects:
      - index: MyIndex
    ---
    mandatory: True
    question: |
      People who have used the interview in the last month
    subquestion: |
      % for data in index.report(filter_by="(data->>'start_time')::date > 'today'::date - '1 month'::interval", order_by="(data->>'start_time')::timestamp"):
      * ${ data['first_name'] } ${ data['last_name'] }
        % if 'finish_time' not in data:
      (unfinished)
        % endif
      % endfor
"inside-of-class":
  "height": !!int |-
    338
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .contexttest
    ---
    objects:
      - user: AltIndividual
    ---
    question: |
      What is your name?
    fields:
      - First: user.name.first
      - Middle: user.name.middle
        required: False
      - Last: user.name.last
      - Suffix: user.name.suffix
        required: False
        code: name_suffix()
    ---
    mandatory: True
    question: |
      Thanks, ${ user }!
    subquestion: |
      Here is your document.
    attachment:
      name: Affidavit
      filename: affidavit
      content: |
        [CENTER] Affidavit of ${ user }

        ${ user } attests, under the pains
        and penalties of perjury, that the
        sky is blue.
"interrelated":
  "height": !!int |-
    214
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - s: Situation
"interview_in_interview":
  "height": !!int |-
    292
  "width": !!int |-
    488
  "yaml": "objects:\n  - user_global: Individual\n  - user: Individual\n  - endpoint:\
    \ DADict\n---\nmandatory: True\ncode: |\n  while True:\n    del endpoint[user.goal]\n\
    \    del user\n---\nquestion: |\n  What interview would you like to complete?\n\
    field: user.goal\nchoices:\n  - Fruit quiz: fruit\n  - Vegetable quiz: vegetable\n\
    \  - Legume quiz: legume\n---\ncode: |\n  user.name.first = user_global.name.first\n\
    \  user.name.last = user_global.name.last\n---\ncode: |\n  user.age_category =\
    \ user_global.age_category\n---\nquestion: |\n  What is your name?\nfields:\n\
    \  - First name: user_global.name.first\n  - Last name: user_global.name.last\n\
    ---\nquestion: |\n  How old are you, ${ user }?\nfield: user_global.age_category\n\
    choices:\n  - \"Spring chicken\"\n  - \"The music I like isn't cool anymore\"\n\
    \  - \"Wiser than most\"\n---\nquestion: |\n  Fruit quiz results\nsubquestion:\
    \ |\n  Your favorite fruit is\n  ${ user.favorite_fruit }.\nfield: endpoint['fruit']\n\
    continue button label: Try again\n---\nquestion: |\n  Vegetable quiz results\n\
    subquestion: |\n  % if user.age_category == 'Spring chicken':\n  You are still\
    \ growing, ${ user }, so you should eat lots of vegetables.\n  % endif\n  \n \
    \ Your favorite vegetable is\n  ${ user.favorite_vegetable }.\nfield: endpoint['vegetable']\n\
    continue button label: Try again\n---\nquestion: |\n  Legume quiz results\nsubquestion:\
    \ |\n  % if user.knows_legumes:\n  ${ user } definitely knows what a legume is.\n\
    \  % else:\n  You don't know what a legume is.\n  % endif\n  \n  % if user.age_category\
    \ == 'Spring chicken':\n  You are still growing, ${ user }, so you should eat\
    \ lots of legumes.\n  % endif\n  \n  Your favorite legume is\n  ${ user.favorite_legume\
    \ }.\n\nfield: endpoint['legume']\ncontinue button label: Try again\n---\nquestion:\
    \ |\n  What is your favorite fruit?\nfields:\n  Favorite fruit: user.favorite_fruit\n\
    ---\nquestion: |\n  What is your favorite vegetable?\nfields:\n  Favorite vegetable:\
    \ user.favorite_vegetable\n---\nquestion: |\n  What is your favorite legume?\n\
    fields:\n  Favorite legume: user.favorite_legume\n---\nquestion: |\n  Which of\
    \ these are legumes?\nfields:\n  - no label: user.legume_picks\n    datatype:\
    \ checkboxes\n    choices:\n      - Peas\n      - Lentils\n      - Mango\n   \
    \   - String beans\n      - Potato\n      - Peanut\n---\ncode: |\n  if user.legume_picks['Peas']\
    \ \\\n     and user.legume_picks['Lentils'] \\\n     and user.legume_picks['String\
    \ beans'] \\\n     and user.legume_picks['Peanut'] \\\n     and not user.legume_picks['Mango']\
    \ \\\n     and not user.legume_picks['Potato']:\n    user.knows_legumes = True\n\
    \  else:\n    user.knows_legumes = False"
"jinjayaml":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    # use jinja
    {% include "jinjayaml-included.yml" %}
    mandatory: True
    question: |
      Your favorite fruit is ${ favorite_fruit }.
    subquestion: |
      * `__version__`: {{ __version__ }}
      * `__architecture__`: {{ __architecture__ }}
      * `__filename__`: {{ __filename__ }}
      * `__current_package__`: {{ __current_package__ }}
      * `__interview_filename__`: {{ __interview_filename__ }}
      * `__interview_package__`: {{ __interview_package__ }}
      * `__parent_filename__`: {{ __parent_filename__ }}
      * `__parent_package__`: {{ __parent_package__ }}
      * `__debug__`: {{ __debug__ }}
      * `__hostname__`: {{ __hostname__ }}
"jinjayaml-included":
  "yaml": ""
"jsondemo":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": "objects:\n  - user: Individual\n  - user.favorite_fruit: DAList.using(object_type=Thing)\n\
    ---\nmandatory: True\ncode: |\n  user.favorite_fruit.gather()\n  final_screen\n\
    ---\nquestion: |\n  Do you have any favorite fruit?\nyesno: user.favorite_fruit.there_are_any\n\
    ---\nquestion: |\n  Tell me about your \n  ${ ordinal(i) } favorite fruit.\nfields:\n\
    \  - Name: user.favorite_fruit[i].name.text\n  - Sweetness: user.favorite_fruit[i].sweetness\n\
    \    datatype: range\n    min: 1\n    max: 10\n---\nquestion: |\n  Do you have\
    \ any other favorite fruit \n  besides ${ user.favorite_fruit }?\nyesno: user.favorite_fruit.there_is_another\n\
    ---\nevent: final_screen\nquestion: |\n  You can use this to set the value \n\
    \  of `user.favorite_fruit` using the POST\n  `/api/session` API endpoint.\nsubquestion:\
    \ |\n  #### JSON format\n  \n  `${ json.dumps(user.favorite_fruit.as_serializable())\
    \ }`\n  \n  #### Python format\n  \n  `${ repr(user.favorite_fruit.as_serializable())\
    \ }`"
"jsshowifmaybe":
  "height": !!int |-
    440
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please fill in the following information.
    fields:
      - Favorite fruit: fruit
      - Favorite vegetable: vegetable
      - "Do you like mushrooms?": likes_mushrooms
        datatype: yesnomaybe
      - Favorite mushroom: mushroom
        js show if: |
          val("likes_mushrooms") == true
      - "How could you now know?": reason_why_unsure
        input type: area
        js show if: |
          val("likes_mushrooms") == "None"
    ---
    question: |
      Thank you for that information.
    subquestion: |
      You like ${ fruit } and ${ vegetable }.

      % if likes_mushrooms is None:
      You said you don't know if you like
      mushrooms. Your ridiculous explanation
      was:

      ${ quote_paragraphs(reason_why_unsure) }
      % elif likes_mushrooms:
      Your favorite mushroom is ${ mushroom }.
      % endif
    mandatory: True
"language-functions":
  "height": !!int |-
    3058
  "width": !!int |-
    488
  "yaml": "mandatory: True\nobjects:\n  - helper: Thing.using(_point_of_view='1')\n\
    \  - user: Individual\n  - user_alias: Individual.using(_point_of_view='2')\n\
    \  - other_user: Individual\n  - company: Person\n  - other_company: Person\n\
    \  - thing: Thing\n  - single_list: DAList.using(object_type=Individual)\n  -\
    \ multiple_list: DAList.using(object_type=Individual)\n  - users: DAList.using(_point_of_view='2p')\n\
    \  - helpers: DAList.using(_point_of_view='1p')\n  - single_dict: DADict.using(object_type=Thing)\n\
    \  - multiple_dict: DADict.using(object_type=Thing)\n  - single_set: DASet\n \
    \ - multiple_set: DASet\n---\nmandatory: True\ncode: |\n  helper.name.text = \"\
    Robot\"\n  user.name.first = \"Ursula\"\n  user.name.last = \"User\"\n  user.gender\
    \ = 'female'\n  user_alias.name.first = \"Ursie\"\n  user_alias.name.last = \"\
    User\"\n  user_alias.gender = 'female'\n  other_user.name.first = \"Harold\"\n\
    \  other_user.name.last = \"User\"\n  other_user.gender = 'male'\n  users.clear()\n\
    \  users.append(user)\n  users.append(other_user)\n  users.gathered = True\n \
    \ company.name.text = \"ABC, Inc.\"\n  other_company.name.text = \"DEF, Inc.\"\
    \n  thing.name.text = \"apple tree\"\n  single_list.clear()\n  single_list.appendObject()\n\
    \  single_list[0].name.first = \"Fred\"\n  single_list[0].name.last = \"Smith\"\
    \n  single_list[0].gender = 'male'\n  single_list.gathered = True\n  multiple_list.clear()\n\
    \  multiple_list.appendObject()\n  multiple_list[-1].name.first = \"Sally\"\n\
    \  multiple_list[-1].name.last = \"Jones\"\n  multiple_list[-1].gender = 'female'\n\
    \  multiple_list.appendObject()\n  multiple_list[-1].name.first = \"Peter\"\n\
    \  multiple_list[-1].name.last = \"Roberts\"\n  multiple_list[-1].gender = 'male'\n\
    \  multiple_list.gathered = True\n  single_dict.clear()\n  single_dict.initializeObject('a')\n\
    \  single_dict['a'].name.text = 'Single thing in a dictionary'\n  single_dict.gathered\
    \ = True\n  multiple_dict.clear()\n  multiple_dict.initializeObject('a')\n  multiple_dict['a'].name.text\
    \ = 'First thing in a dictionary'\n  multiple_dict.initializeObject('b')\n  multiple_dict['b'].name.text\
    \ = 'Second thing in a dictionary'\n  multiple_dict.gathered = True\n  single_set.clear()\n\
    \  single_set.add('single set item')\n  single_set.gathered = True\n  multiple_set.clear()\n\
    \  multiple_set.add('first item in a set')\n  multiple_set.add('second item in\
    \ a set')\n  multiple_set.gathered = True\n  helpers.clear()\n  helpers.append(company)\n\
    \  helpers.append(other_company)\n  helpers.gathered = True\n---\ninitial: True\n\
    code: |\n  set_info(user=user)\n---\nmandatory: True\nquestion: Test of language\
    \ methods\nsubquestion: |\n  % for item in [helper, user, user_alias, other_user,\
    \ company, thing, single_list, multiple_list, users, helpers]:\n  Variable name\
    \ is ${ item.object_name() }.\n  ${ item.object_possessive('string representation',\
    \ capitalize=True) } is ${ item }.\n  ${ item.is_are_you(capitalize=True) } going\
    \ to the ball?\n  ${ item.pronoun_possessive('favorite fruit', capitalize=True)\
    \ } is apple.\n  The apple should be given to ${ item.pronoun() }.\n  The orange\
    \ should be given to ${ item.pronoun_objective() }.\n  ${ item.pronoun_subjective(capitalize=True)\
    \ } ${ item.does_verb('belong') }\n  in an apple orchard and\n  ${ item.did_verb('visit')\
    \ }\n  an orange farm once.\n  ${ item.possessive('favorite vegetable', capitalize=True)\
    \ } is turnips.\n  % if isinstance(item, DAList):\n  Please fetch ${ item.quantity_noun('apple')\
    \ }\n  for ${ item }, since there are\n  ${ item.number_as_word() }.\n  % endif\n\
    \  % if item.is_user():\n  ${ item } is the user.\n  % else:\n  ${ item } is not\
    \ the user.\n  % endif\n  ${ item.do_question('eat', capitalize=True) } fruit?\n\
    \  ${ item.did_question('eat', capitalize=True) } mushrooms last Tuesday?\n  ${\
    \ item.were_question('present', capitalize=True) }\n  at the ball last month?\n\
    \  ${ item.have_question('befriended', capitalize=True) }\n  the cows in the field?\n\
    \  The subject is ${ item.subjective_pronoun_or_name() }.\n  The object is ${\
    \ item.pronoun_or_name() }.\n  ${ item.pronoun_subjective(capitalize=True) }\n\
    \  ${ item.did_verb('return') }\n  the radishes to ${ item.yourself_or_name()\
    \ }.\n  ${ item }\n  ${ item.did_verb('return') }\n  the potatoes to ${ item.itself()\
    \ }.\n  \n  % endfor"
"life_story":
  "yaml": |-
    template: life_story
    content: |
      ${ single_to_double_newlines(life_story_text) }
"macros":
  "height": !!int |-
    465
  "width": !!int |-
    488
  "yaml": |-
    event: final_screen
    question: |
      Here is a description of the team.
    attachment:
      name: Team
      filename: team_summary
      docx template file: team.docx
"make-ocr-pdf":
  "height": !!int |-
    523
  "width": !!int |-
    488
  "yaml": "mandatory: True\ncode: |\n  ocr_finished\n  final_screen\n---\ncode: |\n\
    \  uploaded_file.make_ocr_pdf() \n  ocr_finished = True\n---\nquestion: |\n  Upload\
    \ a PDF file or image.\nsubquestion: |\n  I will convert it to a searchable PDF.\n\
    fields:\n  - File: uploaded_file\n    datatype: files\n---\nevent: final_screen\n\
    question: |\n  Your OCR PDF\nsubquestion: |\n  ${ uploaded_file }"
"make-ocr-pdf-in-background":
  "height": !!int |-
    523
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      if not ocr_task.ready():
        waiting_screen
      final_screen
    ---
    code: |
      ocr_task = uploaded_file.make_ocr_pdf_in_background()
    ---
    question: |
      Upload a PDF file or image.
    subquestion: |
      I will convert it to a searchable PDF.
    fields:
      - File: uploaded_file
        datatype: files
    ---
    event: waiting_screen
    question: Please wait . . .
    reload: True
    ---
    event: final_screen
    question: |
      Your OCR PDF
    subquestion: |
      ${ uploaded_file }
"make-ocr-pdf-in-background-2":
  "height": !!int |-
    515
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - final_file: DAFile
"markdown-template":
  "yaml": "template: the_template\ncontent: |\n  This is *italic text*.\n  This is\
    \ **bold text**.\n  This is __some *bold italic* text__.\n\n  **bold** at beginning\
    \ of paragraph.\n\n  *italic* at beginning of paragraph.\n\n  > This is some block-quoted\n\
    \  > text that goes on for many many\n  > lines and you might wonder\n  > if it\
    \ will ever even stop\n  > because it keeps going on and \n  > on.\n  \n  ## This\
    \ is a heading\n\n  This is some regular text.\n\n  This line has a br.[BR] This\
    \ is the second line.\n\n  ### Lists\n  \n  Here is a bullet list:\n\n  * Apple\n\
    \  * Peach\n  * Pear\n\n  Here is a nested bullet list:\n\n  * Apple\n      *\
    \ Fuji\n      * Red Delicious\n  * Peach\n  * Pear\n\n  Here is a numbered list:\n\
    \n  1. Nutmeg\n  2. Celery\n  3. Oregano\n\n  Your favorite fruit is ${ favorite_fruit\
    \ }.\n  \n  Here is a\n  [link to a web site](https://google.com).\n\n  Here is\
    \ a picture:\n\n  [FILE house.png]\n---\nmandatory: True\nquestion: |\n  Here\
    \ is your document.\nattachment:\n  - name: Your attachment\n    filename: the_file\n\
    \    docx template file: markdown_template_demo.docx"
"ml-export-playground":
  "yaml": |-
    modules:
      - docassemble.webapp.playground
    ---
    initial: True
    code: |
      ml = SimpleTextMachineLearner(group_id='demo')
      the_data = ml.export_training_set(output_format='json')
      sources = PlaygroundSection('sources')
      sources.write_file('my_training_data.json', the_data)
"multi-signature":
  "yaml": |-
    objects:
      - user: Person
      - witnesses: DAList.using(object_type=Person, there_are_any=True, complete_attribute='complete')
      - signatories: DADict.using(auto_gather=False)
    ---
    mandatory: True
    code: |
      multi_user = True
    ---
    mandatory: True
    code: |
      user.name.text
      user.agrees_to_sign
      user.signature
      witnesses.gather()
      emails_sent
      told_to_wait
    ---
    code: |
      told_to_wait = True
      force_ask('user.status')
    ---
    code: |
      user.code
      signatories.gather()
      background_action('send_out_for_signature')
      emails_sent = True
    ---
    mandatory: True
    code: |
      process_action()
      force_ask('unauthorized')
    ---
    question: |
      What is your name and e-mail address?
    fields:
      - Name: user.name.text
      - E-mail: user.email
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: user.favorite_fruit
    ---
    question: |
      If you attest that your
      favorite fruit is
      ${ user.favorite_fruit },
      press Continue.
    subquestion: |
      On the next page, you will sign
      your name to an attestation
      to this effect.
    continue button field: user.agrees_to_sign
    ---
    question: |
      What is the name and e-mail
      address
      % if i == 0:
      of a
      % else:
      of the ${ ordinal(i) }
      % endif
      witness who can attest that
      you like
      ${ user.favorite_fruit }?
    fields:
      - Name: witnesses[i].name.text
      - E-mail: witnesses[i].email
    ---
    question: |
      Besides ${ witnesses }, can anyone
      else attest that you like
      ${ user.favorite_fruit }?
    yesno: witnesses.there_is_another
    ---
    code: |
      witnesses[i].name.text
      witnesses[i].signed
      witnesses[i].signature
      witnesses[i].signature_date
      witnesses[i].complete = True
    ---
    generic object: Person
    code: |
      import random
      import string
      x.code = ''.join(random.choice(string.ascii_lowercase) for i in range(10))
    ---
    code: |
      witnesses[i].sign_url = interview_url_action('request_signature', code=witnesses[i].code)
    ---
    code: |
      for witness in witnesses:
        signatories[witness.code] = witness
      signatories.gathered = True
    ---
    event: send_out_for_signature
    code: |
      for witness in witnesses:
        witness.notified
      user.notified
      background_response()
    ---
    code: |
      send_email(to=user, template=initial_email_template)
      user.notified = True
    ---
    code: |
      send_email(to=witness, template=witness.email_template)
      witnesses[i].notified = True
    ---
    template: initial_email_template
    subject: |
      Your Declaration of Favorite Fruit is out for signature.
    content: |
      ${ user },

      % if witnesses.number() == 1:
      I have e-mailed your
      witness to request a
      signature on the
      Declaration of Favorite Fruit.

      I will e-mail you when
      the witness has signed,
      but in the meantime you can
      [check the status].
      % else:
      I have e-mailed your
      witnesses
      to request that they sign the
      Declaration of Favorite Fruit.

      I will e-mail you when
      all the witnesses have
      signed.  You can
      [check the status] of your
      document to see who still has
      not signed.
      % endif

      [check the status]: ${ interview_url_action('status_page', code=user.code) }
    ---
    template: witnesses[i].email_template
    subject: |
      Your signature needed on
      a document for ${ user }
    content: |
      Dear ${ witnesses[i] },

      You are requested to
      witness a sworn statement
      attesting that ${ user }
      likes
      ${ user.favorite_fruit }.

      Please [click here] to
      view the document you are
      being asked to sign.

      [click here]: ${ witnesses[i].sign_url }
    ---
    attachment:
      name: |
        ${ user.possessive('Declaration of Favorite Fruit') }
      filename: |
        fruit_declaration_${ space_to_underscore(user) }
      docx template file: fruit_declaration.docx
      variable name: statement
    ---
    event: unauthorized
    code: |
      response('Page not found', response_code=404)
    ---
    event: status_page
    code: |
      if action_argument('code') != user.code:
        force_ask('unauthorized')
      force_ask('user.status')
    ---
    event: request_signature
    code: |
      if action_argument('code') not in signatories:
        force_ask('unauthorized')
      witness = signatories[action_argument('code')]
      if witness.signed:
        force_ask(witness.instanceName + '.thanked')
      force_ask(witness.instanceName + '.willing_to_sign',
                witness.instanceName + '.signature',
                { 'recompute': [ witness.instanceName + '.signature_obtained' ] },
                witness.instanceName + '.thanked')
    ---
    reconsider: statement
    question: |
      Are you willing to sign a
      statement attesting that
      ${ user } likes
      ${ user.favorite_fruit }?
    subquestion: |
      You can
      [preview the statement](${ statement.pdf.url_for() })
      now.

      If you are willing to sign,
      press Continue.  On
      the next screen, you will
      provide your signature.
    continue button field: witnesses[i].willing_to_sign
    ---
    generic object: Person
    question: |
      Sign your name
    signature: x.signature
    under: |
      ${ x }
    ---
    code: |
      for witness in witnesses:
        if not witness.signed:
          all_signatures_in = False
          break
      else:
        final_email_sent
        all_signatures_in = True
    ---
    code: |
      background_action('send_final_email')
      final_email_sent = True
    ---
    event: send_final_email
    code: |
      send_email(to=user, template=final_email_template, attachments=statement)
      background_response()
    ---
    template: final_email_template
    subject: Your Declaration of Favorite Fruit has been signed by all parties
    content: |
      ${ user },

      Your Declaration of Favorite
      Fruit has now been signed by
      all of your witnesses.
      Please see attached.
    ---
    code: |
      user.signature_date = today()
    ---
    only sets: witnesses[i].signature_obtained
    code: |
      witnesses[i].signed = True
      witnesses[i].signature_date = today()
      witnesses[i].signature_obtained = True
    ---
    code: |
      witnesses[i].signed = False
    ---
    code: |
      witnesses[i].signature_date = "_________________"
    ---
    code: |
      witnesses[i].signature = "____________________________"
    ---
    event: user.status
    reconsider:
      - all_signatures_in
      - statement
    question: |
      % if all_signatures_in:
      Your Declaration has been signed.
      % else:
      Your Declaration is out for signature.
      % endif
    subquestion: |
      % if not all_signatures_in:
        % for witness in witnesses:
          % if witness.signed:
      ${ witness } has signed.

          % else:
      ${ witness } has not signed yet.

          % endif
        % endfor
      % endif
    attachment code: statement
    ---
    event: witnesses[i].thanked
    reconsider:
      - all_signatures_in
      - statement
    question: |
      Thank you for witnessing
      ${ user.possessive('Declaration of Favorite Fruit') }
    subquestion: |
      If you would like a signed
      copy for your records, you
      may download it below.

      % if not all_signatures_in:
      Please note that not everyone
      has signed the document yet.
      % endif
    attachment code: statement
"multi-user":
  "height": !!int |-
    194
  "width": !!int |-
    488
  "yaml": "objects:\n  firstparty: Individual\n  secondparty: Individual\n---\ninitial:\
    \ true\ncode: |\n  multi_user = True\n  if user_logged_in():\n    if not defined('firstparty.email'):\n\
    \      firstparty.email = user_info().email\n    if user_info().email == firstparty.email:\n\
    \      firstparty.endpoint      \n    elif user_info().email == secondparty.email:\n\
    \      secondparty.endpoint\n    else:\n      user_kicked_out\n  else:\n    user_must_log_in\n\
    ---\nevent: firstparty.endpoint\ncode: |\n  firstparty.name.first\n  secondparty.name.first\n\
    \  firstparty.thing\n  firstparty.signature\n  if not defined('secondparty.signature'):\n\
    \    waiting_on_second_party\n  final_screen\n---\nevent: secondparty.endpoint\n\
    code: |\n  secondparty.consents\n  secondparty.signature\n  final_screen\n---\n\
    question: |\n  What is your name?\nfields:\n  - First Name: firstparty.name.first\n\
    \  - Last Name: firstparty.name.last\n---\nquestion: |\n  What is the name and\
    \ e-mail address\n  of the other party to the contract?\nfields:\n  - First Name:\
    \ secondparty.name.first\n  - Last Name: secondparty.name.last\n  - E-mail: secondparty.email\n\
    \    datatype: email\n---\nquestion: |\n  If you agree to convey\n  ${ secondparty.thing\
    \ }\n  to ${ firstparty },\n  press Continue.\nfield: secondparty.consents\n---\n\
    generic object: Individual\nquestion: |\n  What is your least valuable possession?\n\
    fields:\n  - no label: x.thing\n---\ngeneric object: Individual\nquestion: |\n\
    \  Please sign your name below.\nsignature: x.signature\nunder: |\n  ${ x.name\
    \ }\n---\nevent: user_must_log_in\nquestion: |\n  In order to use this interview,\n\
    \  you need to log in.\nsubquestion: |\n  If you have not yet created an\n  account,\
    \ press register.\nbuttons:\n  Register: register\n  Log in: signin\nprevent going\
    \ back: True\n---\nevent: user_kicked_out\nquestion: |\n  You are not authorized.\n\
    subquestion: |\n  I'm not sure how you got here,\n  but you do not belong.  Scram!\n\
    ---\nevent: waiting_on_second_party\nquestion: |\n  Done for now.\nsubquestion:\
    \ |\n  Please ask ${ secondparty } to go to\n  [this link](${ interview_url()\
    \ })\n  and register with the e-mail\n  address ${ secondparty.email }.\n\n  After\
    \ ${ secondparty } has done this,\n  you can come back to this interview\n  (using\
    \ the\n  [same link](${ interview_url() }))\n  and retrieve the signed agreement.\n\
    ---\nevent: final_screen\nquestion: |\n  Here is the signed contract.\nattachment:\n\
    \  name: |\n    An agreement between\n    ${ firstparty } and\n    ${ secondparty\
    \ }\n  filename: agreement\n  docx template file: Agreement_To_Transfer.docx"
"navbar-language":
  "height": !!int |-
    130
  "width": !!int |-
    488
  "yaml": "metadata:\n  title:\n    en: Fruit\n    es: Fruta\n---\ndefault screen\
    \ parts:\n  navigation bar html: |\n    <li class=\"nav-item dropdown\">\n   \
    \   <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"languageSelector\" data-bs-toggle=\"\
    dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n        <img src=\"\
    ${ url_of('docassemble.demo:data/static/united-kingdom.svg') }\" style=\"width:20px;\"\
    \ /><img src=\"${ url_of('docassemble.demo:data/static/mexico.svg') }\" style=\"\
    margin-left:-5px;width:20px;\" />\n      </a>\n      <div class=\"dropdown-menu\"\
    \ aria-labelledby=\"languageSelector\">\n        <a class=\"dropdown-item\" href=\"\
    ${ url_action('set_lang', lang='en') }\">[FILE docassemble.demo:data/static/united-kingdom.svg,\
    \ 20px] English</a>\n        <a class=\"dropdown-item\" href=\"${ url_action('set_lang',\
    \ lang='es') }\">[FILE docassemble.demo:data/static/mexico.svg, 20px] Espa\xF1\
    ol</a>\n      </div>\n    </li>\n---\nobjects:\n  - user: Individual.using(language='en')\n\
    ---\ninitial: True\ncode: |\n  set_language(user.language)\n---\nevent: set_lang\n\
    code: |\n  if action_argument('lang') in ('en', 'es'):\n    user.language = action_argument('lang')\n\
    \    set_save_status('overwrite')"
"nested-list-docx-table":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": "objects:\n  - fruits: DADict.using(object_type=DAList.using(object_type=Thing,\
    \ there_are_any=True), keys=['Apple', 'Orange'], gathered=True)\n---\nquestion:\
    \ |\n  Tell me about the ${ ordinal(j) } variety of ${ i.lower() }.\nfields:\n\
    \  - Variety: fruits[i][j].name.text\n  - Cost: fruits[i][j].cost\n    datatype:\
    \ currency\n---\nquestion: |\n  Are there more ${ noun_plural(i).lower() } besides\
    \ ${ fruits[i] }?\nyesno: fruits[i].there_is_another\n---\n# this would get done\
    \ implicitly through document assembly, but it is \n# more efficient to trigger\
    \ the gathering in a code block\nmandatory: True\ncode: |\n  for fruit_type, items_of_type\
    \ in fruits.items():\n    items_of_type.gather()\n---\nmandatory: True\nquestion:\
    \ |\n  Here is a summary of the fruit you listed.\nsubquestion: |\n  S/N { .text-center\
    \ }            | Fruit Type { .text-center } | Value { .text-center }\n  -------------------------------\
    \ | --------------------------- | -----------------------\n  % for fruit_type,\
    \ items_of_type in fruits.items():\n  ${ loop.index + 1 }.            | **${ fruit_type\
    \ }**         | **Subtotal: ${ currency(sum(y.cost for y in items_of_type), decimals=False)\
    \ }**  { .text-end }\n    % for fruit in items_of_type:\n  ${ alpha(loop.index).lower()\
    \ }. | ${ fruit.name.full() }      | ${ currency(fruit.cost, decimals=False) }\
    \ { .text-end }\n    % endfor\n  % endfor\n  &nbsp;                          |\
    \ &nbsp;                      | **Gross Value: ${ currency(sum(y.cost for y in\
    \ chain(*fruits.values())), decimals=False) }** { .text-end }\nattachment:\n \
    \ docx template file: nested_list_table.docx"
"new-or-existing":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - boss: Individual
      - employee: Individual
      - customers: DAList.using(object_type=Individual)
    ---
    mandatory: True
    question: |
      Summary
    subquestion: |
      The boss is ${ boss }.

      The employee is ${ employee }.

      The customers are ${ customers }.

      % if boss in customers or employee in customers:
      Either the boss or the employee is also a customer.
      % else:
      Neither the boss nor the employee is also a customer.
      % endif
    ---
    question: Are there any customers?
    yesno: customers.there_are_any
    ---
    question: Is there another customer?
    yesno: customers.there_is_another
    ---
    code: |
      people = ([boss] if defined('boss') and boss.name.defined() else []) \
             + ([employee] if defined('employee') and employee.name.defined() else []) \
             + customers.complete_elements().elements
    ---
    reconsider:
      - people
    question: |
      Who is the boss?
    fields:
      - Existing or New: boss.existing_or_new
        datatype: radio
        default: Existing
        choices:
          - Existing
          - New
      - Person: boss
        show if:
          variable: boss.existing_or_new
          is: Existing
        datatype: object
        choices: people
      - First Name: boss.name.first
        show if:
          variable: boss.existing_or_new
          is: New
      - Last Name: boss.name.last
        show if:
          variable: boss.existing_or_new
          is: New
      - Birthday: boss.birthdate
        datatype: date
        show if:
          variable: boss.existing_or_new
          is: New
    ---
    reconsider:
      - people
    question: |
      Who is the employee?
    fields:
      - Existing or New: employee.existing_or_new
        datatype: radio
        default: Existing
        choices:
          - Existing
          - New
      - Person: employee
        show if:
          variable: employee.existing_or_new
          is: Existing
        datatype: object
        choices: people
      - First Name: employee.name.first
        show if:
          variable: employee.existing_or_new
          is: New
      - Last Name: employee.name.last
        show if:
          variable: employee.existing_or_new
          is: New
      - Birthday: employee.birthdate
        datatype: date
        show if:
          variable: employee.existing_or_new
          is: New
    ---
    reconsider:
      - people
    question: |
      Who is the ${ ordinal(i) } customer?
    fields:
      - Existing or New: customers[i].existing_or_new
        datatype: radio
        default: Existing
        choices:
          - Existing
          - New
      - Person: customers[i]
        show if:
          variable: customers[i].existing_or_new
          is: Existing
        datatype: object
        choices: people
      - First Name: customers[i].name.first
        show if:
          variable: customers[i].existing_or_new
          is: New
      - Last Name: customers[i].name.last
        show if:
          variable: customers[i].existing_or_new
          is: New
      - Birthday: customers[i].birthdate
        datatype: date
        show if:
          variable: customers[i].existing_or_new
          is: New
"oauth-test":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    modules:
      .oauthsheets
    ---
    objects:
      - google: GoogleAuth.using(url_args=url_args)
    ---
    initial: True
    code: |
      if not user_logged_in():
        message("Test Google Sheets Integration", "Sorry, you must be logged in to test this interview.")
    ---
    mandatory: True
    question: |
      Here is some data.
    subquestion: |
      `${ google.test() }`
"oauth-test-2":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    modules:
      .oauthsheets
    ---
    objects:
      - google: GoogleAuth.using(url_args=url_args)
    ---
    initial: True
    code: |
      if not user_logged_in():
        message("Test Google Sheets Integration", "Sorry, you must be logged in to test this interview.")
        menu_items = []
      intro_screen
    ---
    question: |
      You need to connect with Google Sheets.
    subquestion: |
      Press Continue to connect.
    field: intro_screen
    ---
    code: |
      if google.active():
        intro_screen = True
    ---
    initial: True
    code: |
      menu_items = [ action_menu_item('Manage Credentials', 'manage_credentials') ]
    ---
    mandatory: True
    question: |
      Here is some data.
    subquestion: |
      `${ google.test() }`
    ---
    question: |
      Manage credentials
    subquestion: |
      You do not have any stored credentials.
    field: manage_credentials
    continue button label: Resume
    ---
    if: google.active()
    question: |
      Manage credentials
    subquestion: |
      If you want to delete your credentials, you can do so.

      ${ action_button_html(url_action('delete_credentials'), label="Delete credentials", color="danger") }

      Otherwise, you can go back to the interview.
    continue button label: Resume
    field: manage_credentials
    ---
    event: delete_credentials
    code: |
      google.delete_credentials()
      undefine('intro_screen')
"oauth-test-3":
  "height": !!int |-
    194
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - google: GoogleAuth.using(url_args=url_args, use_random_unique_id=True)
"oauth-test-4":
  "yaml": |-
    objects:
      - google: GoogleAuth.using(url_args=url_args, unique_id=user_code)
    ---
    question: |
      What is your user code?
    fields:
      - Code: user_code
"object-checkboxes-copy":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Which fruits does ${ person[i] } like?
    fields:
      - Fruits: person[i].fruit_preferences
        datatype: object_checkboxes
        choices:
          - fruit_data
    validation code: |
      person[i].fruit_preferences = person[i].fruit_preferences.copy_deep(person[i].instanceName + '.fruit_preferences')
    ---
    question: |
      How many seeds does
      ${ person[i].possessive('ideal ' + person[i].fruit_preferences[j].name.text) }
      have?
    fields:
      Seeds: person[i].fruit_preferences[j].seeds
    continue button field: person[i].fruit_preferences[j].preferred_seeds_verified
"object-checkboxes-custom":
  "height": !!int |-
    276
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.base.legal
    ---
    objects:
      protagonist: Individual
      antagonist: Individual
    ---
    mandatory: True
    code: |
      protagonist.name.first = "Harry"
      protagonist.name.last = "Potter"
      antagonist.name.first = "Tom"
      antagonist.name.last = "Riddle"
    ---
    question: Who are the villains, if any?
    fields:
      no label: villain
      datatype: object_checkboxes
      choices:
        - protagonist
        - antagonist
    ---
    objects:
      villain: PartyList.using(auto_gather=False)
    ---
    question: |
      % if villain.number() == 0:
      There are no villains here.
      % else:
      The ${ villain.as_noun() }
      ${ villain.does_verb("include") }
      ${ villain }.
      % endif
    subquestion: |
      The class name of `villain` is
      `${ villain.__class__.__name__ }`.
    mandatory: True
"objects-from-file":
  "height": !!int |-
    146
  "width": !!int |-
    488
  "yaml": "code: |\n  people = objects_from_file(\"contacts.yml\", use_objects=True)\n\
    ---\nmandatory: true\nquestion: |\n  How to contact us\nsubquestion: |\n  % for\
    \ person in people:\n  You can e-mail ${ person } at\n  ${ person.email }.\n \
    \ \n  % endfor"
"objects-from-file-dadict":
  "height": !!int |-
    186
  "width": !!int |-
    488
  "yaml": "code: |\n  fruitseeds = objects_from_file(\"fruitseeds.yml\")\n---\nmandatory:\
    \ True\nquestion: |\n  Summary of\n  ${ fruitseeds.number_as_word() }\n  fruit\n\
    subquestion: |\n  % for fruit in fruitseeds:\n  The seeds of ${ fruit } are\n\
    \  ${ fruitseeds[fruit] }\n  in number.\n  \n  % endfor"
"objects-from-file-gather":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": "code: |\n  fruitseeds = objects_from_file(\"fruitseeds.yml\", gathered=False,\
    \ name='fruitseeds')\n---\nquestion: |\n  The fruits so far are ${ fruitseeds\
    \ }.\n  Are there more?\nyesno: fruitseeds.there_is_another\n---\nquestion: |\n\
    \  What fruit would you like to add?\nfields:\n  - Fruit: fruitseeds.new_item_name\n\
    \  - Seeds: fruitseeds.new_item_value\n---\nmandatory: True\nquestion: |\n  Summary\
    \ of\n  ${ fruitseeds.number_as_word() }\n  fruit\nsubquestion: |\n  % for fruit\
    \ in fruitseeds:\n  The seeds of ${ fruit } are\n  ${ fruitseeds[fruit] }\n  in\
    \ number.\n  \n  % endfor"
"objects-from-file-json":
  "height": !!int |-
    146
  "width": !!int |-
    488
  "yaml": "code: |\n  people = objects_from_file(\"contacts.json\")\n---\nmandatory:\
    \ true\nquestion: |\n  How to contact us\nsubquestion: |\n  % for person in people:\n\
    \  You can e-mail ${ person } at\n  ${ person.email }.\n  \n  % endfor"
"objects-from-file-template":
  "yaml": |-
    objects:
      client: Individual
    ---
    question: |
      What is your name?
    fields:
      - First: client.name.first
      - Last: client.name.last
"openai-lookup":
  "height": !!int |-
    386
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .chatbot
"overlay-pdf":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    question: |
      What is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
    ---
    question: |
      Upload your company logo.
    fields:
      - Logo: logo_image
        datatype: file
    ---
    attachment:
      variable name: logo_page
      docx template file: logo_template.docx
    ---
    attachment:
      variable name: the_document
      docx template file: food_template.docx
    ---
    mandatory: True
    question: |
      Here is your document.
    subquestion: |
      ${ overlay_pdf(the_document, logo_page) }
"overlay-pdf-multi":
  "height": !!int |-
    523
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Upload a PDF file.
    subquestion: |
      Page numbers will be overlayed on your PDF.
    fields:
      - File: the_doc
        datatype: file
    ---
    attachment:
      variable name: overlay_doc
      docx template file: numbering_template.docx
    ---
    mandatory: True
    question: |
      Here is your document.
    subquestion: |
      ${ overlay_pdf(the_doc, overlay_doc.pdf, multi=True) }
"pdfextract":
  "height": !!int |-
    515
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Upload a PDF document at least 6 pages long.
    fields:
      - File: pdf_file
        datatype: file
    validation code: |
      try:
        assert pdf_file.num_pages() > 5
      except:
        raise DAValidationError("That is not a valid PDF of at least six pages in length.")
    ---
    code: |
      first_five_pages = pdf_file.extract_pages(first=1, last=5)
    ---
    mandatory: True
    question: |
      Here are the first five pages of your document.
    subquestion: |
      ${ first_five_pages }
"phone-number":
  "height": !!int |-
    187
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Individual
    ---
    question: |
      Is your mobile phone number
      based in the United States
      or Canada?
    field: user.phone_international
    buttons:
      - U.S. or Canada: False
      - Another country: True
    ---
    question: |
      What country is associated
      with your mobile phone number?
    field: user.phone_country
    dropdown:
      code: countries_list()
    ---
    code: |
      if not user.phone_international:
        user.phone_country = 'US'
    ---
    question: |
      What is your phone number?
    subquestion: |
      % if user.phone_international:
      Enter your phone number as you
      would dial it in
      ${ country_name(user.phone_country) }.
      % endif
    fields:
      - Phone number: user.phone_number
        validate: |
          lambda y: phone_number_is_valid(y, country=user.phone_country) or validation_error("Please enter a valid " + country_name(user.phone_country) + " phone number." )
    ---
    mandatory: True
    question: |
      I will text you at
      `${ user.sms_number(country=user.phone_country) }`.
"phone-number-2":
  "height": !!int |-
    350
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Individual
    ---
    question: |
      What is your phone number?
    fields:
      - label: |
          Is your mobile phone number
          based in the United States
          or Canada?
        field: user.phone_international
        datatype: noyesradio
        default: False
      - label: |
          What country is associated
          with your mobile phone number?
        field: user.phone_country
        code: countries_list()
        show if: user.phone_international
      - label: |
          Enter your phone number
        field: user.mobile_number
    validation code: |
      if user.phone_international:
        if not phone_number_is_valid(user.mobile_number, country=user.phone_country):
          validation_error('Please enter a valid phone number for ' + country_name(user.phone_country) + '.', field='user.mobile_number')
      else:
        if not phone_number_is_valid(user.mobile_number):
          validation_error('Please enter a valid phone number.', field='user.mobile_number')
    ---
    code: |
      if not user.phone_international:
        user.phone_country = 'US'
    ---
    mandatory: True
    question: |
      I will text you at
      `${ user.sms_number(country=user.phone_country) }`.
"predict-activity":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      % if present_activity.prediction == future_activity.prediction:
      It seems that you are fairly
      content with your current work.
      % else:
      That's interesting.
      % endif
    ---
    question: |
      What kind of work do you do now?
    fields:
      - Work: present_activity
        datatype: ml
    ---
    question: |
      What kind of work do you see
      yourself doing in five years?
    fields:
      - Work: future_activity
        datatype: ml
        using: present_activity
"predict-activity-activity":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      % if present_activity.prediction == future_activity.prediction:
      It seems that you are fairly
      content with your current work.
      % else:
      That's interesting.
      % endif
    ---
    question: |
      What kind of work do you do now?
    fields:
      - Work: present_activity
        datatype: ml
        using: activity
    ---
    question: |
      What kind of work do you see
      yourself doing in five years?
    fields:
      - Work: future_activity
        datatype: ml
        using: activity
"predict-happy-sad":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Describe how you feel.
    fields:
      - no label: mood
        datatype: ml
    ---
    mandatory: True
    question: |
      You sound ${ mood }.
"predict-happy-sad-area":
  "height": !!int |-
    248
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Describe how you feel.
    fields:
      - no label: mood
        datatype: mlarea
    ---
    mandatory: True
    question: |
      You sound ${ mood }.
"prevent-dependency-satisfaction":
  "height": !!int |-
    216
  "width": !!int |-
    488
  "yaml": |-
    modules:
      .legume
    ---
    objects:
      - bean: Legume
    ---
    mandatory: True
    code: |
      bean.sweet_index
      final_screen
    ---
    event: final_screen
    question: |
      % if bean.is_tasty():
      It is tasty.
      % else:
      It is not tasty.
      % endif
"preview":
  "height": !!int |-
    285
  "width": !!int |-
    488
  "yaml": "features:\n  centered: False\n---\nquestion: |\n  The food section\nright:\
    \ |\n  <div class=\"da-page-header\">\n    <h1 class=\"h3\">Preview</h1>\n  </div>\n\
    \n  [TARGET food_section_text]\nfields:\n  - Favorite fruit: favorite_fruit\n\
    \  - Favorite vegetable: favorite_vegetable\n  - Like mushrooms: likes_mushrooms\n\
    \    datatype: yesnoradio\n  - Favorite mushroom: favorite_mushroom\n  - Favorite\
    \ dessert: favorite_dessert\n    choices:\n      - Pie: pie\n      - Cake: cake\n\
    check in: question_food\n---\ntemplate: question_food\ncontent: |\n  I am a really\
    \ big fan of \n  ${ action_argument('favorite_fruit') or \"[BLANK]\" }.\n  With\
    \ dinner I like to have a side of\n  ${ action_argument('favorite_vegetable')\
    \ or \"[BLANK]\" }.\n  % if action_argument('likes_mushrooms') == 'True':\n  And\
    \ I usually can't resist adding sauteed \n  ${ action_argument('favorite_mushroom')\
    \ or \"[BLANK]\" }\n  to my\n  ${ action_argument('favorite_vegetable') or \"\
    [BLANK]\" }.\n  % endif\n  [BR][BR]\n  My favorite part of the meal is dessert,\n\
    \  when I can have a nice big slice of\n  ${ action_argument('favorite_dessert')\
    \ or \"[BLANK]\" }.\ntarget: food_section_text"
"primary-interview":
  "height": !!int |-
    189
  "width": !!int |-
    488
  "yaml": |-
    code: |
      interview_filename = 'docassemble.demo:data/questions/examples/secondary-interview.yml'
    ---
    mandatory: True
    question: |
      Press Continue to start a new session in
      `${ interview_filename }`.
    continue button field: first_screen
    ---
    code: |
      session_id = create_session(interview_filename)
    ---
    mandatory: True
    question: |
      The session ID of the other session is
      `${ session_id }`.
    subquestion: |
      `number_of_fruit` in the other session is
      currently
      `${ get_session_variables(interview_filename, session_id)['number_of_fruit'] }`.

      `favorite_fruit` in the other session is
      currently
      `${ get_session_variables(interview_filename, session_id)['favorite_fruit'] }`.

      Press Continue to set the variable
      `favorite_fruit` in the other session
      to `'apple'`.
    continue button field: second_screen
    ---
    mandatory: True
    code: |
      set_session_variables(interview_filename,
                            session_id,
                            {'favorite_fruit': 'apple'})
    ---
    mandatory: True
    question: |
      The favorite fruit in the other session is now
      `${ get_session_variables(interview_filename, session_id)['favorite_fruit'] }`.
    subquestion: |
      Press Continue to run the action
      `add_to_fruit_count` in the other session
      with action argument `number` set to `2`.
    continue button field: third_screen
    ---
    mandatory: True
    code: |
      run_action_in_session(interview_filename,
                            session_id,
                            'add_to_fruit_count',
                            arguments={'number': 2})
    ---
    mandatory: True
    question: |
      `number_of_fruit` in the other session
      is now
      `${ get_session_variables(interview_filename, session_id)['number_of_fruit'] }`.
    subquestion: |
      Note: if you press the Back button
      and press Continue again, you will see
      number increase again, since the other
      session is not affected by the Back
      button in this session.

      ${ action_button_html(interview_url(i=interview_filename, session=session_id), label='Visit other session', new_window=True) }
"progressive-disclosure":
  "height": !!int |-
    376
  "width": !!int |-
    488
  "yaml": "modules:\n  - .progressivedisclosure\n---\nfeatures:\n  css: progressivedisclosure.css\n\
    ---\ntemplate: fruit_explanation\nsubject: |\n  Tell me more about fruit\ncontent:\
    \ |\n  ##### What is a fruit?\n  \n  A fruit is the the sweet and\n  fleshy product\
    \ of a tree or\n  other plant that contains\n  seed and can be eaten as food.\n\
    ---\ntemplate: favorite_explanation\nsubject: |\n  Explain favorites\ncontent:\
    \ |\n  ##### What is a favorite?\n\n  If you have a favorite something,\n  that\
    \ means you like it more than\n  you like other things of a similar\n  nature.\n\
    ---\nquestion: |\n  What is your favorite fruit?\nsubquestion: |\n  Everybody\
    \ has a favorite fruit.\n  \n  ${ prog_disclose(fruit_explanation) }\n\n  Don't\
    \ you have a favorite fruit?\n\n  ${ prog_disclose(favorite_explanation) }\n\n\
    \  You must have a favorite.\nfields:\n  - Favorite fruit: favorite_fruit"
"pytojs-dom":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": "imports:\n  - json\n---\nquestion: |\n  What are your favorites?\nfields:\n\
    \  - Color: color\n  - Flavor: flavor\n---\nquestion: |\n  What is your favorite\
    \ fruit?\nsubquestion: |\n  <div id=\"myinfo\"\n       data-color=${ json.dumps(color)\
    \ } \n       data-flavor=${ json.dumps(flavor) }\n       class=\"d-none\"></div>\n\
    fields:\n  - Fruit: favorite_fruit\nscript: |\n  <script>\n    var myInfo = $(\"\
    #myinfo\").data();\n    console.log(\"You like \" + myInfo.color + \" things that\
    \ taste like \" + myInfo.flavor + \".\"); \n  </script>\n---\nmandatory: True\n\
    question: |\n  Your favorite fruit is\n  ${ favorite_fruit }."
"pytojs-hidden":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    imports:
      - json
    ---
    question: |
      What is your favorite color?
    fields:
      - Color: favorite_color
    ---
    question: |
      What is your favorite fruit?
    subquestion: |
      <input type="hidden"
             name="${ encode_name('favorite_color') }"
             value=${ json.dumps(favorite_color) }>
    fields:
      - Fruit: favorite_fruit
    script: |
      <script>
        var myColor = val('favorite_color');
        console.log("You said you liked " + myColor);
        setField('favorite_color', 'dark ' + myColor);
        console.log("But now you like " + val('favorite_color'));
      </script>
    ---
    mandatory: True
    question: |
      Your favorites
    subquestion: |
      Your favorite fruit is
      ${ favorite_fruit }.

      Your favorite color is
      ${ favorite_color }.
"pytojs-log":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    imports:
      - json
    ---
    question: |
      What is your favorite color?
    fields:
      - Color: favorite_color
    ---
    initial: True
    code: |
      log("var myColor = " + json.dumps(favorite_color) + ";", "javascript")
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    script: |
      <script>
        console.log("I know that your favorite color is " + myColor);
      </script>
    ---
    mandatory: True
    question: |
      Your favorites
    subquestion: |
      Your favorite fruit is
      ${ favorite_fruit }.

      Your favorite color is
      ${ favorite_color }.
"pytojs-script":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    imports:
      - json
    ---
    question: |
      What is your favorite color?
    fields:
      - Color: favorite_color
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    script: |
      <script>
        var myColor = ${ json.dumps(favorite_color) };
        console.log("I know your favorite color is " + myColor);
      </script>
    ---
    mandatory: True
    question: |
      Your favorites
    subquestion: |
      Your favorite fruit is
      ${ favorite_fruit }.

      Your favorite color is
      ${ favorite_color }.
"questionless":
  "yaml": |-
    mandatory: True
    code: |
      json_response({'final': True, 'inhabitants': inhabitant_count})
    ---
    code: |
      if favorite_number == 42 and user_agrees_to_waive_penalties:
        inhabitant_count = 2
      else:
        inhabitant_count = 2000 + favorite_number * 45
"quotes-in-code":
  "yaml": |-
    mandatory: True
    question: |
      Here is your document.
    attachment:
      - name: Fruit and vegetable summary
        filename: fruit_vegetable
        docx template file: quotes-in-code.docx
"random-forest":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      rf = RandomForestMachineLearner('fruit', use_initial_file=True)
      if rf.is_empty():
        rf.add_to_training_set({'a': 1, 'b': 2.0, 'c': 3.0, 'd': 'A'}, 'apple')
        rf.add_to_training_set({'a': 0.9, 'b': 2, 'c': 3.0, 'd': 'A'}, 'apple')
        rf.add_to_training_set({'a': 0.8, 'b': 2.0, 'c': 3.0, 'd': 'A'}, 'apple')
        rf.add_to_training_set({'a': 1.0, 'b': 2.1, 'c': 3, 'd': 'B'}, 'apple')
        rf.add_to_training_set({'a': 1.2, 'b': 2.0, 'c': 3.1, 'd': 'A'}, 'apple')
        rf.add_to_training_set({'a': 1.0, 'b': 7.0, 'c': 3.0, 'd': 'B'}, 'orange')
        rf.add_to_training_set({'a': 0.9, 'b': 6.9, 'c': 3.0, 'd': 'A'}, 'orange')
        rf.add_to_training_set({'a': 0.8, 'b': 6.7, 'c': 2.9, 'd': 'B'}, 'orange')
        rf.add_to_training_set({'a': 1.0, 'b': 7.1, 'c': 2.95, 'd': 'B'}, 'orange')
        rf.add_to_training_set({'a': 1.05, 'b': 6.8, 'c': 3.1, 'd': 'B'}, 'orange')
    ---
    code: |
      sample_data = {'a': 1, 'b': 3.8, 'c': 3.1, 'd': 'B'}
      predictions = rf.predict(sample_data, probabilities=True)
"random-forest-interview":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - characteristics: DADict.using(gathered=True)
    ---
    mandatory: True
    question: |
      Think of a fruit.
    subquestion: |
      When you have thought of a fruit,
      press Continue.
    field: thought_of_fruit
    ---
    mandatory: True
    question: |
      Is it round?
    yesno: characteristics['round']
    ---
    mandatory: True
    question: |
      What color is it when ripe?
    field: characteristics['color']
    choices:
      - Red
      - Yellow
      - Purple
      - Blue
      - Green
      - Orange
    ---
    mandatory: True
    question: |
      Where are its seeds?
    field: characteristics['seed location']
    choices:
      - Inside
      - Outside
      - Throughout
    ---
    mandatory: True
    question: |
      How many inches wide is a
      typical specimen?
    fields:
      - no label: characteristics['width']
        datatype: range
        min: 0.1
        max: 12.0
        step: 0.1
        default: 6.0
    ---
    mandatory: True
    question: |
      How sweet is it, on a scale from
      1 to 5?
    fields:
      - no label: characteristics['sweetness']
        datatype: range
        min: 1
        max: 5
        default: 3
    ---
    code: |
      rf = RandomForestMachineLearner('fruit', use_initial_file=True)
    ---
    code: |
      predictions = rf.predict(characteristics, probabilities=True)
    ---
    mandatory: True
    code: |
      if len(predictions) > 0 and prediction_correct:
        rf.add_to_training_set(characteristics, predictions[0][0])
      else:
        fruit_name = fruit_name.lower()
        fruit_name = noun_singular(fruit_name)
        rf.add_to_training_set(characteristics, fruit_name)
    ---
    mandatory: True
    question: |
      Thank you!
    buttons:
      Try another one: restart
    ---
    question: |
      With
      ${ '{0:.1f}%'.format(predictions[0][1]*100) }
      certainty, I think it is
      ${ indefinite_article(predictions[0][0]) }.
      Am I right?
    yesno: prediction_correct
    ---
    question: |
      What fruit were you thinking of?
    fields:
      - Fruit: fruit_name
"raw":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Here is the source code.
    attachment:
      name: Hello, world program
      filename: hello_world
      raw: True
      content file: sample.cpp
"raw-data-example":
  "height": !!int |-
    238
  "width": !!int |-
    488
  "yaml": "code: |\n  raw_data = objects_from_file(\"raw_data.yml\", recursive=False)\n\
    ---\nmandatory: true\nquestion: |\n  The imported data\nsubquestion: |\n  % for\
    \ item in raw_data:\n  The `inventory` of\n  \"${ item.title }\" is:\n  \n  >\
    \ `${ item.inventory }`\n  \n  % endfor"
"realtimegd":
  "height": !!int |-
    368
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - google_drive_downloader
    ---
    objects:
      template_file: DAFile
    ---
    code: |
      template_file.initialize(filename='fruit_info.docx')
      GoogleDriveDownloader().download_file_from_google_drive(file_id='1MsiAA632Ehyj0jEW_WEBpZOd-qokqyni', dest_path=template_file.path())
      template_file.commit()
      template_file.fetched = True
    ---
    attachment:
      name: Information about fruit
      filename: fruit_info_sheet
      variable name: assembled_document
      docx template file:
        code: template_file
    need: template_file.fetched
    ---
    question: |
      Which fruits do you like?
    fields:
      - Fruit: likes_fruit
        datatype: checkboxes
        choices:
          - Apple: apple
          - Banana: banana
          - Peach: peach
          - Grapes: grapes
    ---
    mandatory: True
    question: |
      Here is a customized information sheet about the fruits you like.
    attachment code: assembled_document
"realtimegd2":
  "height": !!int |-
    368
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .gd_fetch
    ---
    objects:
      template_file: DAFile
    ---
    code: |
      template_file.initialize(filename='fruit_info.docx')
      fetch_file('1IGvzA-oOB_bVTmDB7TPW9UgQT-6MGtSe', template_file.path())
      template_file.commit()
      template_file.fetched = True
    ---
    attachment:
      name: Information about fruit
      filename: fruit_info_sheet
      variable name: assembled_document
      docx template file:
        code: template_file
    need: template_file.fetched
    ---
    question: |
      Which fruits do you like?
    fields:
      - Fruit: likes_fruit
        datatype: checkboxes
        choices:
          - Apple: apple
          - Banana: banana
          - Peach: peach
          - Grapes: grapes
    ---
    mandatory: True
    question: |
      Here is a customized information sheet about the fruits you like.
    attachment code: assembled_document
"redact-docx":
  "height": !!int |-
    362
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Here is your document.
    subquestion: |
      You need to print both copies
      and file them in court.

      The unredacted version goes
      to the judge, and the redacted
      version will go in the public
      record.
    attachments:
      - name: Unredacted petition
        redact: False
        filename: petition_unredacted
        docx template file: redact_demo.docx
      - name: Redacted petition
        filename: petition_redacted
        docx template file: redact_demo.docx
"redact-pdf":
  "height": !!int |-
    362
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Here is your document.
    subquestion: |
      You need to print both copies
      and file them in court.

      The unredacted version goes
      to the judge, and the redacted
      version will go in the public
      record.
    attachments:
      - name: Unredacted petition
        redact: False
        filename: petition_unredacted
        pdf template file: redact_demo.pdf
        field code:
          - today_date: today()
          - name: user
          - ssn: redact(user.ssn)
          - phone: user.phone_number
          - address: redact(user.address)
          - money: currency(money_claimed)
      - name: Redacted petition
        filename: petition_redacted
        pdf template file: redact_demo.pdf
        field code:
          - today_date: today()
          - name: user
          - ssn: redact(user.ssn)
          - phone: user.phone_number
          - address: redact(user.address)
          - money: currency(money_claimed)
"repeatable":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    code: |
      version = 0
    ---
    event: new_version
    code: |
      version += 1
    ---
    depends on: version
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    depends on: version
    question: |
      What is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
    ---
    depends on: version
    question: |
      What is your favorite apple?
    fields:
      - Apple: favorite_apple
    ---
    mandatory: True
    question: |
      Summary
    subquestion: |
      You like ${ favorite_fruit }
      and ${ favorite_vegetable }.
      % if favorite_fruit == 'apple':

      Your favorite apple is
      ${ favorite_apple }
      % endif
    action buttons:
      - label: Try again
        action: new_version
        color: primary
"report-version":
  "yaml": |-
    imports:
      - docassemble.demo
    ---
    mandatory: True
    code: |
      json_response({'version': docassemble.demo.__version__})
"run-python-module":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    code: |
      output, return_code = run_python_module('hello.py')
    ---
    mandatory: True
    question: |
      ${ output }
"run-python-module-2":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    code: |
      output, return_code = run_python_module('docassemble.demo.hello')
    ---
    mandatory: True
    question: |
      ${ output }
"run-python-module-3":
  "height": !!int |-
    64
  "width": !!int |-
    488
  "yaml": |-
    code: |
      output, return_code = run_python_module('.hello')
    ---
    mandatory: True
    question: |
      ${ output }
"run-python-module-tests":
  "height": !!int |-
    262
  "width": !!int |-
    488
  "yaml": "code: |\n  output, return_code = run_python_module('tests.py', ['-v'])\n\
    ---\nmandatory: True\nquestion: |\n  Result of unit tests\nsubquestion: |\n  %\
    \ if return_code == 0:\n  Command succeeded.\n  % else:\n  Command failed!\n \
    \ % endif\n  \n  ${ indent(output) }"
"save-continue-later":
  "height": !!int |-
    211
  "width": !!int |-
    488
  "yaml": "default screen parts:\n  under: |\n    % if show_save_resume_message:\n\
    \    [Save and resume later](${ url_action('save_and_resume') })\n    % endif\n\
    ---\nmandatory: True\ncode: |\n  target = 'normal'\n  show_save_resume_message\
    \ = True\n  multi_user = True\n---\nmandatory: True\nscan for variables: False\n\
    code: |\n  if target == 'save_and_resume':\n    if wants_email:\n      if email_sent:\n\
    \        log(\"We sent an e-mail to your e-mail address.\", \"info\")\n      else:\n\
    \        log(\"There was a problem with e-mailing.\", \"danger\")\n      show_save_resume_message\
    \ = False\n    undefine('wants_email')\n    undefine('email_sent')\n    target\
    \ = 'normal'\n  final_screen\n---\nquestion: |\n  What is your favorite fruit?\n\
    fields:\n  - Favorite fruit: favorite_fruit\n---\nquestion: |\n  What is your\
    \ favorite vegetable?\nfields:\n  - Favorite vegetable: favorite_vegetable\n---\n\
    question: |\n  What is your favorite legume?\nfields:\n  - Favorite legume: favorite_legume\n\
    ---\nevent: final_screen\nquestion: |\n  I would like you to cook a\n  ${ favorite_fruit\
    \ },\n  ${ favorite_vegetable }, and\n  ${ favorite_legume } stew.\n---\nevent:\
    \ save_and_resume\ncode: |\n  target = 'save_and_resume'\n---\ncode: |\n  send_email(to=user_email_address,\
    \ template=save_resume_template)\n  email_sent = True\n---\nquestion: |\n  How\
    \ to resume your interview later\nsubquestion: |\n  If you want to resume your\
    \ interview later, we can\n  e-mail you a link that you can click on to resume\n\
    \  your interview at a later time.\nfields:\n  - no label: wants_email\n    input\
    \ type: radio\n    choices:\n      - \"Ok, e-mail me\": True\n      - \"No thanks\"\
    : False\n    default: True\n  - E-mail address: user_email_address\n    datatype:\
    \ email\n    show if: wants_email\nunder: \"\"\n---\ntemplate: save_resume_template\n\
    subject: |\n  Your interview\ncontent: |\n  To resume your interview, \n  [click\
    \ here](${ interview_url() })."
"secondary-interview":
  "height": !!int |-
    106
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      There are ${ number_of_fruit } fruit.
    subquestion: |
      Your favorite fruit is ${ favorite_fruit }.
    ---
    event: add_to_fruit_count
    code: |
      number_of_fruit += action_argument('number')
    ---
    code: |
      number_of_fruit = 0
"setparts":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    metadata:
      title: Custody Complaint
    ---
    on change:
      user.name.first: |
        set_parts(title='Custody Complaint for ' + user.name.full())
      standing_reason: |
        set_parts(subtitle=standing_reason + ' standing ')
"sign":
  "yaml": "mandatory: True\ncode: |\n  multi_user = True\n---\nmandatory: True\ncode:\
    \ |\n  multi_user = True\n  signature = '(Your signature will go here)'\n---\n\
    mandatory: True\ncode: |\n  intro_seen\n  email_address\n  template_file\n  notified_of_url\n\
    \  agrees_to_sign\n  signature_reset\n  signature\n  document_emailed\n  final_screen\n\
    ---\ncode: |\n  notified_of_url = True\n  prevent_going_back()\n  force_ask('screen_with_link')\n\
    ---\nquestion: |\n  What is your e-mail address?\nsubquestion: |\n  The signed\
    \ document will be e-mailed to this address.\nfields:\n  - E-mail: email_address\n\
    ---\nevent: screen_with_link\nquestion: |\n  Share this link with the signer.\n\
    subquestion: |\n  Suggested content for e-mailing to the signer:\n    \n  > I\
    \ need you to sign a document.  You can\n  > sign it using a touchscreen or with\
    \ a\n  > mouse.  To see the document and start\n  > the signing process, [click\
    \ here].\n\n  [click here]: ${ interview_url() }\n---\nsignature: signature\n\
    question: Sign your name\n---\nquestion: |\n  Do you agree to sign this document?\n\
    subquestion: |\n  Click the document image below to read the document\n  before\
    \ signing it.\n  \n  ${ draft_document.pdf }\nfield: agrees_to_sign\ncontinue\
    \ button label: I agree to sign\n---\nattachment:\n  name: Document\n  filename:\
    \ signed_document\n  variable name: draft_document\n  docx template file:\n  \
    \  code: template_file\n---\nquestion: |\n  Collect an electronic signature\n\
    subquestion: |\n  If you provide your e-mail address and upload a document,\n\
    \  you can get a link that you can give to someone, where\n  they can click the\
    \ link, sign their name, and then the\n  signed document will be e-mailed to you.\n\
    \n  The document you upload needs to be in .docx format.\n\n  In the place where\
    \ you want the signature to be, you need to\n  include the word \"signature\"\
    \ surrounded by double curly brackets.\n  For example:\n\n  > I swear that the\
    \ above is true and correct.\n  >\n  > {{ signature }}\n  >\n  > Angela Washington\n\
    \n  If you do not include \"{{ signature }}\" in exactly this way,\n  a signature\
    \ will not be inserted.\nfield: intro_seen\n---\nquestion: |\n  Please upload\
    \ the document you want to be signed.\nfields:\n  - Document: template_file\n\
    \    datatype: file\n    accept: |\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\
    \n---\ncode: |\n  del signature\n  signature_reset = True\n---\nattachment:\n\
    \  name: Document\n  filename: signed_document\n  variable name: signed_document\n\
    \  valid formats:\n    - pdf\n  docx template file:\n    code: template_file\n\
    ---\nevent: final_screen\nprevent going back: True\nquestion: |\n  Here is your\
    \ signed document.\nattachment code: signed_document\n---\ntemplate: email_template\n\
    subject: Signed document\ncontent: |\n  The attached document has been signed.\n\
    ---\ncode: |\n  send_email(to=email_address, template=email_template, attachments=signed_document.pdf)\n\
    \  document_emailed = True"
"signature-diversion":
  "yaml": |-
    question: |
      Sign your name
    subquestion: |
      % if not device().is_touch_capable:
      Please sign your name below with your mouse.
      % endif
    signature: user.signature
    under: |
      ${ user }
"signature-preview":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Individual
      - friend: Individual
    ---
    mandatory: True
    code: |
      user.name.first
      friend.name.first
      prized_collection
      draft_screen_shown
      user.signature
      document_finalized
      final_screen
    ---
    attachment:
      variable name: instrument
      name: Transfer of Ownership
      filename: Transfer-of-Ownership
      pdf template file: |
        Transfer-of-Ownership.pdf
      fields:
        - "grantor": ${ user }
        - "grantee": ${ friend }
        - "collection": ${ prized_collection }
        - "signature": ${ user.signature if final else "[FILE sign-here.png]" }
    # If the variable "final" changes,
    # the document needs to be reassembled
    depends on: final
    ---
    # What it means for the document
    # to be finalized
    code: |
      # Put the document into final mode
      final = True
      # Submit the document somewhere
      # send_email(...)
      # Prevent duplicate submissions
      prevent_going_back()
      document_finalized = True
    ---
    # Set an initial value for final
    code: |
      final = False
    ---
    question: |
      What is your name?
    fields:
      - First Name: user.name.first
      - Last Name: user.name.last
    ---
    question: |
      What is your best friend's name?
    fields:
      - First Name: friend.name.first
      - Last Name: friend.name.last
    ---
    question: What objects do you collect?
    fields:
      - Collection: prized_collection
        hint: baseball cards, fine china
    ---
    question: |
      Please sign your name below.
    signature: user.signature
    under: |
      ${ user }
    ---
    question: Your draft document
    subquestion: |
      Please review the attached document and
      press Continue if you agree to sign it.
    continue button field: draft_screen_shown
    attachment code: instrument
    ---
    event: final_screen
    question: Congratulations!
    subquestion: |
      You have now transferred everything
      you own to ${ friend }.

      Here is your signed document.
    attachment code: instrument
"signature-template":
  "yaml": "objects:\n  - signer: DAList.using(object_type=Individual, there_are_any=True)\n\
    ---\nquestion: |\n  Is there another signer?\nyesno: signer.there_is_another\n\
    ---\nquestion: |\n  Tell me about the ${ ordinal(i) } signer.\nfields:\n  - First\
    \ Name: signer[i].name.first\n  - Last Name: signer[i].name.last\n  - Likes Fruit:\
    \ signer[i].likes_fruit\n    datatype: yesno\n---\ntemplate: signer[i].signature_block\n\
    content: |\n  \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\
    _\\_\\_\\_\\_\\_\\_\\_\\_\n  \n  ${ signer[i] }, fruit\n  % if signer[i].likes_fruit:\n\
    \  lover\n  % else:\n  hater\n  % endif\n  \n  Dated: ${ today() }\n---\nmandatory:\
    \ True\nquestion: |\n  Here is your document.\nattachment:\n  docx template file:\
    \ signature_template.docx"
"signdoc":
  "yaml": |-
    translations:
      - signdoc_es.xlsx
"single-code":
  "yaml": |-
    mandatory: True
    code: |
      if likes_fruit:
        favorite_fruit
        if puts_fruit_in_smoothies:
          favorite_smoothie_flavor
      else:
        favorite_vegetable
      final_screen
    ---
    question: Do you like fruit?
    yesno: likes_fruit
    ---
    question: What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    question: Do you like to put fruit in smoothies?
    yesno: puts_fruit_in_smoothies
    ---
    question: What is your favorite flavor of smoothie?
    fields:
      - Flavor: favorite_smoothie_flavor
    ---
    question: Well, since you don't like fruit, what is your favorite vegetable?
    fields:
      - Vegetable: favorite_vegetable
    ---
    event: final_screen
    question: Thanks for that information.
"snapshot":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .read_snapshot
    ---
    mandatory: True
    code: |
      favorite_fruit
      store_variables_snapshot()
      final_screen
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    event: final_screen
    question: |
      Your favorite fruit is
      ${ favorite_fruit }.
    subquestion: |
      Here is a summary of fruits
      and how many people like them.

      % for fruit, count in sorted(analyze().items(), key=lambda y: y[1], reverse=True):
      * **${ fruit }**:
        % if count == 1:
        1 person
        % else:
        ${ count } people
        % endif
      % endfor
"someone-already-mentioned":
  "height": !!int |-
    284
  "width": !!int |-
    488
  "yaml": |-
    objects:
      cook: Individual
      gardener: Individual
      maid: Individual
    ---
    question: |
      Who is the cook?
    fields:
      - Somebody already mentioned: cook
        datatype: object
        disable others: True
        choices: |
          [person for person in [cook, gardener, maid] if person.name.defined()]
      - First Name: cook.name.first
      - Last Name: cook.name.last
      - Suffix: cook.name.suffix
        required: False
        code: name_suffix()
    ---
    question: |
      Who is the gardener?
    fields:
      - Somebody already mentioned: gardener
        datatype: object
        disable others: True
        choices: |
          [person for person in [cook, gardener, maid] if person.name.defined()]
      - First Name: gardener.name.first
      - Last Name: gardener.name.last
      - Suffix: gardener.name.suffix
        required: False
        code: name_suffix()
"stage-one":
  "height": !!int |-
    230
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Individual
    ---
    question: |
      What is your name?
    fields:
      - First name: user.name.first
      - Last name: user.name.last
    ---
    question: |
      What is your favorite fruit?
    fields:
      - Fruit: favorite_fruit
    ---
    code: |
      part_two = user_info().package + ':data/questions/examples/stage-two.yml'
    ---
    code: |
      user.name.first
      favorite_fruit
      session_id = create_session(part_two)
      set_session_variables(part_two, session_id, {'user': user, 'favorite_fruit': favorite_fruit}, overwrite=True)
      new_session_created = True
    ---
    event: final_screen
    question: |
      All done
    subquestion: |
      [Proceed to the next part](${ interview_url(i=part_two, session=session_id) })
    ---
    mandatory: True
    code: |
      new_session_created
      final_screen
"stage-two":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      You like ${ favorite_fruit } and
      ${ favorite_vegetable }.
"subdoc-params":
  "height": !!int |-
    339
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Here is your document.
    attachment:
      name: A document
      filename: final_document
      docx template file: main_doc_params.docx
"subdocument":
  "height": !!int |-
    306
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: |
      Here is your document.
    attachment:
      name: A document
      filename: final_document
      docx template file: main_document.docx
"tagged-pdf":
  "height": !!int |-
    575
  "width": !!int |-
    488
  "yaml": |-
    question: Your document is ready.
    subquestion: |
      The file is tagged PDF.
    attachment:
      - name: A hello world document
        filename: Hello_World_Document
        valid formats:
          - pdf
        description: |
          A document with a classic message
        docx template file: tagged.docx
        tagged pdf: True
    mandatory: True
"testaccordion1":
  "height": !!int |-
    450
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.demo.accordion
    ---
    event: review_screen
    question: |
      Please review your answers.
    review:
      - raw html: |
          ${ start_accordion('Pets', showing=True) }
      - Edit: favorite_cat
        button: |
          You said your favorite cat was
          **${ favorite_cat }**.
      - Edit: favorite_vegetable
        button: |
          You said your favorite dog was
          **${ favorite_dog }**.
      - raw html: |
          ${ next_accordion('Food') }
      - Edit: favorite_fruit
        button: |
          You said your favorite fruit was
          **${ favorite_fruit }**.
      - Edit: favorite_vegetable
        button: |
          You said your favorite vegetable was
          **${ favorite_vegetable }**.
      - raw html: |
          ${ next_accordion('Aesthetics') }
      - Edit: fashion_aesthetic
        button: |
          You said your fashion aesthetic was
          **${ fashion_aesthetic }**.
      - Edit: decor_aesthetic
        button: |
          You said your home decor aesthetic was
          **${ decor_aesthetic }**.
      - raw html: |
          ${ end_accordion() }
"testaccordion2":
  "height": !!int |-
    438
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.demo.accordion
    ---
    question: |
      Tell me about your preferences
    fields:
      - raw html: |
          ${ start_accordion('Pets', showing=True) }
      - Favorite cat: favorite_cat
      - Favorite dog: favorite_dog
      - raw html: |
          ${ next_accordion('Food') }
      - Favorite fruit: favorite_fruit
        required: False
      - Favorite vegetable: favorite_vegetable
        required: False
      - Favorite meat dish: favorite_meat_dish
        show if:
          variable: favorite_dog
          is: spaniel
      - raw html: |
          ${ next_accordion('Aesthetics') }
      - Fashion aesthetic: fashion_aesthetic
        required: False
      - Decor aesthetic: decor_aesthetic
        required: False
      - raw html: ${ end_accordion() }
"testaccordion3":
  "height": !!int |-
    309
  "width": !!int |-
    488
  "yaml": "modules:\n  - docassemble.demo.accordion\n---\nquestion: |\n  Welcome to\
    \ the interview.\nsubquestion:\n  This interview will determine a recommended\
    \ direction\n  for your life.\n  \n  ${ start_accordion('What do I need to know\
    \ before starting?') }\n\n  Modernipsum dolor sit amet illusionism cubo-futurism\
    \ international\n  gothic historicism, neo-minimalism divisionism cobra intervention\n\
    \  art art nouveau. Installation art futurism les nabis academic hudson\n  river\
    \ school young british artists, romanticism neo-expressionism\n  street art orphism,\
    \ lyrical abstraction avant-garde remodernism\n  vorticism. Divisionism caravaggisti\
    \ die br\xFCcke tachisme\n  impressionism, gothic art luminism illusionism op\
    \ art neoclassicism,\n  street art situationist international neoism. Orphism\
    \ russian\n  symbolism academic ego-futurism kinetic art neo-dada dada stuckism\n\
    \  international gr\xFCnderzeit, post-impressionism impressionism\n  postmodernism\
    \ maximalism precisionism post-painterly\n  abstraction. Russian symbolism superflat\
    \ new media art jugendstil\n  maximalism illusionism, gr\xFCnderzeit scuola romana\
    \ merovingian\n  rayonism secularism, existentialism op art action painting lyrical\n\
    \  abstraction.\n  \n  ${ next_accordion('What do I do after I finish the interview?')\
    \ }\n\n  Metaphysical art barbizon school carolingian neo-minimalism\n  primitivism\
    \ superflat neo-minimalism naturalism, der blaue reiter\n  hard-edge painting\
    \ new media art fluxus superstroke\n  monumentalism. Art deco russian futurism\
    \ cubo-futurism pop art\n  relational art neo-expressionism, synchromism pre-raphaelites\
    \ sound\n  art photorealism classicism, surrealism gothic art hudson river\n \
    \ school scuola romana. Rococo biedermeier cloisonnism secularism\n  hudson river\
    \ school fluxus, modernism, ego-futurism formalism\n  manierism, gr\xFCnderzeit\
    \ deformalism abstract expressionism\n  postmodernism. Classicism postminimalism\
    \ superstroke lowbrow\n  tonalism fauvism color field painting systems art, biedermeier\n\
    \  post-impressionism hyperrealism structuralism neoclassicism. Dada\n  tachisme\
    \ luminism manierism surrealism, avant-garde performance art\n  neoclassicism\
    \ hard-edge painting neo-impressionism, nouveau realisme\n  eclecticism tonalism.\n\
    \  \n  ${ end_accordion() }\ncontinue button field: intro"
"testaccordion4":
  "height": !!int |-
    246
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.demo.accordion
    ---
    features:
      css: docassemble.demo:data/static/accordion.css
    ---
    question: |
      Tell me about your preferences
    fields:
      - raw html: |
          ${ start_accordion('Pets', showing=True) }
      - Favorite cat: favorite_cat
        show if:
          code: ask_about_pets
      - Favorite dog: favorite_dog
        show if:
          code: ask_about_pets
      - raw html: |
          ${ next_accordion('Food') }
      - Favorite fruit: favorite_fruit
        required: False
      - Favorite vegetable: favorite_vegetable
        required: False
      - raw html: |
          ${ next_accordion('Aesthetics') }
      - Fashion aesthetic: fashion_aesthetic
        required: False
      - Decor aesthetic: decor_aesthetic
        required: False
      - raw html: ${ end_accordion() }
    ---
    code: |
      ask_about_pets = False
"testcards":
  "height": !!int |-
    334
  "width": !!int |-
    488
  "yaml": |-
    include:
      - docassemble.demo:data/questions/examples/cards.yml
    ---
    question: |
      What is your favorite fruit?
    subquestion: |
      ${ card_start("Why this is important", color="info", icon="comment") }
      We need to know your favorite fruit
      because if your favorite fruit is not
      a fruit that we think is tasty, then
      behind your back we will report you to
      the [police](https://www.interpol.int/).
      ${ card_end() }
    fields:
      - Fruit: favorite_fruit
        choices:
          - Apple: apples
          - Orange: oranges
          - Peach: peaches
          - Pear: pears
          - Grapes: grapes
      - note: |
          ${ card_start("The real truth about apples", color="danger", icon="apple-alt") }
          We would advise you to stop eating
          apples immediately. Apples are produced
          by a [conglomerate] that is secretly
          owned by the teachers union, and they
          are trying to brainwash your kids
          into buying apples in order to enrich
          themselves.
          ${ card_end() }

          [conglomerate]: https://usapple.org/
        show if:
          variable: favorite_fruit
          is: apples
"testcooking":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .objects
    ---
    objects:
      - submission: Recipe
    ---
    mandatory: True
    question: |
      Recipe for ${ submission.name }
    subquestion: |
      ${ submission.summary() }
    ---
    generic object: Recipe
    question: |
      What do you want to cook?
    fields:
      - Food: x.name
    ---
    generic object: Recipe
    question: |
      What are the ingredients in
      ${ x.name }?
    fields:
      - no label: x.ingredients
        input type: area
    ---
    generic object: Recipe
    question: |
      What are the instructions
      for cooking ${ x.name }?
    fields:
      - no label: x.instructions
        input type: area
"testdatabase":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - .demodb
    ---
    objects:
      - customer: Customer
      - bank: Bank
    ---
    question: |
      What is the customer's SSN?
    fields:
      - SSN: customer.ssn
        default: 023-43-2412
    validation code: |
      customer.db_read()
    ---
    question: |
      What is the bank's routing number?
    fields:
      - Routing number: bank.routing
        default: "234234223"
    validation code: |
      bank.db_read()
    ---
    question: |
      What is the name of the bank?
    fields:
      - Name: bank.name.text
    ---
    question: |
      What is the customer's name?
    fields:
      - First Name: customer.name.first
      - Last Name: customer.name.last
    ---
    question: |
      What is the customer's address?
    fields:
      - Address: customer.address.address
        address autocomplete: True
      - City: customer.address.city
      - State: customer.address.state
        code: |
          states_list()
      - Zip: customer.address.zip
        required: False
      - County: customer.address.county
    ---
    mandatory: True
    code: |
      customer.ssn
      customer.name.first
      customer.address.address
      bank.routing
      bank.name.text
      bank.add_customer(customer)
    ---
    mandatory: True
    question: |
      The bank is
      ${ bank }
      and the customer is
      ${ customer }.
    buttons:
      - Restart: restart
"testdatabase2":
  "height": !!int |-
    176
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - customer: Customer
      - banks: DADict # dictionary that will store all bank objects with a common instance naming scheme, like banks[23].
"testgeolocate":
  "height": !!int |-
    162
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - user: Individual
      - enemy: Individual
    ---
    initial: True
    code: |
      set_info(user=user, role='user')
      track_location = user.location.status()
    ---
    mandatory: True
    code: |
      need(welcome_screen, user.address.address, enemy.name.first, enemy.address.address, map_shown)
    ---
    event: map_shown
    question: Map of you and your enemy
    subquestion: |
      ${ map_of(user, enemy) }
"testssn":
  "yaml": |-
    modules:
      - .ssn
    ---
    mandatory: True
    question: |
      Your SSN is ${ user_ssn }.
    ---
    question: |
      What is your SSN?
    fields:
      - SSN: user_ssn
        datatype: ssn
"translation":
  "yaml": |-
    modules:
      - .translate
"turnips-worms":
  "height": !!int |-
    122
  "width": !!int |-
    488
  "yaml": |-
    question: Do you like turnips?
    yesno: likes_turnips
    ---
    question: When did you stop idolizing worms?
    fields:
      - Date: worm_idolizing_stop_date
        datatype: date
"universal-document":
  "height": !!int |-
    549
  "width": !!int |-
    488
  "yaml": "features:\n  use catchall: True\n---\ngeneric object: DACatchAll\nquestion:\
    \ |\n  What is ${ x.object_name() }?\nfields:\n  - no label: x.value\nvalidation\
    \ code: |\n  define(x.instanceName, x.value)\n---\nif: |\n  x.context == 'float'\
    \ or (x.context == 'add' and isinstance(x.operand, float))\ngeneric object: DACatchAll\n\
    question: |\n  How much is ${ x.object_name() }?\nfields:\n  - Amount: x.value\n\
    \    datatype: currency\nvalidation code: |\n  define(x.instanceName, x.value)\n\
    ---\nif: |\n  x.context == 'int' or (x.context == 'add' and isinstance(x.operand,\
    \ int))\ngeneric object: DACatchAll\nquestion: |\n  How much is ${ x.object_name()\
    \ }?\nfields:\n  - Amount: x.value\n    datatype: integer\nvalidation code: |\n\
    \  define(x.instanceName, x.value)\n---\nif: |\n  x.context == 'str' and x.instanceName.lower()\
    \ == 'signature'\ngeneric object: DACatchAll\nquestion: |\n  Sign your name\n\
    signature: x.value\nvalidation code: |\n  define(x.instanceName, x.value)\n---\n\
    question: |\n  Please attach a .docx file that you would like to assemble.\nsubquestion:\
    \ |\n  Place variables in brackets like so:\n\n  > The quick brown {{ animal }}\
    \ jumped \n  > over the {{ adjective }} {{ other_animal }}.\n\n  To enter a signature,\
    \ use `{{ signature }}`.\n\n  To see how this works, try uploading this [test\
    \ file].\n\n  [test file]: ${ DAStaticFile(filename='universal-test.docx').url_for()\
    \ }\nfields:\n  - no label: attached_template\n    datatype: file\n    accept:\
    \ |\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\
    \n---\nmandatory: True\nquestion: Here is your document.\nattachment:\n  - docx\
    \ template file:\n      code: attached_template"
"update-references":
  "height": !!int |-
    173
  "width": !!int |-
    488
  "yaml": |-
    mandatory: True
    question: Here is your document
    attachment:
      name: Brief
      filename: brief
      update references: True
      docx template file: doc-with-toc.docx
"upload-file-size":
  "height": !!int |-
    483
  "width": !!int |-
    488
  "yaml": |-
    question: |
      Please upload a file.
    fields:
      File: uploaded_file
      datatype: file
    validation code: |
      if uploaded_file.size_in_bytes() > 100000:
        validation_error("That file is way too big!  Upload a smaller file.")
"upload-handler":
  "yaml": |-
    generic object: DAFileList
    sets: x[i].initialized
    question: |
      Upload one or more ${ noun_plural(x.object_name()) }.
    fields:
      - label: |
          ${ noun_plural(x.object_name(), capitalize=True) }
        field: x[i]
        datatype: files
    validation code: |
      uploaded_files = x[i]
      x[i] = uploaded_files[0]
      x[i].instanceName = x.item_name(i)
      for item in uploaded_files[1:]:
        x.append(item, set_instance_name=True)
      del uploaded_files
      x.there_is_another = False
      x.gathered = True
"upload-handler-demo":
  "height": !!int |-
    154
  "width": !!int |-
    488
  "yaml": |-
    include:
      - upload-handler.yml
    ---
    objects:
      - exhibits: DAFileList
    ---
    event: final_screen
    question: |
      % if exhibits.number() == 0:
      Good luck making your case without evidence.
      % else:
      Thank you for uploading
      ${ exhibits.quantity_noun('exhibits') }.
      % endif
    ---
    mandatory: True
    code: |
      if exhibits.number() > 0:
        exhibits.verified
      final_screen
"validation-code":
  "height": !!int |-
    270
  "width": !!int |-
    488
  "yaml": |-
    question: |
      There are 10 fruit in all.
    subquestion: |
      How many apples and oranges
      are there?
    fields:
      - Apples: number_of_apples
        datatype: integer
      - Oranges: number_of_oranges
        datatype: integer
    validation code: |
      if number_of_oranges + number_of_apples != 10:
        validation_error("The number of fruit must add up to 10!")
"validation-test":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    modules:
      - docassemble.demo.validationfuncs
    ---
    mandatory: True
    question: |
      There were ${ number_of_tires }
      tires in the garage.
    ---
    question: |
      How many car tires are in the
      garage?
    fields:
      - Tires: number_of_tires
        datatype: integer
        validate: is_multiple_of_four
"validation-test-two":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    modules:
      docassemble.demo.validationfuncstwo
    ---
    mandatory: True
    question: |
      There were ${ number_of_tires }
      tires in the garage.
    ---
    question: |
      How many car tires are in the
      garage?
    fields:
      - Tires: number_of_tires
        datatype: integer
        validate: is_multiple_of_four
"watermark":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    objects:
      - watermark_image: DAStaticFile.using(filename='draft.eps')
    ---
    mandatory: True
    question: |
      Document
    attachment:
      content: |
        Hello, ${ planet }!
      metadata:
        header-includes:
          - \usepackage{draftwatermark}
          - \SetWatermarkText{\includegraphics{${ watermark_image.path() }}}
    ---
    question: |
      What is the name of the planet you wish to greet?
    fields:
      - Planet: planet
"wc_common":
  "yaml": |-
    code: |
      user_key = 'workers_comp_user:' + user_info().email
"wc_side_of_bed":
  "height": !!int |-
    208
  "width": !!int |-
    488
  "yaml": |-
    include:
      - wc_common.yml

