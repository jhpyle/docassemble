modules:
  - docassemble.webapp.playground
  - docassemble.base.logger
---
objects:
  - interview: DAInterview
  - main_code: DAQuestion
  - metadata: DAQuestion
  - attachments: DAAttachmentList
---
initial: True
code: |
  if not user_logged_in():
      message("You are not authorized to view this page")
---
question: |
  Please upload one or more templates that you want your interview to
  assemble.
fields:
  - Files: template_uploads
    datatype: files
---
code: |
  attachments.clear()
  templates = PlaygroundSection('template')
  for uploaded_file in template_uploads:
    template_filename = templates.copy_from(uploaded_file.path(), uploaded_file.filename)
    markdown_filename = templates.convert_file_to_md(template_filename)
    attachment = attachments.appendObject()
    attachment.original_filename = uploaded_file.filename
    attachment.markdown_filename = markdown_filename
    attachment.content = templates.read_file(markdown_filename)
  attachments.gathered = True  
---
mandatory: True
code: |
  metadata.type = 'metadata'
  metadata.file_name = interview.file_name
  metadata.title = interview.title
  metadata.short_title = interview.short_title
  interview.blocks.append(metadata)
---
mandatory: True
code: |
  interview.demonstrate()
  main_code.type = 'code'
  main_code.is_mandatory = True
  main_code.code = 'all_done'
  main_code.demonstrated = True
  end_question = interview.questions.initializeObject('all_done')
  end_question.type = 'question'
  end_question.question_type = 'end_attachment'
  end_question.field_list.appendObject()
  end_question.field_list[0].variable = 'all_done'
  end_question.attachments = attachments
  interview.blocks.append(main_code)
---
mandatory: True
code: |
  interview.demonstrate()
  ok = False
  while not ok:
    ok = True
    varsinuse = Playground().variables_from(interview.source())
    for var in varsinuse['undefined_names']:
      if var not in interview.questions:
        new_question = interview.questions.initializeObject(var)
        new_question.field_list.appendObject()
        new_question.field_list[0].variable = var
        ok = False
  pg = Playground()
  yaml_file = to_yaml_file(interview.file_name)
  pg.write_file(yaml_file, interview.source())
  interview_url = pg.interview_url(yaml_file)
  all_done
---
sets: all_done
question: Here is the interview you created
subquestion: |
  ${ indent_by(interview.source(), 4) }

  You can try to
  <a target="_blank" href="${ interview_url }">run the interview</a>
  to see how it works.

  To make changes to your interview, go to the [Playground] and edit
  `${ yaml_file }`.  To edit the templates, go to the [Templates section]
  and edit
  ${ comma_and_list(map(lambda x: '`' + x.markdown_filename + '`', attachments.elements)) }.

  [Playground]: ${ url_of('playground') }
  [Templates section]: ${ url_of('playgroundtemplate') }
buttons:
  - Exit: exit
---
generic object: DAQuestion
question: |
  % if x.field_list[0].variable == 'all_done':
  What should the message be on the final screen of
  the interview?
  % else:
  How would you like to ask the question that defines
  the variable `${ x.field_list[0].variable }`?
  % endif
subquestion: |
  % if x.field_list[0].variable == 'all_done':
  On the final screen, the user will have the opportunity to
  download the assembled document, e-mail it, or click the
  Exit button to leave.
  % endif

  Click Help to see a model of the **Title** and **Body** parts of
  a screen.
help: |
  The **Title** and **Body** are these parts of the screen:
  
  [FILE docassemble.base:sample-titles.png]
fields:
  - Title: x.question_text
    input type: area
  - Body: x.subquestion_text
    input type: area
    required: False
---
generic object: DAQuestion
question: |
  Will the variable `${ x.field_list[0].variable }` be set by asking the
  user a question, or by evaluating a logic statement?
field: x.type
choices:
  - A Question: question
  - A Logic Statement: code
---
generic object: DAQuestion
question: |
  Please provide the logic statements that define
  `${ x.field_list[0].variable }`.
subquestion: |
  You can use any valid Python source code to define the variable.
fields:
  - no label: x.code
    input type: area
    default: "${ x.field_list[0].variable } = "
---
generic object: DAQuestion
question: |
  What type of answer is required to the question
  "${ x.question_text }"
subquestion: |
  For example, if the type of question is "Simple yes/no," then
  `${ x.field_list[0].variable }` will be defined either as `True` or
  `False`.
field: x.question_type
choices:
  - "Simple yes/no": yesno
  - "Short line of text": text
  - "Large area of text": area
---
generic object: DAField
question: |
  How should the field that defines the variable `${ x.variable }` be
  labeled?
fields:
  - "Use a label?": x.has_label
    datatype: yesnoradio
    default: True
  - Text of label: x.label
    show if:
      variable: x.has_label
      is: True
---
generic object: DAAttachment
question: |
  What is the name of the document that will be assembled using
  the template ${ x.original_filename }?
subquestion: |
  E.g., if the name is "Complaint for Custody," then on the final
  screen, this will be the heading of the area where the user can
  download and/or e-mail the document.  It will also be used to set
  the name of the downloaded file.
fields:
  - Document Name: x.name
---
generic object: DAInterview
question: |
  How would you like to name your interview?
subquestion: |
  The **File name** is the name of the interview within the [Playground].

  The **Title** is the name that the user will see on the [Interview
  List] and in the upper-left corner of the screen.

  The **Short title** is the name that mobile users will see in the
  upper-left corner of the screen.

  [Playground]: ${ url_of('playground') }
  [Interview List]: ${ url_of('interviews') }
fields:
  - File name: x.file_name
  - Title: x.title
  - Short title: x.short_title
---
generic object: DAQuestion
question: |
  The following block was added to your interview.
subquestion: |
  ${ indent_by(x.source(), 4) }
field: x.demonstrated
